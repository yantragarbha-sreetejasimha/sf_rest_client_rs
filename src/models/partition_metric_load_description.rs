/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.2.0.46
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PartitionMetricLoadDescription : Represents load information for a partition, which contains the metrics load information about primary, all secondary replicas/instances or a specific secondary replica/instance located on a specific node.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PartitionMetricLoadDescription {
    /// Id of the partition.
    #[serde(rename = "PartitionId")]
    partition_id: Option<::models::PartitionId>,
    /// Partition's load information for primary replica, in case partition is from a stateful service.
    #[serde(rename = "PrimaryReplicaLoadEntries")]
    primary_replica_load_entries: Option<Vec<::models::MetricLoadDescription>>,
    /// Partition's load information for all secondary replicas or instances.
    #[serde(rename = "SecondaryReplicasOrInstancesLoadEntries")]
    secondary_replicas_or_instances_load_entries:
        Option<Vec<::models::MetricLoadDescription>>,
    /// Partition's load information for a specific secondary replica or instance located on a specific node.
    #[serde(rename = "SecondaryReplicaOrInstanceLoadEntriesPerNode")]
    secondary_replica_or_instance_load_entries_per_node:
        Option<Vec<::models::ReplicaMetricLoadDescription>>,
}

impl Default for PartitionMetricLoadDescription {
    fn default() -> Self {
        Self::new()
    }
}

impl PartitionMetricLoadDescription {
    /// Represents load information for a partition, which contains the metrics load information about primary, all secondary replicas/instances or a specific secondary replica/instance located on a specific node.
    pub fn new() -> PartitionMetricLoadDescription {
        PartitionMetricLoadDescription {
            partition_id: None,
            primary_replica_load_entries: None,
            secondary_replicas_or_instances_load_entries: None,
            secondary_replica_or_instance_load_entries_per_node: None,
        }
    }

    pub fn set_partition_id(&mut self, partition_id: ::models::PartitionId) {
        self.partition_id = Some(partition_id);
    }

    pub fn with_partition_id(
        mut self,
        partition_id: ::models::PartitionId,
    ) -> PartitionMetricLoadDescription {
        self.partition_id = Some(partition_id);
        self
    }

    pub fn partition_id(&self) -> Option<&::models::PartitionId> {
        self.partition_id.as_ref()
    }

    pub fn reset_partition_id(&mut self) {
        self.partition_id = None;
    }

    pub fn set_primary_replica_load_entries(
        &mut self,
        primary_replica_load_entries: Vec<::models::MetricLoadDescription>,
    ) {
        self.primary_replica_load_entries = Some(primary_replica_load_entries);
    }

    pub fn with_primary_replica_load_entries(
        mut self,
        primary_replica_load_entries: Vec<::models::MetricLoadDescription>,
    ) -> PartitionMetricLoadDescription {
        self.primary_replica_load_entries = Some(primary_replica_load_entries);
        self
    }

    pub fn primary_replica_load_entries(
        &self,
    ) -> Option<&Vec<::models::MetricLoadDescription>> {
        self.primary_replica_load_entries.as_ref()
    }

    pub fn reset_primary_replica_load_entries(&mut self) {
        self.primary_replica_load_entries = None;
    }

    pub fn set_secondary_replicas_or_instances_load_entries(
        &mut self,
        secondary_replicas_or_instances_load_entries: Vec<
            ::models::MetricLoadDescription,
        >,
    ) {
        self.secondary_replicas_or_instances_load_entries =
            Some(secondary_replicas_or_instances_load_entries);
    }

    pub fn with_secondary_replicas_or_instances_load_entries(
        mut self,
        secondary_replicas_or_instances_load_entries: Vec<
            ::models::MetricLoadDescription,
        >,
    ) -> PartitionMetricLoadDescription {
        self.secondary_replicas_or_instances_load_entries =
            Some(secondary_replicas_or_instances_load_entries);
        self
    }

    pub fn secondary_replicas_or_instances_load_entries(
        &self,
    ) -> Option<&Vec<::models::MetricLoadDescription>> {
        self.secondary_replicas_or_instances_load_entries.as_ref()
    }

    pub fn reset_secondary_replicas_or_instances_load_entries(&mut self) {
        self.secondary_replicas_or_instances_load_entries = None;
    }

    pub fn set_secondary_replica_or_instance_load_entries_per_node(
        &mut self,
        secondary_replica_or_instance_load_entries_per_node: Vec<
            ::models::ReplicaMetricLoadDescription,
        >,
    ) {
        self.secondary_replica_or_instance_load_entries_per_node =
            Some(secondary_replica_or_instance_load_entries_per_node);
    }

    pub fn with_secondary_replica_or_instance_load_entries_per_node(
        mut self,
        secondary_replica_or_instance_load_entries_per_node: Vec<
            ::models::ReplicaMetricLoadDescription,
        >,
    ) -> PartitionMetricLoadDescription {
        self.secondary_replica_or_instance_load_entries_per_node =
            Some(secondary_replica_or_instance_load_entries_per_node);
        self
    }

    pub fn secondary_replica_or_instance_load_entries_per_node(
        &self,
    ) -> Option<&Vec<::models::ReplicaMetricLoadDescription>> {
        self.secondary_replica_or_instance_load_entries_per_node
            .as_ref()
    }

    pub fn reset_secondary_replica_or_instance_load_entries_per_node(
        &mut self,
    ) {
        self.secondary_replica_or_instance_load_entries_per_node = None;
    }
}

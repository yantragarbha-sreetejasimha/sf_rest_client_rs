/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 8.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ApplicationCapacityDescription : Describes capacity information for services of this application. This description can be used for describing the following. - Reserving the capacity for the services on the nodes - Limiting the total number of nodes that services of this application can run on - Limiting the custom capacity metrics to limit the total consumption of this metric by the services of this application

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ApplicationCapacityDescription {
    /// The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.
    #[serde(rename = "MinimumNodes")]
    minimum_nodes: Option<i64>,
    /// The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
    #[serde(rename = "MaximumNodes")]
    maximum_nodes: Option<i64>,
    /// List of application capacity metric description.
    #[serde(rename = "ApplicationMetrics")]
    application_metrics: Option<::models::ApplicationMetricDescriptionList>,
}

impl Default for ApplicationCapacityDescription {
    fn default() -> Self {
        Self::new()
    }
}

impl ApplicationCapacityDescription {
    /// Describes capacity information for services of this application. This description can be used for describing the following. - Reserving the capacity for the services on the nodes - Limiting the total number of nodes that services of this application can run on - Limiting the custom capacity metrics to limit the total consumption of this metric by the services of this application
    pub fn new() -> ApplicationCapacityDescription {
        ApplicationCapacityDescription {
            minimum_nodes: None,
            maximum_nodes: None,
            application_metrics: None,
        }
    }

    pub fn set_minimum_nodes(&mut self, minimum_nodes: i64) {
        self.minimum_nodes = Some(minimum_nodes);
    }

    pub fn with_minimum_nodes(
        mut self,
        minimum_nodes: i64,
    ) -> ApplicationCapacityDescription {
        self.minimum_nodes = Some(minimum_nodes);
        self
    }

    pub fn minimum_nodes(&self) -> Option<&i64> {
        self.minimum_nodes.as_ref()
    }

    pub fn reset_minimum_nodes(&mut self) {
        self.minimum_nodes = None;
    }

    pub fn set_maximum_nodes(&mut self, maximum_nodes: i64) {
        self.maximum_nodes = Some(maximum_nodes);
    }

    pub fn with_maximum_nodes(
        mut self,
        maximum_nodes: i64,
    ) -> ApplicationCapacityDescription {
        self.maximum_nodes = Some(maximum_nodes);
        self
    }

    pub fn maximum_nodes(&self) -> Option<&i64> {
        self.maximum_nodes.as_ref()
    }

    pub fn reset_maximum_nodes(&mut self) {
        self.maximum_nodes = None;
    }

    pub fn set_application_metrics(
        &mut self,
        application_metrics: ::models::ApplicationMetricDescriptionList,
    ) {
        self.application_metrics = Some(application_metrics);
    }

    pub fn with_application_metrics(
        mut self,
        application_metrics: ::models::ApplicationMetricDescriptionList,
    ) -> ApplicationCapacityDescription {
        self.application_metrics = Some(application_metrics);
        self
    }

    pub fn application_metrics(
        &self,
    ) -> Option<&::models::ApplicationMetricDescriptionList> {
        self.application_metrics.as_ref()
    }

    pub fn reset_application_metrics(&mut self) {
        self.application_metrics = None;
    }
}

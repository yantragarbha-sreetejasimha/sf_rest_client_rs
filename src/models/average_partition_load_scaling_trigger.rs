/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 8.2
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// AveragePartitionLoadScalingTrigger : Represents a scaling trigger related to an average load of a metric/resource of a partition.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AveragePartitionLoadScalingTrigger {
    /// Specifies the kind of scaling trigger
    #[serde(rename = "Kind")]
    kind: ::models::ScalingTriggerKind,
    /// The name of the metric for which usage should be tracked.
    #[serde(rename = "MetricName")]
    metric_name: String,
    /// The lower limit of the load below which a scale in operation should be performed.
    #[serde(rename = "LowerLoadThreshold")]
    lower_load_threshold: String,
    /// The upper limit of the load beyond which a scale out operation should be performed.
    #[serde(rename = "UpperLoadThreshold")]
    upper_load_threshold: String,
    /// The period in seconds on which a decision is made whether to scale or not.
    #[serde(rename = "ScaleIntervalInSeconds")]
    scale_interval_in_seconds: i64,
}

impl AveragePartitionLoadScalingTrigger {
    /// Represents a scaling trigger related to an average load of a metric/resource of a partition.
    pub fn new(
        kind: ::models::ScalingTriggerKind,
        metric_name: String,
        lower_load_threshold: String,
        upper_load_threshold: String,
        scale_interval_in_seconds: i64,
    ) -> AveragePartitionLoadScalingTrigger {
        AveragePartitionLoadScalingTrigger {
            kind,
            metric_name,
            lower_load_threshold,
            upper_load_threshold,
            scale_interval_in_seconds,
        }
    }

    pub fn set_kind(&mut self, kind: ::models::ScalingTriggerKind) {
        self.kind = kind;
    }

    pub fn with_kind(
        mut self,
        kind: ::models::ScalingTriggerKind,
    ) -> AveragePartitionLoadScalingTrigger {
        self.kind = kind;
        self
    }

    pub fn kind(&self) -> &::models::ScalingTriggerKind {
        &self.kind
    }

    pub fn set_metric_name(&mut self, metric_name: String) {
        self.metric_name = metric_name;
    }

    pub fn with_metric_name(
        mut self,
        metric_name: String,
    ) -> AveragePartitionLoadScalingTrigger {
        self.metric_name = metric_name;
        self
    }

    pub fn metric_name(&self) -> &String {
        &self.metric_name
    }

    pub fn set_lower_load_threshold(&mut self, lower_load_threshold: String) {
        self.lower_load_threshold = lower_load_threshold;
    }

    pub fn with_lower_load_threshold(
        mut self,
        lower_load_threshold: String,
    ) -> AveragePartitionLoadScalingTrigger {
        self.lower_load_threshold = lower_load_threshold;
        self
    }

    pub fn lower_load_threshold(&self) -> &String {
        &self.lower_load_threshold
    }

    pub fn set_upper_load_threshold(&mut self, upper_load_threshold: String) {
        self.upper_load_threshold = upper_load_threshold;
    }

    pub fn with_upper_load_threshold(
        mut self,
        upper_load_threshold: String,
    ) -> AveragePartitionLoadScalingTrigger {
        self.upper_load_threshold = upper_load_threshold;
        self
    }

    pub fn upper_load_threshold(&self) -> &String {
        &self.upper_load_threshold
    }

    pub fn set_scale_interval_in_seconds(
        &mut self,
        scale_interval_in_seconds: i64,
    ) {
        self.scale_interval_in_seconds = scale_interval_in_seconds;
    }

    pub fn with_scale_interval_in_seconds(
        mut self,
        scale_interval_in_seconds: i64,
    ) -> AveragePartitionLoadScalingTrigger {
        self.scale_interval_in_seconds = scale_interval_in_seconds;
        self
    }

    pub fn scale_interval_in_seconds(&self) -> &i64 {
        &self.scale_interval_in_seconds
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.3.0.9
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ContainerCodePackageProperties : Describes a container and its runtime properties.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ContainerCodePackageProperties {
    /// The name of the code package.
    #[serde(rename = "name")]
    name: String,
    /// The Container image to use.
    #[serde(rename = "image")]
    image: String,
    /// Image registry credential.
    #[serde(rename = "imageRegistryCredential")]
    image_registry_credential: Option<::models::ImageRegistryCredential>,
    /// Override for the default entry point in the container.
    #[serde(rename = "entrypoint")]
    entrypoint: Option<String>,
    /// Command array to execute within the container in exec form.
    #[serde(rename = "commands")]
    commands: Option<Vec<String>>,
    /// The environment variables to set in this container
    #[serde(rename = "environmentVariables")]
    environment_variables: Option<Vec<::models::EnvironmentVariable>>,
    /// The settings to set in this container. The setting file path can be fetched from environment variable \"Fabric_SettingPath\". The path for Windows container is \"C:\\\\secrets\". The path for Linux container is \"/var/secrets\".
    #[serde(rename = "settings")]
    settings: Option<Vec<::models::Setting>>,
    /// The labels to set in this container.
    #[serde(rename = "labels")]
    labels: Option<Vec<::models::ContainerLabel>>,
    /// The endpoints exposed by this container.
    #[serde(rename = "endpoints")]
    endpoints: Option<Vec<::models::EndpointProperties>>,
    /// This type describes the resource requirements for a container or a service.
    #[serde(rename = "resources")]
    resources: ::models::ResourceRequirements,
    /// The volumes to be attached to the container.
    #[serde(rename = "volumeRefs")]
    volume_refs: Option<Vec<::models::ContainerVolume>>,
    /// Runtime information of a container instance.
    #[serde(rename = "instanceView")]
    instance_view: Option<::models::ContainerInstanceView>,
    /// Reference to sinks in DiagnosticsDescription.
    #[serde(rename = "diagnostics")]
    diagnostics: Option<::models::DiagnosticsRef>,
}

impl ContainerCodePackageProperties {
    /// Describes a container and its runtime properties.
    pub fn new(
        name: String,
        image: String,
        resources: ::models::ResourceRequirements,
    ) -> ContainerCodePackageProperties {
        ContainerCodePackageProperties {
            name,
            image,
            image_registry_credential: None,
            entrypoint: None,
            commands: None,
            environment_variables: None,
            settings: None,
            labels: None,
            endpoints: None,
            resources,
            volume_refs: None,
            instance_view: None,
            diagnostics: None,
        }
    }

    pub fn set_name(&mut self, name: String) {
        self.name = name;
    }

    pub fn with_name(mut self, name: String) -> ContainerCodePackageProperties {
        self.name = name;
        self
    }

    pub fn name(&self) -> &String {
        &self.name
    }

    pub fn set_image(&mut self, image: String) {
        self.image = image;
    }

    pub fn with_image(
        mut self,
        image: String,
    ) -> ContainerCodePackageProperties {
        self.image = image;
        self
    }

    pub fn image(&self) -> &String {
        &self.image
    }

    pub fn set_image_registry_credential(
        &mut self,
        image_registry_credential: ::models::ImageRegistryCredential,
    ) {
        self.image_registry_credential = Some(image_registry_credential);
    }

    pub fn with_image_registry_credential(
        mut self,
        image_registry_credential: ::models::ImageRegistryCredential,
    ) -> ContainerCodePackageProperties {
        self.image_registry_credential = Some(image_registry_credential);
        self
    }

    pub fn image_registry_credential(
        &self,
    ) -> Option<&::models::ImageRegistryCredential> {
        self.image_registry_credential.as_ref()
    }

    pub fn reset_image_registry_credential(&mut self) {
        self.image_registry_credential = None;
    }

    pub fn set_entrypoint(&mut self, entrypoint: String) {
        self.entrypoint = Some(entrypoint);
    }

    pub fn with_entrypoint(
        mut self,
        entrypoint: String,
    ) -> ContainerCodePackageProperties {
        self.entrypoint = Some(entrypoint);
        self
    }

    pub fn entrypoint(&self) -> Option<&String> {
        self.entrypoint.as_ref()
    }

    pub fn reset_entrypoint(&mut self) {
        self.entrypoint = None;
    }

    pub fn set_commands(&mut self, commands: Vec<String>) {
        self.commands = Some(commands);
    }

    pub fn with_commands(
        mut self,
        commands: Vec<String>,
    ) -> ContainerCodePackageProperties {
        self.commands = Some(commands);
        self
    }

    pub fn commands(&self) -> Option<&Vec<String>> {
        self.commands.as_ref()
    }

    pub fn reset_commands(&mut self) {
        self.commands = None;
    }

    pub fn set_environment_variables(
        &mut self,
        environment_variables: Vec<::models::EnvironmentVariable>,
    ) {
        self.environment_variables = Some(environment_variables);
    }

    pub fn with_environment_variables(
        mut self,
        environment_variables: Vec<::models::EnvironmentVariable>,
    ) -> ContainerCodePackageProperties {
        self.environment_variables = Some(environment_variables);
        self
    }

    pub fn environment_variables(
        &self,
    ) -> Option<&Vec<::models::EnvironmentVariable>> {
        self.environment_variables.as_ref()
    }

    pub fn reset_environment_variables(&mut self) {
        self.environment_variables = None;
    }

    pub fn set_settings(&mut self, settings: Vec<::models::Setting>) {
        self.settings = Some(settings);
    }

    pub fn with_settings(
        mut self,
        settings: Vec<::models::Setting>,
    ) -> ContainerCodePackageProperties {
        self.settings = Some(settings);
        self
    }

    pub fn settings(&self) -> Option<&Vec<::models::Setting>> {
        self.settings.as_ref()
    }

    pub fn reset_settings(&mut self) {
        self.settings = None;
    }

    pub fn set_labels(&mut self, labels: Vec<::models::ContainerLabel>) {
        self.labels = Some(labels);
    }

    pub fn with_labels(
        mut self,
        labels: Vec<::models::ContainerLabel>,
    ) -> ContainerCodePackageProperties {
        self.labels = Some(labels);
        self
    }

    pub fn labels(&self) -> Option<&Vec<::models::ContainerLabel>> {
        self.labels.as_ref()
    }

    pub fn reset_labels(&mut self) {
        self.labels = None;
    }

    pub fn set_endpoints(
        &mut self,
        endpoints: Vec<::models::EndpointProperties>,
    ) {
        self.endpoints = Some(endpoints);
    }

    pub fn with_endpoints(
        mut self,
        endpoints: Vec<::models::EndpointProperties>,
    ) -> ContainerCodePackageProperties {
        self.endpoints = Some(endpoints);
        self
    }

    pub fn endpoints(&self) -> Option<&Vec<::models::EndpointProperties>> {
        self.endpoints.as_ref()
    }

    pub fn reset_endpoints(&mut self) {
        self.endpoints = None;
    }

    pub fn set_resources(&mut self, resources: ::models::ResourceRequirements) {
        self.resources = resources;
    }

    pub fn with_resources(
        mut self,
        resources: ::models::ResourceRequirements,
    ) -> ContainerCodePackageProperties {
        self.resources = resources;
        self
    }

    pub fn resources(&self) -> &::models::ResourceRequirements {
        &self.resources
    }

    pub fn set_volume_refs(
        &mut self,
        volume_refs: Vec<::models::ContainerVolume>,
    ) {
        self.volume_refs = Some(volume_refs);
    }

    pub fn with_volume_refs(
        mut self,
        volume_refs: Vec<::models::ContainerVolume>,
    ) -> ContainerCodePackageProperties {
        self.volume_refs = Some(volume_refs);
        self
    }

    pub fn volume_refs(&self) -> Option<&Vec<::models::ContainerVolume>> {
        self.volume_refs.as_ref()
    }

    pub fn reset_volume_refs(&mut self) {
        self.volume_refs = None;
    }

    pub fn set_instance_view(
        &mut self,
        instance_view: ::models::ContainerInstanceView,
    ) {
        self.instance_view = Some(instance_view);
    }

    pub fn with_instance_view(
        mut self,
        instance_view: ::models::ContainerInstanceView,
    ) -> ContainerCodePackageProperties {
        self.instance_view = Some(instance_view);
        self
    }

    pub fn instance_view(&self) -> Option<&::models::ContainerInstanceView> {
        self.instance_view.as_ref()
    }

    pub fn reset_instance_view(&mut self) {
        self.instance_view = None;
    }

    pub fn set_diagnostics(&mut self, diagnostics: ::models::DiagnosticsRef) {
        self.diagnostics = Some(diagnostics);
    }

    pub fn with_diagnostics(
        mut self,
        diagnostics: ::models::DiagnosticsRef,
    ) -> ContainerCodePackageProperties {
        self.diagnostics = Some(diagnostics);
        self
    }

    pub fn diagnostics(&self) -> Option<&::models::DiagnosticsRef> {
        self.diagnostics.as_ref()
    }

    pub fn reset_diagnostics(&mut self) {
        self.diagnostics = None;
    }
}

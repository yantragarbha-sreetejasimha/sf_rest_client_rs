/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.3.0.9
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// UploadSession : Information about a image store upload session

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UploadSession {
    /// When querying upload session by upload session ID, the result contains only one upload session. When querying upload session by image store relative path, the result might contain multiple upload sessions.
    #[serde(rename = "UploadSessions")]
    upload_sessions: Option<Vec<::models::UploadSessionInfo>>,
}

impl Default for UploadSession {
    fn default() -> Self {
        Self::new()
    }
}

impl UploadSession {
    /// Information about a image store upload session
    pub fn new() -> UploadSession {
        UploadSession {
            upload_sessions: None,
        }
    }

    pub fn set_upload_sessions(
        &mut self,
        upload_sessions: Vec<::models::UploadSessionInfo>,
    ) {
        self.upload_sessions = Some(upload_sessions);
    }

    pub fn with_upload_sessions(
        mut self,
        upload_sessions: Vec<::models::UploadSessionInfo>,
    ) -> UploadSession {
        self.upload_sessions = Some(upload_sessions);
        self
    }

    pub fn upload_sessions(&self) -> Option<&Vec<::models::UploadSessionInfo>> {
        self.upload_sessions.as_ref()
    }

    pub fn reset_upload_sessions(&mut self) {
        self.upload_sessions = None;
    }
}

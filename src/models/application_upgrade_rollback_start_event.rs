/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.3.0.9
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ApplicationUpgradeRollbackStartEvent : Application Upgrade Rollback Start event.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ApplicationUpgradeRollbackStartEvent {
    /// The kind of FabricEvent.
    #[serde(rename = "Kind")]
    kind: ::models::FabricEventKind,
    /// The identifier for the FabricEvent instance.
    #[serde(rename = "EventInstanceId")]
    event_instance_id: String,
    /// The time event was logged.
    #[serde(rename = "TimeStamp")]
    time_stamp: String,
    /// Shows there is existing related events available.
    #[serde(rename = "HasCorrelatedEvents")]
    has_correlated_events: Option<bool>,
    /// The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.
    #[serde(rename = "ApplicationId")]
    application_id: ::models::ApplicationId,
    /// Application type name.
    #[serde(rename = "ApplicationTypeName")]
    application_type_name: String,
    /// Current Application type version.
    #[serde(rename = "CurrentApplicationTypeVersion")]
    current_application_type_version: String,
    /// Target Application type version.
    #[serde(rename = "ApplicationTypeVersion")]
    application_type_version: String,
    /// Describes reason of failure.
    #[serde(rename = "FailureReason")]
    failure_reason: String,
    /// Overall upgrade time in milli-seconds.
    #[serde(rename = "OverallUpgradeElapsedTimeInMs")]
    overall_upgrade_elapsed_time_in_ms: f64,
}

impl ApplicationUpgradeRollbackStartEvent {
    /// Application Upgrade Rollback Start event.
    pub fn new(
        kind: ::models::FabricEventKind,
        event_instance_id: String,
        time_stamp: String,
        application_id: ::models::ApplicationId,
        application_type_name: String,
        current_application_type_version: String,
        application_type_version: String,
        failure_reason: String,
        overall_upgrade_elapsed_time_in_ms: f64,
    ) -> ApplicationUpgradeRollbackStartEvent {
        ApplicationUpgradeRollbackStartEvent {
            kind,
            event_instance_id,
            time_stamp,
            has_correlated_events: None,
            application_id,
            application_type_name,
            current_application_type_version,
            application_type_version,
            failure_reason,
            overall_upgrade_elapsed_time_in_ms,
        }
    }

    pub fn set_kind(&mut self, kind: ::models::FabricEventKind) {
        self.kind = kind;
    }

    pub fn with_kind(
        mut self,
        kind: ::models::FabricEventKind,
    ) -> ApplicationUpgradeRollbackStartEvent {
        self.kind = kind;
        self
    }

    pub fn kind(&self) -> &::models::FabricEventKind {
        &self.kind
    }

    pub fn set_event_instance_id(&mut self, event_instance_id: String) {
        self.event_instance_id = event_instance_id;
    }

    pub fn with_event_instance_id(
        mut self,
        event_instance_id: String,
    ) -> ApplicationUpgradeRollbackStartEvent {
        self.event_instance_id = event_instance_id;
        self
    }

    pub fn event_instance_id(&self) -> &String {
        &self.event_instance_id
    }

    pub fn set_time_stamp(&mut self, time_stamp: String) {
        self.time_stamp = time_stamp;
    }

    pub fn with_time_stamp(
        mut self,
        time_stamp: String,
    ) -> ApplicationUpgradeRollbackStartEvent {
        self.time_stamp = time_stamp;
        self
    }

    pub fn time_stamp(&self) -> &String {
        &self.time_stamp
    }

    pub fn set_has_correlated_events(&mut self, has_correlated_events: bool) {
        self.has_correlated_events = Some(has_correlated_events);
    }

    pub fn with_has_correlated_events(
        mut self,
        has_correlated_events: bool,
    ) -> ApplicationUpgradeRollbackStartEvent {
        self.has_correlated_events = Some(has_correlated_events);
        self
    }

    pub fn has_correlated_events(&self) -> Option<&bool> {
        self.has_correlated_events.as_ref()
    }

    pub fn reset_has_correlated_events(&mut self) {
        self.has_correlated_events = None;
    }

    pub fn set_application_id(
        &mut self,
        application_id: ::models::ApplicationId,
    ) {
        self.application_id = application_id;
    }

    pub fn with_application_id(
        mut self,
        application_id: ::models::ApplicationId,
    ) -> ApplicationUpgradeRollbackStartEvent {
        self.application_id = application_id;
        self
    }

    pub fn application_id(&self) -> &::models::ApplicationId {
        &self.application_id
    }

    pub fn set_application_type_name(&mut self, application_type_name: String) {
        self.application_type_name = application_type_name;
    }

    pub fn with_application_type_name(
        mut self,
        application_type_name: String,
    ) -> ApplicationUpgradeRollbackStartEvent {
        self.application_type_name = application_type_name;
        self
    }

    pub fn application_type_name(&self) -> &String {
        &self.application_type_name
    }

    pub fn set_current_application_type_version(
        &mut self,
        current_application_type_version: String,
    ) {
        self.current_application_type_version =
            current_application_type_version;
    }

    pub fn with_current_application_type_version(
        mut self,
        current_application_type_version: String,
    ) -> ApplicationUpgradeRollbackStartEvent {
        self.current_application_type_version =
            current_application_type_version;
        self
    }

    pub fn current_application_type_version(&self) -> &String {
        &self.current_application_type_version
    }

    pub fn set_application_type_version(
        &mut self,
        application_type_version: String,
    ) {
        self.application_type_version = application_type_version;
    }

    pub fn with_application_type_version(
        mut self,
        application_type_version: String,
    ) -> ApplicationUpgradeRollbackStartEvent {
        self.application_type_version = application_type_version;
        self
    }

    pub fn application_type_version(&self) -> &String {
        &self.application_type_version
    }

    pub fn set_failure_reason(&mut self, failure_reason: String) {
        self.failure_reason = failure_reason;
    }

    pub fn with_failure_reason(
        mut self,
        failure_reason: String,
    ) -> ApplicationUpgradeRollbackStartEvent {
        self.failure_reason = failure_reason;
        self
    }

    pub fn failure_reason(&self) -> &String {
        &self.failure_reason
    }

    pub fn set_overall_upgrade_elapsed_time_in_ms(
        &mut self,
        overall_upgrade_elapsed_time_in_ms: f64,
    ) {
        self.overall_upgrade_elapsed_time_in_ms =
            overall_upgrade_elapsed_time_in_ms;
    }

    pub fn with_overall_upgrade_elapsed_time_in_ms(
        mut self,
        overall_upgrade_elapsed_time_in_ms: f64,
    ) -> ApplicationUpgradeRollbackStartEvent {
        self.overall_upgrade_elapsed_time_in_ms =
            overall_upgrade_elapsed_time_in_ms;
        self
    }

    pub fn overall_upgrade_elapsed_time_in_ms(&self) -> &f64 {
        &self.overall_upgrade_elapsed_time_in_ms
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.3.0.9
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// HealthInformation : Represents common health report information. It is included in all health reports sent to health store and in all health events returned by health queries.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct HealthInformation {
    /// The source name that identifies the client/watchdog/system component that generated the health information.
    #[serde(rename = "SourceId")]
    source_id: String,
    /// The property of the health information. An entity can have health reports for different properties. The property is a string and not a fixed enumeration to allow the reporter flexibility to categorize the state condition that triggers the report. For example, a reporter with SourceId \"LocalWatchdog\" can monitor the state of the available disk on a node, so it can report \"AvailableDisk\" property on that node. The same reporter can monitor the node connectivity, so it can report a property \"Connectivity\" on the same node. In the health store, these reports are treated as separate health events for the specified node.  Together with the SourceId, the property uniquely identifies the health information.
    #[serde(rename = "Property")]
    property: String,
    /// The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
    #[serde(rename = "HealthState")]
    health_state: ::models::HealthState,
    /// The duration for which this health report is valid. This field uses ISO8601 format for specifying the duration. When clients report periodically, they should send reports with higher frequency than time to live. If clients report on transition, they can set the time to live to infinite. When time to live expires, the health event that contains the health information is either removed from health store, if RemoveWhenExpired is true, or evaluated at error, if RemoveWhenExpired false.  If not specified, time to live defaults to infinite value.
    #[serde(rename = "TimeToLiveInMilliSeconds")]
    time_to_live_in_milli_seconds: Option<String>,
    /// The description of the health information. It represents free text used to add human readable information about the report. The maximum string length for the description is 4096 characters. If the provided string is longer, it will be automatically truncated. When truncated, the last characters of the description contain a marker \"[Truncated]\", and total string size is 4096 characters. The presence of the marker indicates to users that truncation occurred. Note that when truncated, the description has less than 4096 characters from the original string.
    #[serde(rename = "Description")]
    description: Option<String>,
    /// The sequence number for this health report as a numeric string. The report sequence number is used by the health store to detect stale reports. If not specified, a sequence number is auto-generated by the health client when a report is added.
    #[serde(rename = "SequenceNumber")]
    sequence_number: Option<String>,
    /// Value that indicates whether the report is removed from health store when it expires. If set to true, the report is removed from the health store after it expires. If set to false, the report is treated as an error when expired. The value of this property is false by default. When clients report periodically, they should set RemoveWhenExpired false (default). This way, is the reporter has issues (eg. deadlock) and can't report, the entity is evaluated at error when the health report expires. This flags the entity as being in Error health state.
    #[serde(rename = "RemoveWhenExpired")]
    remove_when_expired: Option<bool>,
}

impl HealthInformation {
    /// Represents common health report information. It is included in all health reports sent to health store and in all health events returned by health queries.
    pub fn new(
        source_id: String,
        property: String,
        health_state: ::models::HealthState,
    ) -> HealthInformation {
        HealthInformation {
            source_id,
            property,
            health_state,
            time_to_live_in_milli_seconds: None,
            description: None,
            sequence_number: None,
            remove_when_expired: None,
        }
    }

    pub fn set_source_id(&mut self, source_id: String) {
        self.source_id = source_id;
    }

    pub fn with_source_id(mut self, source_id: String) -> HealthInformation {
        self.source_id = source_id;
        self
    }

    pub fn source_id(&self) -> &String {
        &self.source_id
    }

    pub fn set_property(&mut self, property: String) {
        self.property = property;
    }

    pub fn with_property(mut self, property: String) -> HealthInformation {
        self.property = property;
        self
    }

    pub fn property(&self) -> &String {
        &self.property
    }

    pub fn set_health_state(&mut self, health_state: ::models::HealthState) {
        self.health_state = health_state;
    }

    pub fn with_health_state(
        mut self,
        health_state: ::models::HealthState,
    ) -> HealthInformation {
        self.health_state = health_state;
        self
    }

    pub fn health_state(&self) -> &::models::HealthState {
        &self.health_state
    }

    pub fn set_time_to_live_in_milli_seconds(
        &mut self,
        time_to_live_in_milli_seconds: String,
    ) {
        self.time_to_live_in_milli_seconds =
            Some(time_to_live_in_milli_seconds);
    }

    pub fn with_time_to_live_in_milli_seconds(
        mut self,
        time_to_live_in_milli_seconds: String,
    ) -> HealthInformation {
        self.time_to_live_in_milli_seconds =
            Some(time_to_live_in_milli_seconds);
        self
    }

    pub fn time_to_live_in_milli_seconds(&self) -> Option<&String> {
        self.time_to_live_in_milli_seconds.as_ref()
    }

    pub fn reset_time_to_live_in_milli_seconds(&mut self) {
        self.time_to_live_in_milli_seconds = None;
    }

    pub fn set_description(&mut self, description: String) {
        self.description = Some(description);
    }

    pub fn with_description(
        mut self,
        description: String,
    ) -> HealthInformation {
        self.description = Some(description);
        self
    }

    pub fn description(&self) -> Option<&String> {
        self.description.as_ref()
    }

    pub fn reset_description(&mut self) {
        self.description = None;
    }

    pub fn set_sequence_number(&mut self, sequence_number: String) {
        self.sequence_number = Some(sequence_number);
    }

    pub fn with_sequence_number(
        mut self,
        sequence_number: String,
    ) -> HealthInformation {
        self.sequence_number = Some(sequence_number);
        self
    }

    pub fn sequence_number(&self) -> Option<&String> {
        self.sequence_number.as_ref()
    }

    pub fn reset_sequence_number(&mut self) {
        self.sequence_number = None;
    }

    pub fn set_remove_when_expired(&mut self, remove_when_expired: bool) {
        self.remove_when_expired = Some(remove_when_expired);
    }

    pub fn with_remove_when_expired(
        mut self,
        remove_when_expired: bool,
    ) -> HealthInformation {
        self.remove_when_expired = Some(remove_when_expired);
        self
    }

    pub fn remove_when_expired(&self) -> Option<&bool> {
        self.remove_when_expired.as_ref()
    }

    pub fn reset_remove_when_expired(&mut self) {
        self.remove_when_expired = None;
    }
}

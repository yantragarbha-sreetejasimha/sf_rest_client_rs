/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 8.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// UpdateClusterUpgradeDescription : Parameters for updating a cluster upgrade.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UpdateClusterUpgradeDescription {
    /// The type of upgrade out of the following possible values.
    #[serde(rename = "UpgradeKind")]
    upgrade_kind: Option<::models::UpgradeType>,
    /// Describes the parameters for updating a rolling upgrade of application or cluster.
    #[serde(rename = "UpdateDescription")]
    update_description: Option<::models::RollingUpgradeUpdateDescription>,
    /// Defines a health policy used to evaluate the health of the cluster or of a cluster node.
    #[serde(rename = "ClusterHealthPolicy")]
    cluster_health_policy: Option<::models::ClusterHealthPolicy>,
    /// When true, enables delta health evaluation rather than absolute health evaluation after completion of each upgrade domain.
    #[serde(rename = "EnableDeltaHealthEvaluation")]
    enable_delta_health_evaluation: Option<::models::DeltaHealthEvaluationBool>,
    /// Defines a health policy used to evaluate the health of the cluster during a cluster upgrade.
    #[serde(rename = "ClusterUpgradeHealthPolicy")]
    cluster_upgrade_health_policy:
        Option<::models::ClusterUpgradeHealthPolicyObject>,
    /// Defines the application health policy map used to evaluate the health of an application or one of its children entities.
    #[serde(rename = "ApplicationHealthPolicyMap")]
    application_health_policy_map: Option<::models::ApplicationHealthPolicies>,
}

impl Default for UpdateClusterUpgradeDescription {
    fn default() -> Self {
        Self::new()
    }
}

impl UpdateClusterUpgradeDescription {
    /// Parameters for updating a cluster upgrade.
    pub fn new() -> UpdateClusterUpgradeDescription {
        UpdateClusterUpgradeDescription {
            upgrade_kind: None,
            update_description: None,
            cluster_health_policy: None,
            enable_delta_health_evaluation: None,
            cluster_upgrade_health_policy: None,
            application_health_policy_map: None,
        }
    }

    pub fn set_upgrade_kind(&mut self, upgrade_kind: ::models::UpgradeType) {
        self.upgrade_kind = Some(upgrade_kind);
    }

    pub fn with_upgrade_kind(
        mut self,
        upgrade_kind: ::models::UpgradeType,
    ) -> UpdateClusterUpgradeDescription {
        self.upgrade_kind = Some(upgrade_kind);
        self
    }

    pub fn upgrade_kind(&self) -> Option<&::models::UpgradeType> {
        self.upgrade_kind.as_ref()
    }

    pub fn reset_upgrade_kind(&mut self) {
        self.upgrade_kind = None;
    }

    pub fn set_update_description(
        &mut self,
        update_description: ::models::RollingUpgradeUpdateDescription,
    ) {
        self.update_description = Some(update_description);
    }

    pub fn with_update_description(
        mut self,
        update_description: ::models::RollingUpgradeUpdateDescription,
    ) -> UpdateClusterUpgradeDescription {
        self.update_description = Some(update_description);
        self
    }

    pub fn update_description(
        &self,
    ) -> Option<&::models::RollingUpgradeUpdateDescription> {
        self.update_description.as_ref()
    }

    pub fn reset_update_description(&mut self) {
        self.update_description = None;
    }

    pub fn set_cluster_health_policy(
        &mut self,
        cluster_health_policy: ::models::ClusterHealthPolicy,
    ) {
        self.cluster_health_policy = Some(cluster_health_policy);
    }

    pub fn with_cluster_health_policy(
        mut self,
        cluster_health_policy: ::models::ClusterHealthPolicy,
    ) -> UpdateClusterUpgradeDescription {
        self.cluster_health_policy = Some(cluster_health_policy);
        self
    }

    pub fn cluster_health_policy(
        &self,
    ) -> Option<&::models::ClusterHealthPolicy> {
        self.cluster_health_policy.as_ref()
    }

    pub fn reset_cluster_health_policy(&mut self) {
        self.cluster_health_policy = None;
    }

    pub fn set_enable_delta_health_evaluation(
        &mut self,
        enable_delta_health_evaluation: ::models::DeltaHealthEvaluationBool,
    ) {
        self.enable_delta_health_evaluation =
            Some(enable_delta_health_evaluation);
    }

    pub fn with_enable_delta_health_evaluation(
        mut self,
        enable_delta_health_evaluation: ::models::DeltaHealthEvaluationBool,
    ) -> UpdateClusterUpgradeDescription {
        self.enable_delta_health_evaluation =
            Some(enable_delta_health_evaluation);
        self
    }

    pub fn enable_delta_health_evaluation(
        &self,
    ) -> Option<&::models::DeltaHealthEvaluationBool> {
        self.enable_delta_health_evaluation.as_ref()
    }

    pub fn reset_enable_delta_health_evaluation(&mut self) {
        self.enable_delta_health_evaluation = None;
    }

    pub fn set_cluster_upgrade_health_policy(
        &mut self,
        cluster_upgrade_health_policy: ::models::ClusterUpgradeHealthPolicyObject,
    ) {
        self.cluster_upgrade_health_policy =
            Some(cluster_upgrade_health_policy);
    }

    pub fn with_cluster_upgrade_health_policy(
        mut self,
        cluster_upgrade_health_policy: ::models::ClusterUpgradeHealthPolicyObject,
    ) -> UpdateClusterUpgradeDescription {
        self.cluster_upgrade_health_policy =
            Some(cluster_upgrade_health_policy);
        self
    }

    pub fn cluster_upgrade_health_policy(
        &self,
    ) -> Option<&::models::ClusterUpgradeHealthPolicyObject> {
        self.cluster_upgrade_health_policy.as_ref()
    }

    pub fn reset_cluster_upgrade_health_policy(&mut self) {
        self.cluster_upgrade_health_policy = None;
    }

    pub fn set_application_health_policy_map(
        &mut self,
        application_health_policy_map: ::models::ApplicationHealthPolicies,
    ) {
        self.application_health_policy_map =
            Some(application_health_policy_map);
    }

    pub fn with_application_health_policy_map(
        mut self,
        application_health_policy_map: ::models::ApplicationHealthPolicies,
    ) -> UpdateClusterUpgradeDescription {
        self.application_health_policy_map =
            Some(application_health_policy_map);
        self
    }

    pub fn application_health_policy_map(
        &self,
    ) -> Option<&::models::ApplicationHealthPolicies> {
        self.application_health_policy_map.as_ref()
    }

    pub fn reset_application_health_policy_map(&mut self) {
        self.application_health_policy_map = None;
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.1.0.45
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ChaosScheduleDescription : Defines the Chaos Schedule used by Chaos and the version of the Chaos Schedule. The version value wraps back to 0 after surpassing 2,147,483,647.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ChaosScheduleDescription {
    /// The version number of the Schedule.
    #[serde(rename = "Version")]
    version: Option<i32>,
    /// Defines the schedule used by Chaos.
    #[serde(rename = "Schedule")]
    schedule: Option<::models::ChaosSchedule>,
}

impl Default for ChaosScheduleDescription {
    fn default() -> Self {
        Self::new()
    }
}

impl ChaosScheduleDescription {
    /// Defines the Chaos Schedule used by Chaos and the version of the Chaos Schedule. The version value wraps back to 0 after surpassing 2,147,483,647.
    pub fn new() -> ChaosScheduleDescription {
        ChaosScheduleDescription {
            version: None,
            schedule: None,
        }
    }

    pub fn set_version(&mut self, version: i32) {
        self.version = Some(version);
    }

    pub fn with_version(mut self, version: i32) -> ChaosScheduleDescription {
        self.version = Some(version);
        self
    }

    pub fn version(&self) -> Option<&i32> {
        self.version.as_ref()
    }

    pub fn reset_version(&mut self) {
        self.version = None;
    }

    pub fn set_schedule(&mut self, schedule: ::models::ChaosSchedule) {
        self.schedule = Some(schedule);
    }

    pub fn with_schedule(
        mut self,
        schedule: ::models::ChaosSchedule,
    ) -> ChaosScheduleDescription {
        self.schedule = Some(schedule);
        self
    }

    pub fn schedule(&self) -> Option<&::models::ChaosSchedule> {
        self.schedule.as_ref()
    }

    pub fn reset_schedule(&mut self) {
        self.schedule = None;
    }
}

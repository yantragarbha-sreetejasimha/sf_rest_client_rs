/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 8.2
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DiagnosticsSinkProperties : Properties of a DiagnosticsSink.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DiagnosticsSinkProperties {
    /// The kind of DiagnosticsSink.
    #[serde(rename = "kind")]
    kind: ::models::DiagnosticsSinkKind,
    /// Name of the sink. This value is referenced by DiagnosticsReferenceDescription
    #[serde(rename = "name")]
    name: Option<String>,
    /// A description of the sink.
    #[serde(rename = "description")]
    description: Option<String>,
}

impl DiagnosticsSinkProperties {
    /// Properties of a DiagnosticsSink.
    pub fn new(
        kind: ::models::DiagnosticsSinkKind,
    ) -> DiagnosticsSinkProperties {
        DiagnosticsSinkProperties {
            kind,
            name: None,
            description: None,
        }
    }

    pub fn set_kind(&mut self, kind: ::models::DiagnosticsSinkKind) {
        self.kind = kind;
    }

    pub fn with_kind(
        mut self,
        kind: ::models::DiagnosticsSinkKind,
    ) -> DiagnosticsSinkProperties {
        self.kind = kind;
        self
    }

    pub fn kind(&self) -> &::models::DiagnosticsSinkKind {
        &self.kind
    }

    pub fn set_name(&mut self, name: String) {
        self.name = Some(name);
    }

    pub fn with_name(mut self, name: String) -> DiagnosticsSinkProperties {
        self.name = Some(name);
        self
    }

    pub fn name(&self) -> Option<&String> {
        self.name.as_ref()
    }

    pub fn reset_name(&mut self) {
        self.name = None;
    }

    pub fn set_description(&mut self, description: String) {
        self.description = Some(description);
    }

    pub fn with_description(
        mut self,
        description: String,
    ) -> DiagnosticsSinkProperties {
        self.description = Some(description);
        self
    }

    pub fn description(&self) -> Option<&String> {
        self.description.as_ref()
    }

    pub fn reset_description(&mut self) {
        self.description = None;
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.1.0.45
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// NodeRepairImpactDescription : Describes the expected impact of a repair on a set of nodes.  This type supports the Service Fabric platform; it is not meant to be used directly from your code.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeRepairImpactDescription {
    /// The kind of repair impact represented by the current object.
    #[serde(rename = "Kind")]
    kind: ::models::RepairImpactKind,
    /// The list of nodes impacted by a repair action and their respective expected impact.
    #[serde(rename = "NodeImpactList")]
    node_impact_list: Option<Vec<::models::NodeImpact>>,
}

impl NodeRepairImpactDescription {
    /// Describes the expected impact of a repair on a set of nodes.  This type supports the Service Fabric platform; it is not meant to be used directly from your code.
    pub fn new(
        kind: ::models::RepairImpactKind,
    ) -> NodeRepairImpactDescription {
        NodeRepairImpactDescription {
            kind,
            node_impact_list: None,
        }
    }

    pub fn set_kind(&mut self, kind: ::models::RepairImpactKind) {
        self.kind = kind;
    }

    pub fn with_kind(
        mut self,
        kind: ::models::RepairImpactKind,
    ) -> NodeRepairImpactDescription {
        self.kind = kind;
        self
    }

    pub fn kind(&self) -> &::models::RepairImpactKind {
        &self.kind
    }

    pub fn set_node_impact_list(
        &mut self,
        node_impact_list: Vec<::models::NodeImpact>,
    ) {
        self.node_impact_list = Some(node_impact_list);
    }

    pub fn with_node_impact_list(
        mut self,
        node_impact_list: Vec<::models::NodeImpact>,
    ) -> NodeRepairImpactDescription {
        self.node_impact_list = Some(node_impact_list);
        self
    }

    pub fn node_impact_list(&self) -> Option<&Vec<::models::NodeImpact>> {
        self.node_impact_list.as_ref()
    }

    pub fn reset_node_impact_list(&mut self) {
        self.node_impact_list = None;
    }
}

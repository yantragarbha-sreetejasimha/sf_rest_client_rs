/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.4.0.36
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// RepairTaskUpdateHealthPolicyDescription : Describes a request to update the health policy of a repair task.  This type supports the Service Fabric platform; it is not meant to be used directly from your code.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RepairTaskUpdateHealthPolicyDescription {
    /// The ID of the repair task to be updated.
    #[serde(rename = "TaskId")]
    task_id: String,
    /// The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.
    #[serde(rename = "Version")]
    version: Option<String>,
    /// A boolean indicating if health check is to be performed in the Preparing stage of the repair task. If not specified the existing value should not be altered. Otherwise, specify the desired new value.
    #[serde(rename = "PerformPreparingHealthCheck")]
    perform_preparing_health_check: Option<bool>,
    /// A boolean indicating if health check is to be performed in the Restoring stage of the repair task. If not specified the existing value should not be altered. Otherwise, specify the desired new value.
    #[serde(rename = "PerformRestoringHealthCheck")]
    perform_restoring_health_check: Option<bool>,
}

impl RepairTaskUpdateHealthPolicyDescription {
    /// Describes a request to update the health policy of a repair task.  This type supports the Service Fabric platform; it is not meant to be used directly from your code.
    pub fn new(task_id: String) -> RepairTaskUpdateHealthPolicyDescription {
        RepairTaskUpdateHealthPolicyDescription {
            task_id,
            version: None,
            perform_preparing_health_check: None,
            perform_restoring_health_check: None,
        }
    }

    pub fn set_task_id(&mut self, task_id: String) {
        self.task_id = task_id;
    }

    pub fn with_task_id(
        mut self,
        task_id: String,
    ) -> RepairTaskUpdateHealthPolicyDescription {
        self.task_id = task_id;
        self
    }

    pub fn task_id(&self) -> &String {
        &self.task_id
    }

    pub fn set_version(&mut self, version: String) {
        self.version = Some(version);
    }

    pub fn with_version(
        mut self,
        version: String,
    ) -> RepairTaskUpdateHealthPolicyDescription {
        self.version = Some(version);
        self
    }

    pub fn version(&self) -> Option<&String> {
        self.version.as_ref()
    }

    pub fn reset_version(&mut self) {
        self.version = None;
    }

    pub fn set_perform_preparing_health_check(
        &mut self,
        perform_preparing_health_check: bool,
    ) {
        self.perform_preparing_health_check =
            Some(perform_preparing_health_check);
    }

    pub fn with_perform_preparing_health_check(
        mut self,
        perform_preparing_health_check: bool,
    ) -> RepairTaskUpdateHealthPolicyDescription {
        self.perform_preparing_health_check =
            Some(perform_preparing_health_check);
        self
    }

    pub fn perform_preparing_health_check(&self) -> Option<&bool> {
        self.perform_preparing_health_check.as_ref()
    }

    pub fn reset_perform_preparing_health_check(&mut self) {
        self.perform_preparing_health_check = None;
    }

    pub fn set_perform_restoring_health_check(
        &mut self,
        perform_restoring_health_check: bool,
    ) {
        self.perform_restoring_health_check =
            Some(perform_restoring_health_check);
    }

    pub fn with_perform_restoring_health_check(
        mut self,
        perform_restoring_health_check: bool,
    ) -> RepairTaskUpdateHealthPolicyDescription {
        self.perform_restoring_health_check =
            Some(perform_restoring_health_check);
        self
    }

    pub fn perform_restoring_health_check(&self) -> Option<&bool> {
        self.perform_restoring_health_check.as_ref()
    }

    pub fn reset_perform_restoring_health_check(&mut self) {
        self.perform_restoring_health_check = None;
    }
}

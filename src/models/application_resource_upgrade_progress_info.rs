/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.1.0.45
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ApplicationResourceUpgradeProgressInfo : This type describes an application resource upgrade.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ApplicationResourceUpgradeProgressInfo {
    /// Name of the Application resource.
    #[serde(rename = "Name")]
    name: Option<String>,
    /// The target application version for the application upgrade.
    #[serde(rename = "TargetApplicationTypeVersion")]
    target_application_type_version: Option<String>,
    /// The estimated UTC datetime when the upgrade started.
    #[serde(rename = "StartTimestampUtc")]
    start_timestamp_utc: Option<String>,
    /// The state of the application resource upgrade.
    #[serde(rename = "UpgradeState")]
    upgrade_state: Option<::models::ApplicationResourceUpgradeState>,
    /// The estimated percent of replicas are completed in the upgrade.
    #[serde(rename = "PercentCompleted")]
    percent_completed: Option<String>,
    /// List of service upgrade progresses.
    #[serde(rename = "ServiceUpgradeProgress")]
    service_upgrade_progress: Option<::models::ServiceUpgradeProgressList>,
    /// The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored.
    #[serde(rename = "RollingUpgradeMode")]
    rolling_upgrade_mode: Option<::models::RollingUpgradeMode>,
    /// The estimated amount of time that the overall upgrade elapsed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
    #[serde(rename = "UpgradeDuration")]
    upgrade_duration: Option<String>,
    /// Additional detailed information about the status of the pending upgrade.
    #[serde(rename = "ApplicationUpgradeStatusDetails")]
    application_upgrade_status_details: Option<String>,
    /// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
    #[serde(rename = "UpgradeReplicaSetCheckTimeoutInSeconds")]
    upgrade_replica_set_check_timeout_in_seconds: Option<i64>,
    /// The estimated UTC datetime when the upgrade failed and FailureAction was executed.
    #[serde(rename = "FailureTimestampUtc")]
    failure_timestamp_utc: Option<String>,
}

impl Default for ApplicationResourceUpgradeProgressInfo {
    fn default() -> Self {
        Self::new()
    }
}

impl ApplicationResourceUpgradeProgressInfo {
    /// This type describes an application resource upgrade.
    pub fn new() -> ApplicationResourceUpgradeProgressInfo {
        ApplicationResourceUpgradeProgressInfo {
            name: None,
            target_application_type_version: None,
            start_timestamp_utc: None,
            upgrade_state: None,
            percent_completed: None,
            service_upgrade_progress: None,
            rolling_upgrade_mode: None,
            upgrade_duration: None,
            application_upgrade_status_details: None,
            upgrade_replica_set_check_timeout_in_seconds: None,
            failure_timestamp_utc: None,
        }
    }

    pub fn set_name(&mut self, name: String) {
        self.name = Some(name);
    }

    pub fn with_name(
        mut self,
        name: String,
    ) -> ApplicationResourceUpgradeProgressInfo {
        self.name = Some(name);
        self
    }

    pub fn name(&self) -> Option<&String> {
        self.name.as_ref()
    }

    pub fn reset_name(&mut self) {
        self.name = None;
    }

    pub fn set_target_application_type_version(
        &mut self,
        target_application_type_version: String,
    ) {
        self.target_application_type_version =
            Some(target_application_type_version);
    }

    pub fn with_target_application_type_version(
        mut self,
        target_application_type_version: String,
    ) -> ApplicationResourceUpgradeProgressInfo {
        self.target_application_type_version =
            Some(target_application_type_version);
        self
    }

    pub fn target_application_type_version(&self) -> Option<&String> {
        self.target_application_type_version.as_ref()
    }

    pub fn reset_target_application_type_version(&mut self) {
        self.target_application_type_version = None;
    }

    pub fn set_start_timestamp_utc(&mut self, start_timestamp_utc: String) {
        self.start_timestamp_utc = Some(start_timestamp_utc);
    }

    pub fn with_start_timestamp_utc(
        mut self,
        start_timestamp_utc: String,
    ) -> ApplicationResourceUpgradeProgressInfo {
        self.start_timestamp_utc = Some(start_timestamp_utc);
        self
    }

    pub fn start_timestamp_utc(&self) -> Option<&String> {
        self.start_timestamp_utc.as_ref()
    }

    pub fn reset_start_timestamp_utc(&mut self) {
        self.start_timestamp_utc = None;
    }

    pub fn set_upgrade_state(
        &mut self,
        upgrade_state: ::models::ApplicationResourceUpgradeState,
    ) {
        self.upgrade_state = Some(upgrade_state);
    }

    pub fn with_upgrade_state(
        mut self,
        upgrade_state: ::models::ApplicationResourceUpgradeState,
    ) -> ApplicationResourceUpgradeProgressInfo {
        self.upgrade_state = Some(upgrade_state);
        self
    }

    pub fn upgrade_state(
        &self,
    ) -> Option<&::models::ApplicationResourceUpgradeState> {
        self.upgrade_state.as_ref()
    }

    pub fn reset_upgrade_state(&mut self) {
        self.upgrade_state = None;
    }

    pub fn set_percent_completed(&mut self, percent_completed: String) {
        self.percent_completed = Some(percent_completed);
    }

    pub fn with_percent_completed(
        mut self,
        percent_completed: String,
    ) -> ApplicationResourceUpgradeProgressInfo {
        self.percent_completed = Some(percent_completed);
        self
    }

    pub fn percent_completed(&self) -> Option<&String> {
        self.percent_completed.as_ref()
    }

    pub fn reset_percent_completed(&mut self) {
        self.percent_completed = None;
    }

    pub fn set_service_upgrade_progress(
        &mut self,
        service_upgrade_progress: ::models::ServiceUpgradeProgressList,
    ) {
        self.service_upgrade_progress = Some(service_upgrade_progress);
    }

    pub fn with_service_upgrade_progress(
        mut self,
        service_upgrade_progress: ::models::ServiceUpgradeProgressList,
    ) -> ApplicationResourceUpgradeProgressInfo {
        self.service_upgrade_progress = Some(service_upgrade_progress);
        self
    }

    pub fn service_upgrade_progress(
        &self,
    ) -> Option<&::models::ServiceUpgradeProgressList> {
        self.service_upgrade_progress.as_ref()
    }

    pub fn reset_service_upgrade_progress(&mut self) {
        self.service_upgrade_progress = None;
    }

    pub fn set_rolling_upgrade_mode(
        &mut self,
        rolling_upgrade_mode: ::models::RollingUpgradeMode,
    ) {
        self.rolling_upgrade_mode = Some(rolling_upgrade_mode);
    }

    pub fn with_rolling_upgrade_mode(
        mut self,
        rolling_upgrade_mode: ::models::RollingUpgradeMode,
    ) -> ApplicationResourceUpgradeProgressInfo {
        self.rolling_upgrade_mode = Some(rolling_upgrade_mode);
        self
    }

    pub fn rolling_upgrade_mode(
        &self,
    ) -> Option<&::models::RollingUpgradeMode> {
        self.rolling_upgrade_mode.as_ref()
    }

    pub fn reset_rolling_upgrade_mode(&mut self) {
        self.rolling_upgrade_mode = None;
    }

    pub fn set_upgrade_duration(&mut self, upgrade_duration: String) {
        self.upgrade_duration = Some(upgrade_duration);
    }

    pub fn with_upgrade_duration(
        mut self,
        upgrade_duration: String,
    ) -> ApplicationResourceUpgradeProgressInfo {
        self.upgrade_duration = Some(upgrade_duration);
        self
    }

    pub fn upgrade_duration(&self) -> Option<&String> {
        self.upgrade_duration.as_ref()
    }

    pub fn reset_upgrade_duration(&mut self) {
        self.upgrade_duration = None;
    }

    pub fn set_application_upgrade_status_details(
        &mut self,
        application_upgrade_status_details: String,
    ) {
        self.application_upgrade_status_details =
            Some(application_upgrade_status_details);
    }

    pub fn with_application_upgrade_status_details(
        mut self,
        application_upgrade_status_details: String,
    ) -> ApplicationResourceUpgradeProgressInfo {
        self.application_upgrade_status_details =
            Some(application_upgrade_status_details);
        self
    }

    pub fn application_upgrade_status_details(&self) -> Option<&String> {
        self.application_upgrade_status_details.as_ref()
    }

    pub fn reset_application_upgrade_status_details(&mut self) {
        self.application_upgrade_status_details = None;
    }

    pub fn set_upgrade_replica_set_check_timeout_in_seconds(
        &mut self,
        upgrade_replica_set_check_timeout_in_seconds: i64,
    ) {
        self.upgrade_replica_set_check_timeout_in_seconds =
            Some(upgrade_replica_set_check_timeout_in_seconds);
    }

    pub fn with_upgrade_replica_set_check_timeout_in_seconds(
        mut self,
        upgrade_replica_set_check_timeout_in_seconds: i64,
    ) -> ApplicationResourceUpgradeProgressInfo {
        self.upgrade_replica_set_check_timeout_in_seconds =
            Some(upgrade_replica_set_check_timeout_in_seconds);
        self
    }

    pub fn upgrade_replica_set_check_timeout_in_seconds(&self) -> Option<&i64> {
        self.upgrade_replica_set_check_timeout_in_seconds.as_ref()
    }

    pub fn reset_upgrade_replica_set_check_timeout_in_seconds(&mut self) {
        self.upgrade_replica_set_check_timeout_in_seconds = None;
    }

    pub fn set_failure_timestamp_utc(&mut self, failure_timestamp_utc: String) {
        self.failure_timestamp_utc = Some(failure_timestamp_utc);
    }

    pub fn with_failure_timestamp_utc(
        mut self,
        failure_timestamp_utc: String,
    ) -> ApplicationResourceUpgradeProgressInfo {
        self.failure_timestamp_utc = Some(failure_timestamp_utc);
        self
    }

    pub fn failure_timestamp_utc(&self) -> Option<&String> {
        self.failure_timestamp_utc.as_ref()
    }

    pub fn reset_failure_timestamp_utc(&mut self) {
        self.failure_timestamp_utc = None;
    }
}

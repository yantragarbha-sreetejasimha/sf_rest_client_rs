/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.5.0.36
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// IdentityDescription : Information describing the identities associated with this application.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IdentityDescription {
    /// the endpoint for the token service managing this identity
    #[serde(rename = "tokenServiceEndpoint")]
    token_service_endpoint: Option<String>,
    /// the types of identities associated with this resource; currently restricted to 'SystemAssigned and UserAssigned'
    #[serde(rename = "type")]
    _type: String,
    /// the identifier of the tenant containing the application's identity.
    #[serde(rename = "tenantId")]
    tenant_id: Option<String>,
    /// the object identifier of the Service Principal of the identity associated with this resource.
    #[serde(rename = "principalId")]
    principal_id: Option<String>,
    /// represents user assigned identities map.
    #[serde(rename = "userAssignedIdentities")]
    user_assigned_identities: Option<::models::UserAssignedIdentityMap>,
}

impl IdentityDescription {
    /// Information describing the identities associated with this application.
    pub fn new(_type: String) -> IdentityDescription {
        IdentityDescription {
            token_service_endpoint: None,
            _type,
            tenant_id: None,
            principal_id: None,
            user_assigned_identities: None,
        }
    }

    pub fn set_token_service_endpoint(
        &mut self,
        token_service_endpoint: String,
    ) {
        self.token_service_endpoint = Some(token_service_endpoint);
    }

    pub fn with_token_service_endpoint(
        mut self,
        token_service_endpoint: String,
    ) -> IdentityDescription {
        self.token_service_endpoint = Some(token_service_endpoint);
        self
    }

    pub fn token_service_endpoint(&self) -> Option<&String> {
        self.token_service_endpoint.as_ref()
    }

    pub fn reset_token_service_endpoint(&mut self) {
        self.token_service_endpoint = None;
    }

    pub fn set_type(&mut self, _type: String) {
        self._type = _type;
    }

    pub fn with_type(mut self, _type: String) -> IdentityDescription {
        self._type = _type;
        self
    }

    pub fn _type(&self) -> &String {
        &self._type
    }

    pub fn set_tenant_id(&mut self, tenant_id: String) {
        self.tenant_id = Some(tenant_id);
    }

    pub fn with_tenant_id(mut self, tenant_id: String) -> IdentityDescription {
        self.tenant_id = Some(tenant_id);
        self
    }

    pub fn tenant_id(&self) -> Option<&String> {
        self.tenant_id.as_ref()
    }

    pub fn reset_tenant_id(&mut self) {
        self.tenant_id = None;
    }

    pub fn set_principal_id(&mut self, principal_id: String) {
        self.principal_id = Some(principal_id);
    }

    pub fn with_principal_id(
        mut self,
        principal_id: String,
    ) -> IdentityDescription {
        self.principal_id = Some(principal_id);
        self
    }

    pub fn principal_id(&self) -> Option<&String> {
        self.principal_id.as_ref()
    }

    pub fn reset_principal_id(&mut self) {
        self.principal_id = None;
    }

    pub fn set_user_assigned_identities(
        &mut self,
        user_assigned_identities: ::models::UserAssignedIdentityMap,
    ) {
        self.user_assigned_identities = Some(user_assigned_identities);
    }

    pub fn with_user_assigned_identities(
        mut self,
        user_assigned_identities: ::models::UserAssignedIdentityMap,
    ) -> IdentityDescription {
        self.user_assigned_identities = Some(user_assigned_identities);
        self
    }

    pub fn user_assigned_identities(
        &self,
    ) -> Option<&::models::UserAssignedIdentityMap> {
        self.user_assigned_identities.as_ref()
    }

    pub fn reset_user_assigned_identities(&mut self) {
        self.user_assigned_identities = None;
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.5.0.36
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// NodeUpgradeProgressInfo : Information about the upgrading node and its status

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeUpgradeProgressInfo {
    /// The name of a Service Fabric node.
    #[serde(rename = "NodeName")]
    node_name: Option<::models::NodeName>,
    /// The state of the upgrading node.
    #[serde(rename = "UpgradePhase")]
    upgrade_phase: Option<::models::NodeUpgradePhase>,
    /// List of pending safety checks
    #[serde(rename = "PendingSafetyChecks")]
    pending_safety_checks: Option<::models::SafetyCheckInfoList>,
}

impl Default for NodeUpgradeProgressInfo {
    fn default() -> Self {
        Self::new()
    }
}

impl NodeUpgradeProgressInfo {
    /// Information about the upgrading node and its status
    pub fn new() -> NodeUpgradeProgressInfo {
        NodeUpgradeProgressInfo {
            node_name: None,
            upgrade_phase: None,
            pending_safety_checks: None,
        }
    }

    pub fn set_node_name(&mut self, node_name: ::models::NodeName) {
        self.node_name = Some(node_name);
    }

    pub fn with_node_name(
        mut self,
        node_name: ::models::NodeName,
    ) -> NodeUpgradeProgressInfo {
        self.node_name = Some(node_name);
        self
    }

    pub fn node_name(&self) -> Option<&::models::NodeName> {
        self.node_name.as_ref()
    }

    pub fn reset_node_name(&mut self) {
        self.node_name = None;
    }

    pub fn set_upgrade_phase(
        &mut self,
        upgrade_phase: ::models::NodeUpgradePhase,
    ) {
        self.upgrade_phase = Some(upgrade_phase);
    }

    pub fn with_upgrade_phase(
        mut self,
        upgrade_phase: ::models::NodeUpgradePhase,
    ) -> NodeUpgradeProgressInfo {
        self.upgrade_phase = Some(upgrade_phase);
        self
    }

    pub fn upgrade_phase(&self) -> Option<&::models::NodeUpgradePhase> {
        self.upgrade_phase.as_ref()
    }

    pub fn reset_upgrade_phase(&mut self) {
        self.upgrade_phase = None;
    }

    pub fn set_pending_safety_checks(
        &mut self,
        pending_safety_checks: ::models::SafetyCheckInfoList,
    ) {
        self.pending_safety_checks = Some(pending_safety_checks);
    }

    pub fn with_pending_safety_checks(
        mut self,
        pending_safety_checks: ::models::SafetyCheckInfoList,
    ) -> NodeUpgradeProgressInfo {
        self.pending_safety_checks = Some(pending_safety_checks);
        self
    }

    pub fn pending_safety_checks(
        &self,
    ) -> Option<&::models::SafetyCheckInfoList> {
        self.pending_safety_checks.as_ref()
    }

    pub fn reset_pending_safety_checks(&mut self) {
        self.pending_safety_checks = None;
    }
}

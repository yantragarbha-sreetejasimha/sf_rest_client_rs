/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.3.0.9
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// RestoreProgressInfo : Describes the progress of a restore operation on a partition.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RestoreProgressInfo {
    /// Represents the current state of the partition restore operation.
    #[serde(rename = "RestoreState")]
    restore_state: Option<::models::RestoreState>,
    /// Timestamp when operation succeeded or failed.
    #[serde(rename = "TimeStampUtc")]
    time_stamp_utc: Option<String>,
    /// Describes the epoch at which the partition is restored.
    #[serde(rename = "RestoredEpoch")]
    restored_epoch: Option<::models::BackupEpoch>,
    /// Restored LSN.
    #[serde(rename = "RestoredLsn")]
    restored_lsn: Option<String>,
    /// Denotes the failure encountered in performing restore operation.
    #[serde(rename = "FailureError")]
    failure_error: Option<::models::FabricErrorError>,
}

impl Default for RestoreProgressInfo {
    fn default() -> Self {
        Self::new()
    }
}

impl RestoreProgressInfo {
    /// Describes the progress of a restore operation on a partition.
    pub fn new() -> RestoreProgressInfo {
        RestoreProgressInfo {
            restore_state: None,
            time_stamp_utc: None,
            restored_epoch: None,
            restored_lsn: None,
            failure_error: None,
        }
    }

    pub fn set_restore_state(&mut self, restore_state: ::models::RestoreState) {
        self.restore_state = Some(restore_state);
    }

    pub fn with_restore_state(
        mut self,
        restore_state: ::models::RestoreState,
    ) -> RestoreProgressInfo {
        self.restore_state = Some(restore_state);
        self
    }

    pub fn restore_state(&self) -> Option<&::models::RestoreState> {
        self.restore_state.as_ref()
    }

    pub fn reset_restore_state(&mut self) {
        self.restore_state = None;
    }

    pub fn set_time_stamp_utc(&mut self, time_stamp_utc: String) {
        self.time_stamp_utc = Some(time_stamp_utc);
    }

    pub fn with_time_stamp_utc(
        mut self,
        time_stamp_utc: String,
    ) -> RestoreProgressInfo {
        self.time_stamp_utc = Some(time_stamp_utc);
        self
    }

    pub fn time_stamp_utc(&self) -> Option<&String> {
        self.time_stamp_utc.as_ref()
    }

    pub fn reset_time_stamp_utc(&mut self) {
        self.time_stamp_utc = None;
    }

    pub fn set_restored_epoch(
        &mut self,
        restored_epoch: ::models::BackupEpoch,
    ) {
        self.restored_epoch = Some(restored_epoch);
    }

    pub fn with_restored_epoch(
        mut self,
        restored_epoch: ::models::BackupEpoch,
    ) -> RestoreProgressInfo {
        self.restored_epoch = Some(restored_epoch);
        self
    }

    pub fn restored_epoch(&self) -> Option<&::models::BackupEpoch> {
        self.restored_epoch.as_ref()
    }

    pub fn reset_restored_epoch(&mut self) {
        self.restored_epoch = None;
    }

    pub fn set_restored_lsn(&mut self, restored_lsn: String) {
        self.restored_lsn = Some(restored_lsn);
    }

    pub fn with_restored_lsn(
        mut self,
        restored_lsn: String,
    ) -> RestoreProgressInfo {
        self.restored_lsn = Some(restored_lsn);
        self
    }

    pub fn restored_lsn(&self) -> Option<&String> {
        self.restored_lsn.as_ref()
    }

    pub fn reset_restored_lsn(&mut self) {
        self.restored_lsn = None;
    }

    pub fn set_failure_error(
        &mut self,
        failure_error: ::models::FabricErrorError,
    ) {
        self.failure_error = Some(failure_error);
    }

    pub fn with_failure_error(
        mut self,
        failure_error: ::models::FabricErrorError,
    ) -> RestoreProgressInfo {
        self.failure_error = Some(failure_error);
        self
    }

    pub fn failure_error(&self) -> Option<&::models::FabricErrorError> {
        self.failure_error.as_ref()
    }

    pub fn reset_failure_error(&mut self) {
        self.failure_error = None;
    }
}

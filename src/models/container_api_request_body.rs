/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.5.0.36
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ContainerApiRequestBody : parameters for making container API call.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ContainerApiRequestBody {
    /// HTTP verb of container REST API, defaults to \"GET\"
    #[serde(rename = "HttpVerb")]
    http_verb: Option<String>,
    /// URI path of container REST API
    #[serde(rename = "UriPath")]
    uri_path: String,
    /// Content type of container REST API request, defaults to \"application/json\"
    #[serde(rename = "Content-Type")]
    content_type: Option<String>,
    /// HTTP request body of container REST API
    #[serde(rename = "Body")]
    body: Option<String>,
}

impl ContainerApiRequestBody {
    /// parameters for making container API call.
    pub fn new(uri_path: String) -> ContainerApiRequestBody {
        ContainerApiRequestBody {
            http_verb: None,
            uri_path,
            content_type: None,
            body: None,
        }
    }

    pub fn set_http_verb(&mut self, http_verb: String) {
        self.http_verb = Some(http_verb);
    }

    pub fn with_http_verb(
        mut self,
        http_verb: String,
    ) -> ContainerApiRequestBody {
        self.http_verb = Some(http_verb);
        self
    }

    pub fn http_verb(&self) -> Option<&String> {
        self.http_verb.as_ref()
    }

    pub fn reset_http_verb(&mut self) {
        self.http_verb = None;
    }

    pub fn set_uri_path(&mut self, uri_path: String) {
        self.uri_path = uri_path;
    }

    pub fn with_uri_path(
        mut self,
        uri_path: String,
    ) -> ContainerApiRequestBody {
        self.uri_path = uri_path;
        self
    }

    pub fn uri_path(&self) -> &String {
        &self.uri_path
    }

    pub fn set_content_type(&mut self, content_type: String) {
        self.content_type = Some(content_type);
    }

    pub fn with_content_type(
        mut self,
        content_type: String,
    ) -> ContainerApiRequestBody {
        self.content_type = Some(content_type);
        self
    }

    pub fn content_type(&self) -> Option<&String> {
        self.content_type.as_ref()
    }

    pub fn reset_content_type(&mut self) {
        self.content_type = None;
    }

    pub fn set_body(&mut self, body: String) {
        self.body = Some(body);
    }

    pub fn with_body(mut self, body: String) -> ContainerApiRequestBody {
        self.body = Some(body);
        self
    }

    pub fn body(&self) -> Option<&String> {
        self.body.as_ref()
    }

    pub fn reset_body(&mut self) {
        self.body = None;
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.0.0.42
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PartitionBackupEntity : Identifies the Service Fabric stateful partition which is being backed up.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PartitionBackupEntity {
    /// The entity type of a Service Fabric entity such as Application, Service or a Partition where periodic backups can be enabled.
    #[serde(rename = "EntityKind")]
    entity_kind: ::models::BackupEntityKind,
    /// The full name of the service with 'fabric:' URI scheme.
    #[serde(rename = "ServiceName")]
    service_name: Option<::models::ServiceName>,
    /// The partition ID identifying the partition.
    #[serde(rename = "PartitionId")]
    partition_id: Option<::models::PartitionId>,
}

impl PartitionBackupEntity {
    /// Identifies the Service Fabric stateful partition which is being backed up.
    pub fn new(
        entity_kind: ::models::BackupEntityKind,
    ) -> PartitionBackupEntity {
        PartitionBackupEntity {
            entity_kind,
            service_name: None,
            partition_id: None,
        }
    }

    pub fn set_entity_kind(&mut self, entity_kind: ::models::BackupEntityKind) {
        self.entity_kind = entity_kind;
    }

    pub fn with_entity_kind(
        mut self,
        entity_kind: ::models::BackupEntityKind,
    ) -> PartitionBackupEntity {
        self.entity_kind = entity_kind;
        self
    }

    pub fn entity_kind(&self) -> &::models::BackupEntityKind {
        &self.entity_kind
    }

    pub fn set_service_name(&mut self, service_name: ::models::ServiceName) {
        self.service_name = Some(service_name);
    }

    pub fn with_service_name(
        mut self,
        service_name: ::models::ServiceName,
    ) -> PartitionBackupEntity {
        self.service_name = Some(service_name);
        self
    }

    pub fn service_name(&self) -> Option<&::models::ServiceName> {
        self.service_name.as_ref()
    }

    pub fn reset_service_name(&mut self) {
        self.service_name = None;
    }

    pub fn set_partition_id(&mut self, partition_id: ::models::PartitionId) {
        self.partition_id = Some(partition_id);
    }

    pub fn with_partition_id(
        mut self,
        partition_id: ::models::PartitionId,
    ) -> PartitionBackupEntity {
        self.partition_id = Some(partition_id);
        self
    }

    pub fn partition_id(&self) -> Option<&::models::PartitionId> {
        self.partition_id.as_ref()
    }

    pub fn reset_partition_id(&mut self) {
        self.partition_id = None;
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.0.0.42
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ClusterConfigurationUpgradeStatusInfo : Information about a standalone cluster configuration upgrade status.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ClusterConfigurationUpgradeStatusInfo {
    /// The state of the upgrade domain.
    #[serde(rename = "UpgradeState")]
    upgrade_state: Option<::models::UpgradeState>,
    /// The cluster manifest version.
    #[serde(rename = "ProgressStatus")]
    progress_status: Option<i32>,
    /// The cluster configuration version.
    #[serde(rename = "ConfigVersion")]
    config_version: Option<String>,
    /// The cluster upgrade status details.
    #[serde(rename = "Details")]
    details: Option<String>,
}

impl Default for ClusterConfigurationUpgradeStatusInfo {
    fn default() -> Self {
        Self::new()
    }
}

impl ClusterConfigurationUpgradeStatusInfo {
    /// Information about a standalone cluster configuration upgrade status.
    pub fn new() -> ClusterConfigurationUpgradeStatusInfo {
        ClusterConfigurationUpgradeStatusInfo {
            upgrade_state: None,
            progress_status: None,
            config_version: None,
            details: None,
        }
    }

    pub fn set_upgrade_state(&mut self, upgrade_state: ::models::UpgradeState) {
        self.upgrade_state = Some(upgrade_state);
    }

    pub fn with_upgrade_state(
        mut self,
        upgrade_state: ::models::UpgradeState,
    ) -> ClusterConfigurationUpgradeStatusInfo {
        self.upgrade_state = Some(upgrade_state);
        self
    }

    pub fn upgrade_state(&self) -> Option<&::models::UpgradeState> {
        self.upgrade_state.as_ref()
    }

    pub fn reset_upgrade_state(&mut self) {
        self.upgrade_state = None;
    }

    pub fn set_progress_status(&mut self, progress_status: i32) {
        self.progress_status = Some(progress_status);
    }

    pub fn with_progress_status(
        mut self,
        progress_status: i32,
    ) -> ClusterConfigurationUpgradeStatusInfo {
        self.progress_status = Some(progress_status);
        self
    }

    pub fn progress_status(&self) -> Option<&i32> {
        self.progress_status.as_ref()
    }

    pub fn reset_progress_status(&mut self) {
        self.progress_status = None;
    }

    pub fn set_config_version(&mut self, config_version: String) {
        self.config_version = Some(config_version);
    }

    pub fn with_config_version(
        mut self,
        config_version: String,
    ) -> ClusterConfigurationUpgradeStatusInfo {
        self.config_version = Some(config_version);
        self
    }

    pub fn config_version(&self) -> Option<&String> {
        self.config_version.as_ref()
    }

    pub fn reset_config_version(&mut self) {
        self.config_version = None;
    }

    pub fn set_details(&mut self, details: String) {
        self.details = Some(details);
    }

    pub fn with_details(
        mut self,
        details: String,
    ) -> ClusterConfigurationUpgradeStatusInfo {
        self.details = Some(details);
        self
    }

    pub fn details(&self) -> Option<&String> {
        self.details.as_ref()
    }

    pub fn reset_details(&mut self) {
        self.details = None;
    }
}

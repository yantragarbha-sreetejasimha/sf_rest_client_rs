/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.1.0.45
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DeployedServicePackageInfo : Information about service package deployed on a Service Fabric node.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DeployedServicePackageInfo {
    /// The name of the service package as specified in the service manifest.
    #[serde(rename = "Name")]
    name: Option<::models::ServiceManifestName>,
    /// The version of the service package specified in service manifest.
    #[serde(rename = "Version")]
    version: Option<String>,
    /// Specifies the status of a deployed application or service package on a Service Fabric node.
    #[serde(rename = "Status")]
    status: Option<::models::DeploymentStatus>,
    /// The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId is always an empty string.
    #[serde(rename = "ServicePackageActivationId")]
    service_package_activation_id: Option<::models::ServicePackageActivationId>,
}

impl Default for DeployedServicePackageInfo {
    fn default() -> Self {
        Self::new()
    }
}

impl DeployedServicePackageInfo {
    /// Information about service package deployed on a Service Fabric node.
    pub fn new() -> DeployedServicePackageInfo {
        DeployedServicePackageInfo {
            name: None,
            version: None,
            status: None,
            service_package_activation_id: None,
        }
    }

    pub fn set_name(&mut self, name: ::models::ServiceManifestName) {
        self.name = Some(name);
    }

    pub fn with_name(
        mut self,
        name: ::models::ServiceManifestName,
    ) -> DeployedServicePackageInfo {
        self.name = Some(name);
        self
    }

    pub fn name(&self) -> Option<&::models::ServiceManifestName> {
        self.name.as_ref()
    }

    pub fn reset_name(&mut self) {
        self.name = None;
    }

    pub fn set_version(&mut self, version: String) {
        self.version = Some(version);
    }

    pub fn with_version(
        mut self,
        version: String,
    ) -> DeployedServicePackageInfo {
        self.version = Some(version);
        self
    }

    pub fn version(&self) -> Option<&String> {
        self.version.as_ref()
    }

    pub fn reset_version(&mut self) {
        self.version = None;
    }

    pub fn set_status(&mut self, status: ::models::DeploymentStatus) {
        self.status = Some(status);
    }

    pub fn with_status(
        mut self,
        status: ::models::DeploymentStatus,
    ) -> DeployedServicePackageInfo {
        self.status = Some(status);
        self
    }

    pub fn status(&self) -> Option<&::models::DeploymentStatus> {
        self.status.as_ref()
    }

    pub fn reset_status(&mut self) {
        self.status = None;
    }

    pub fn set_service_package_activation_id(
        &mut self,
        service_package_activation_id: ::models::ServicePackageActivationId,
    ) {
        self.service_package_activation_id =
            Some(service_package_activation_id);
    }

    pub fn with_service_package_activation_id(
        mut self,
        service_package_activation_id: ::models::ServicePackageActivationId,
    ) -> DeployedServicePackageInfo {
        self.service_package_activation_id =
            Some(service_package_activation_id);
        self
    }

    pub fn service_package_activation_id(
        &self,
    ) -> Option<&::models::ServicePackageActivationId> {
        self.service_package_activation_id.as_ref()
    }

    pub fn reset_service_package_activation_id(&mut self) {
        self.service_package_activation_id = None;
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.5.0.36
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// RemoteReplicatorAcknowledgementDetail : Provides various statistics of the acknowledgements that are being received from the remote replicator.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RemoteReplicatorAcknowledgementDetail {
    /// Represents the average duration it takes for the remote replicator to receive an operation.
    #[serde(rename = "AverageReceiveDuration")]
    average_receive_duration: Option<String>,
    /// Represents the average duration it takes for the remote replicator to apply an operation. This usually entails writing the operation to disk.
    #[serde(rename = "AverageApplyDuration")]
    average_apply_duration: Option<String>,
    /// Represents the number of operations not yet received by a remote replicator.
    #[serde(rename = "NotReceivedCount")]
    not_received_count: Option<String>,
    /// Represents the number of operations received and not yet applied by a remote replicator.
    #[serde(rename = "ReceivedAndNotAppliedCount")]
    received_and_not_applied_count: Option<String>,
}

impl Default for RemoteReplicatorAcknowledgementDetail {
    fn default() -> Self {
        Self::new()
    }
}

impl RemoteReplicatorAcknowledgementDetail {
    /// Provides various statistics of the acknowledgements that are being received from the remote replicator.
    pub fn new() -> RemoteReplicatorAcknowledgementDetail {
        RemoteReplicatorAcknowledgementDetail {
            average_receive_duration: None,
            average_apply_duration: None,
            not_received_count: None,
            received_and_not_applied_count: None,
        }
    }

    pub fn set_average_receive_duration(
        &mut self,
        average_receive_duration: String,
    ) {
        self.average_receive_duration = Some(average_receive_duration);
    }

    pub fn with_average_receive_duration(
        mut self,
        average_receive_duration: String,
    ) -> RemoteReplicatorAcknowledgementDetail {
        self.average_receive_duration = Some(average_receive_duration);
        self
    }

    pub fn average_receive_duration(&self) -> Option<&String> {
        self.average_receive_duration.as_ref()
    }

    pub fn reset_average_receive_duration(&mut self) {
        self.average_receive_duration = None;
    }

    pub fn set_average_apply_duration(
        &mut self,
        average_apply_duration: String,
    ) {
        self.average_apply_duration = Some(average_apply_duration);
    }

    pub fn with_average_apply_duration(
        mut self,
        average_apply_duration: String,
    ) -> RemoteReplicatorAcknowledgementDetail {
        self.average_apply_duration = Some(average_apply_duration);
        self
    }

    pub fn average_apply_duration(&self) -> Option<&String> {
        self.average_apply_duration.as_ref()
    }

    pub fn reset_average_apply_duration(&mut self) {
        self.average_apply_duration = None;
    }

    pub fn set_not_received_count(&mut self, not_received_count: String) {
        self.not_received_count = Some(not_received_count);
    }

    pub fn with_not_received_count(
        mut self,
        not_received_count: String,
    ) -> RemoteReplicatorAcknowledgementDetail {
        self.not_received_count = Some(not_received_count);
        self
    }

    pub fn not_received_count(&self) -> Option<&String> {
        self.not_received_count.as_ref()
    }

    pub fn reset_not_received_count(&mut self) {
        self.not_received_count = None;
    }

    pub fn set_received_and_not_applied_count(
        &mut self,
        received_and_not_applied_count: String,
    ) {
        self.received_and_not_applied_count =
            Some(received_and_not_applied_count);
    }

    pub fn with_received_and_not_applied_count(
        mut self,
        received_and_not_applied_count: String,
    ) -> RemoteReplicatorAcknowledgementDetail {
        self.received_and_not_applied_count =
            Some(received_and_not_applied_count);
        self
    }

    pub fn received_and_not_applied_count(&self) -> Option<&String> {
        self.received_and_not_applied_count.as_ref()
    }

    pub fn reset_received_and_not_applied_count(&mut self) {
        self.received_and_not_applied_count = None;
    }
}

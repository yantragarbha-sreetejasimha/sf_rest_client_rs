/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.0.0.42
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// AadMetadata : Azure Active Directory metadata used for secured connection to cluster.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AadMetadata {
    /// The AAD authority url.
    #[serde(rename = "authority")]
    authority: Option<String>,
    /// The AAD client application Id.
    #[serde(rename = "client")]
    client: Option<String>,
    /// The AAD cluster application Id.
    #[serde(rename = "cluster")]
    cluster: Option<String>,
    /// The AAD login url.
    #[serde(rename = "login")]
    login: Option<String>,
    /// The client application redirect address.
    #[serde(rename = "redirect")]
    redirect: Option<String>,
    /// The AAD tenant Id.
    #[serde(rename = "tenant")]
    tenant: Option<String>,
}

impl Default for AadMetadata {
    fn default() -> Self {
        Self::new()
    }
}

impl AadMetadata {
    /// Azure Active Directory metadata used for secured connection to cluster.
    pub fn new() -> AadMetadata {
        AadMetadata {
            authority: None,
            client: None,
            cluster: None,
            login: None,
            redirect: None,
            tenant: None,
        }
    }

    pub fn set_authority(&mut self, authority: String) {
        self.authority = Some(authority);
    }

    pub fn with_authority(mut self, authority: String) -> AadMetadata {
        self.authority = Some(authority);
        self
    }

    pub fn authority(&self) -> Option<&String> {
        self.authority.as_ref()
    }

    pub fn reset_authority(&mut self) {
        self.authority = None;
    }

    pub fn set_client(&mut self, client: String) {
        self.client = Some(client);
    }

    pub fn with_client(mut self, client: String) -> AadMetadata {
        self.client = Some(client);
        self
    }

    pub fn client(&self) -> Option<&String> {
        self.client.as_ref()
    }

    pub fn reset_client(&mut self) {
        self.client = None;
    }

    pub fn set_cluster(&mut self, cluster: String) {
        self.cluster = Some(cluster);
    }

    pub fn with_cluster(mut self, cluster: String) -> AadMetadata {
        self.cluster = Some(cluster);
        self
    }

    pub fn cluster(&self) -> Option<&String> {
        self.cluster.as_ref()
    }

    pub fn reset_cluster(&mut self) {
        self.cluster = None;
    }

    pub fn set_login(&mut self, login: String) {
        self.login = Some(login);
    }

    pub fn with_login(mut self, login: String) -> AadMetadata {
        self.login = Some(login);
        self
    }

    pub fn login(&self) -> Option<&String> {
        self.login.as_ref()
    }

    pub fn reset_login(&mut self) {
        self.login = None;
    }

    pub fn set_redirect(&mut self, redirect: String) {
        self.redirect = Some(redirect);
    }

    pub fn with_redirect(mut self, redirect: String) -> AadMetadata {
        self.redirect = Some(redirect);
        self
    }

    pub fn redirect(&self) -> Option<&String> {
        self.redirect.as_ref()
    }

    pub fn reset_redirect(&mut self) {
        self.redirect = None;
    }

    pub fn set_tenant(&mut self, tenant: String) {
        self.tenant = Some(tenant);
    }

    pub fn with_tenant(mut self, tenant: String) -> AadMetadata {
        self.tenant = Some(tenant);
        self
    }

    pub fn tenant(&self) -> Option<&String> {
        self.tenant.as_ref()
    }

    pub fn reset_tenant(&mut self) {
        self.tenant = None;
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.0.0.42
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// NodeDeactivationTaskId : Identity of the task related to deactivation operation on the node.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeDeactivationTaskId {
    /// Value of the task id.
    #[serde(rename = "Id")]
    id: Option<String>,
    /// The type of the task that performed the node deactivation. Following are the possible values.
    #[serde(rename = "NodeDeactivationTaskType")]
    node_deactivation_task_type: Option<::models::NodeDeactivationTaskType>,
}

impl Default for NodeDeactivationTaskId {
    fn default() -> Self {
        Self::new()
    }
}

impl NodeDeactivationTaskId {
    /// Identity of the task related to deactivation operation on the node.
    pub fn new() -> NodeDeactivationTaskId {
        NodeDeactivationTaskId {
            id: None,
            node_deactivation_task_type: None,
        }
    }

    pub fn set_id(&mut self, id: String) {
        self.id = Some(id);
    }

    pub fn with_id(mut self, id: String) -> NodeDeactivationTaskId {
        self.id = Some(id);
        self
    }

    pub fn id(&self) -> Option<&String> {
        self.id.as_ref()
    }

    pub fn reset_id(&mut self) {
        self.id = None;
    }

    pub fn set_node_deactivation_task_type(
        &mut self,
        node_deactivation_task_type: ::models::NodeDeactivationTaskType,
    ) {
        self.node_deactivation_task_type = Some(node_deactivation_task_type);
    }

    pub fn with_node_deactivation_task_type(
        mut self,
        node_deactivation_task_type: ::models::NodeDeactivationTaskType,
    ) -> NodeDeactivationTaskId {
        self.node_deactivation_task_type = Some(node_deactivation_task_type);
        self
    }

    pub fn node_deactivation_task_type(
        &self,
    ) -> Option<&::models::NodeDeactivationTaskType> {
        self.node_deactivation_task_type.as_ref()
    }

    pub fn reset_node_deactivation_task_type(&mut self) {
        self.node_deactivation_task_type = None;
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.0.0.42
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// FileVersion : Information about the version of image store file.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FileVersion {
    /// The current image store version number for the file is used in image store for checking whether it need to be updated.
    #[serde(rename = "VersionNumber")]
    version_number: Option<String>,
    /// The epoch data loss number of image store replica when this file entry was updated or created.
    #[serde(rename = "EpochDataLossNumber")]
    epoch_data_loss_number: Option<String>,
    /// The epoch configuration version number of the image store replica when this file entry was created or updated.
    #[serde(rename = "EpochConfigurationNumber")]
    epoch_configuration_number: Option<String>,
}

impl Default for FileVersion {
    fn default() -> Self {
        Self::new()
    }
}

impl FileVersion {
    /// Information about the version of image store file.
    pub fn new() -> FileVersion {
        FileVersion {
            version_number: None,
            epoch_data_loss_number: None,
            epoch_configuration_number: None,
        }
    }

    pub fn set_version_number(&mut self, version_number: String) {
        self.version_number = Some(version_number);
    }

    pub fn with_version_number(
        mut self,
        version_number: String,
    ) -> FileVersion {
        self.version_number = Some(version_number);
        self
    }

    pub fn version_number(&self) -> Option<&String> {
        self.version_number.as_ref()
    }

    pub fn reset_version_number(&mut self) {
        self.version_number = None;
    }

    pub fn set_epoch_data_loss_number(
        &mut self,
        epoch_data_loss_number: String,
    ) {
        self.epoch_data_loss_number = Some(epoch_data_loss_number);
    }

    pub fn with_epoch_data_loss_number(
        mut self,
        epoch_data_loss_number: String,
    ) -> FileVersion {
        self.epoch_data_loss_number = Some(epoch_data_loss_number);
        self
    }

    pub fn epoch_data_loss_number(&self) -> Option<&String> {
        self.epoch_data_loss_number.as_ref()
    }

    pub fn reset_epoch_data_loss_number(&mut self) {
        self.epoch_data_loss_number = None;
    }

    pub fn set_epoch_configuration_number(
        &mut self,
        epoch_configuration_number: String,
    ) {
        self.epoch_configuration_number = Some(epoch_configuration_number);
    }

    pub fn with_epoch_configuration_number(
        mut self,
        epoch_configuration_number: String,
    ) -> FileVersion {
        self.epoch_configuration_number = Some(epoch_configuration_number);
        self
    }

    pub fn epoch_configuration_number(&self) -> Option<&String> {
        self.epoch_configuration_number.as_ref()
    }

    pub fn reset_epoch_configuration_number(&mut self) {
        self.epoch_configuration_number = None;
    }
}

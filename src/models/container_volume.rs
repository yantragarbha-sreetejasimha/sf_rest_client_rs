/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.3.0.9
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ContainerVolume : Describes how a volume is attached to a container.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ContainerVolume {
    /// Name of the volume.
    #[serde(rename = "name")]
    name: String,
    /// The flag indicating whether the volume is read only. Default is 'false'.
    #[serde(rename = "readOnly")]
    read_only: Option<bool>,
    /// The path within the container at which the volume should be mounted. Only valid path characters are allowed.
    #[serde(rename = "destinationPath")]
    destination_path: String,
}

impl ContainerVolume {
    /// Describes how a volume is attached to a container.
    pub fn new(name: String, destination_path: String) -> ContainerVolume {
        ContainerVolume {
            name,
            read_only: None,
            destination_path,
        }
    }

    pub fn set_name(&mut self, name: String) {
        self.name = name;
    }

    pub fn with_name(mut self, name: String) -> ContainerVolume {
        self.name = name;
        self
    }

    pub fn name(&self) -> &String {
        &self.name
    }

    pub fn set_read_only(&mut self, read_only: bool) {
        self.read_only = Some(read_only);
    }

    pub fn with_read_only(mut self, read_only: bool) -> ContainerVolume {
        self.read_only = Some(read_only);
        self
    }

    pub fn read_only(&self) -> Option<&bool> {
        self.read_only.as_ref()
    }

    pub fn reset_read_only(&mut self) {
        self.read_only = None;
    }

    pub fn set_destination_path(&mut self, destination_path: String) {
        self.destination_path = destination_path;
    }

    pub fn with_destination_path(
        mut self,
        destination_path: String,
    ) -> ContainerVolume {
        self.destination_path = destination_path;
        self
    }

    pub fn destination_path(&self) -> &String {
        &self.destination_path
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 8.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// UpdatePartitionLoadResult : Specifies result of updating load for specified partitions. The output will be ordered based on the partition ID.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UpdatePartitionLoadResult {
    /// Id of the partition.
    #[serde(rename = "PartitionId")]
    partition_id: Option<::models::PartitionId>,
    /// If OperationState is Completed - this is 0.  If OperationState is Faulted - this is an error code indicating the reason.
    #[serde(rename = "PartitionErrorCode")]
    partition_error_code: Option<i32>,
}

impl Default for UpdatePartitionLoadResult {
    fn default() -> Self {
        Self::new()
    }
}

impl UpdatePartitionLoadResult {
    /// Specifies result of updating load for specified partitions. The output will be ordered based on the partition ID.
    pub fn new() -> UpdatePartitionLoadResult {
        UpdatePartitionLoadResult {
            partition_id: None,
            partition_error_code: None,
        }
    }

    pub fn set_partition_id(&mut self, partition_id: ::models::PartitionId) {
        self.partition_id = Some(partition_id);
    }

    pub fn with_partition_id(
        mut self,
        partition_id: ::models::PartitionId,
    ) -> UpdatePartitionLoadResult {
        self.partition_id = Some(partition_id);
        self
    }

    pub fn partition_id(&self) -> Option<&::models::PartitionId> {
        self.partition_id.as_ref()
    }

    pub fn reset_partition_id(&mut self) {
        self.partition_id = None;
    }

    pub fn set_partition_error_code(&mut self, partition_error_code: i32) {
        self.partition_error_code = Some(partition_error_code);
    }

    pub fn with_partition_error_code(
        mut self,
        partition_error_code: i32,
    ) -> UpdatePartitionLoadResult {
        self.partition_error_code = Some(partition_error_code);
        self
    }

    pub fn partition_error_code(&self) -> Option<&i32> {
        self.partition_error_code.as_ref()
    }

    pub fn reset_partition_error_code(&mut self) {
        self.partition_error_code = None;
    }
}

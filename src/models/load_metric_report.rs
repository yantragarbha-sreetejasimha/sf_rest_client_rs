/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.3.0.9
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// LoadMetricReport : Represents the load metric report which contains the time metric was reported, its name and value.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LoadMetricReport {
    /// Gets the UTC time when the load was reported.
    #[serde(rename = "LastReportedUtc")]
    last_reported_utc: Option<String>,
    /// The name of the load metric.
    #[serde(rename = "Name")]
    name: Option<String>,
    /// The value of the load metric.
    #[serde(rename = "Value")]
    value: Option<String>,
}

impl Default for LoadMetricReport {
    fn default() -> Self {
        Self::new()
    }
}

impl LoadMetricReport {
    /// Represents the load metric report which contains the time metric was reported, its name and value.
    pub fn new() -> LoadMetricReport {
        LoadMetricReport {
            last_reported_utc: None,
            name: None,
            value: None,
        }
    }

    pub fn set_last_reported_utc(&mut self, last_reported_utc: String) {
        self.last_reported_utc = Some(last_reported_utc);
    }

    pub fn with_last_reported_utc(
        mut self,
        last_reported_utc: String,
    ) -> LoadMetricReport {
        self.last_reported_utc = Some(last_reported_utc);
        self
    }

    pub fn last_reported_utc(&self) -> Option<&String> {
        self.last_reported_utc.as_ref()
    }

    pub fn reset_last_reported_utc(&mut self) {
        self.last_reported_utc = None;
    }

    pub fn set_name(&mut self, name: String) {
        self.name = Some(name);
    }

    pub fn with_name(mut self, name: String) -> LoadMetricReport {
        self.name = Some(name);
        self
    }

    pub fn name(&self) -> Option<&String> {
        self.name.as_ref()
    }

    pub fn reset_name(&mut self) {
        self.name = None;
    }

    pub fn set_value(&mut self, value: String) {
        self.value = Some(value);
    }

    pub fn with_value(mut self, value: String) -> LoadMetricReport {
        self.value = Some(value);
        self
    }

    pub fn value(&self) -> Option<&String> {
        self.value.as_ref()
    }

    pub fn reset_value(&mut self) {
        self.value = None;
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 8.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Int64RangePartitionInformation : Describes the partition information for the integer range that is based on partition schemes.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Int64RangePartitionInformation {
    /// The kind of partitioning scheme used to partition the service.
    #[serde(rename = "ServicePartitionKind")]
    service_partition_kind: ::models::ServicePartitionKind,
    /// An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.
    #[serde(rename = "Id")]
    id: Option<::models::PartitionId>,
    /// Specifies the minimum key value handled by this partition.
    #[serde(rename = "LowKey")]
    low_key: Option<String>,
    /// Specifies the maximum key value handled by this partition.
    #[serde(rename = "HighKey")]
    high_key: Option<String>,
}

impl Int64RangePartitionInformation {
    /// Describes the partition information for the integer range that is based on partition schemes.
    pub fn new(
        service_partition_kind: ::models::ServicePartitionKind,
    ) -> Int64RangePartitionInformation {
        Int64RangePartitionInformation {
            service_partition_kind,
            id: None,
            low_key: None,
            high_key: None,
        }
    }

    pub fn set_service_partition_kind(
        &mut self,
        service_partition_kind: ::models::ServicePartitionKind,
    ) {
        self.service_partition_kind = service_partition_kind;
    }

    pub fn with_service_partition_kind(
        mut self,
        service_partition_kind: ::models::ServicePartitionKind,
    ) -> Int64RangePartitionInformation {
        self.service_partition_kind = service_partition_kind;
        self
    }

    pub fn service_partition_kind(&self) -> &::models::ServicePartitionKind {
        &self.service_partition_kind
    }

    pub fn set_id(&mut self, id: ::models::PartitionId) {
        self.id = Some(id);
    }

    pub fn with_id(
        mut self,
        id: ::models::PartitionId,
    ) -> Int64RangePartitionInformation {
        self.id = Some(id);
        self
    }

    pub fn id(&self) -> Option<&::models::PartitionId> {
        self.id.as_ref()
    }

    pub fn reset_id(&mut self) {
        self.id = None;
    }

    pub fn set_low_key(&mut self, low_key: String) {
        self.low_key = Some(low_key);
    }

    pub fn with_low_key(
        mut self,
        low_key: String,
    ) -> Int64RangePartitionInformation {
        self.low_key = Some(low_key);
        self
    }

    pub fn low_key(&self) -> Option<&String> {
        self.low_key.as_ref()
    }

    pub fn reset_low_key(&mut self) {
        self.low_key = None;
    }

    pub fn set_high_key(&mut self, high_key: String) {
        self.high_key = Some(high_key);
    }

    pub fn with_high_key(
        mut self,
        high_key: String,
    ) -> Int64RangePartitionInformation {
        self.high_key = Some(high_key);
        self
    }

    pub fn high_key(&self) -> Option<&String> {
        self.high_key.as_ref()
    }

    pub fn reset_high_key(&mut self) {
        self.high_key = None;
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.3.0.9
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PartitionHealth : Information about the health of a Service Fabric partition.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PartitionHealth {
    /// The HealthState representing the aggregated health state of the entity computed by Health Manager. The health evaluation of the entity reflects all events reported on the entity and its children (if any). The aggregation is done by applying the desired health policy.
    #[serde(rename = "AggregatedHealthState")]
    aggregated_health_state: Option<::models::HealthState>,
    /// The list of health events reported on the entity.
    #[serde(rename = "HealthEvents")]
    health_events: Option<Vec<::models::HealthEvent>>,
    /// The unhealthy evaluations that show why the current aggregated health state was returned by Health Manager.
    #[serde(rename = "UnhealthyEvaluations")]
    unhealthy_evaluations: Option<::models::UnhealthyEvaluations>,
    /// Shows the health statistics for all children types of the queried entity.
    #[serde(rename = "HealthStatistics")]
    health_statistics: Option<::models::HealthStatistics>,
    /// ID of the partition whose health information is described by this object.
    #[serde(rename = "PartitionId")]
    partition_id: Option<::models::PartitionId>,
    /// The list of replica health states associated with the partition.
    #[serde(rename = "ReplicaHealthStates")]
    replica_health_states: Option<Vec<::models::ReplicaHealthState>>,
}

impl Default for PartitionHealth {
    fn default() -> Self {
        Self::new()
    }
}

impl PartitionHealth {
    /// Information about the health of a Service Fabric partition.
    pub fn new() -> PartitionHealth {
        PartitionHealth {
            aggregated_health_state: None,
            health_events: None,
            unhealthy_evaluations: None,
            health_statistics: None,
            partition_id: None,
            replica_health_states: None,
        }
    }

    pub fn set_aggregated_health_state(
        &mut self,
        aggregated_health_state: ::models::HealthState,
    ) {
        self.aggregated_health_state = Some(aggregated_health_state);
    }

    pub fn with_aggregated_health_state(
        mut self,
        aggregated_health_state: ::models::HealthState,
    ) -> PartitionHealth {
        self.aggregated_health_state = Some(aggregated_health_state);
        self
    }

    pub fn aggregated_health_state(&self) -> Option<&::models::HealthState> {
        self.aggregated_health_state.as_ref()
    }

    pub fn reset_aggregated_health_state(&mut self) {
        self.aggregated_health_state = None;
    }

    pub fn set_health_events(
        &mut self,
        health_events: Vec<::models::HealthEvent>,
    ) {
        self.health_events = Some(health_events);
    }

    pub fn with_health_events(
        mut self,
        health_events: Vec<::models::HealthEvent>,
    ) -> PartitionHealth {
        self.health_events = Some(health_events);
        self
    }

    pub fn health_events(&self) -> Option<&Vec<::models::HealthEvent>> {
        self.health_events.as_ref()
    }

    pub fn reset_health_events(&mut self) {
        self.health_events = None;
    }

    pub fn set_unhealthy_evaluations(
        &mut self,
        unhealthy_evaluations: ::models::UnhealthyEvaluations,
    ) {
        self.unhealthy_evaluations = Some(unhealthy_evaluations);
    }

    pub fn with_unhealthy_evaluations(
        mut self,
        unhealthy_evaluations: ::models::UnhealthyEvaluations,
    ) -> PartitionHealth {
        self.unhealthy_evaluations = Some(unhealthy_evaluations);
        self
    }

    pub fn unhealthy_evaluations(
        &self,
    ) -> Option<&::models::UnhealthyEvaluations> {
        self.unhealthy_evaluations.as_ref()
    }

    pub fn reset_unhealthy_evaluations(&mut self) {
        self.unhealthy_evaluations = None;
    }

    pub fn set_health_statistics(
        &mut self,
        health_statistics: ::models::HealthStatistics,
    ) {
        self.health_statistics = Some(health_statistics);
    }

    pub fn with_health_statistics(
        mut self,
        health_statistics: ::models::HealthStatistics,
    ) -> PartitionHealth {
        self.health_statistics = Some(health_statistics);
        self
    }

    pub fn health_statistics(&self) -> Option<&::models::HealthStatistics> {
        self.health_statistics.as_ref()
    }

    pub fn reset_health_statistics(&mut self) {
        self.health_statistics = None;
    }

    pub fn set_partition_id(&mut self, partition_id: ::models::PartitionId) {
        self.partition_id = Some(partition_id);
    }

    pub fn with_partition_id(
        mut self,
        partition_id: ::models::PartitionId,
    ) -> PartitionHealth {
        self.partition_id = Some(partition_id);
        self
    }

    pub fn partition_id(&self) -> Option<&::models::PartitionId> {
        self.partition_id.as_ref()
    }

    pub fn reset_partition_id(&mut self) {
        self.partition_id = None;
    }

    pub fn set_replica_health_states(
        &mut self,
        replica_health_states: Vec<::models::ReplicaHealthState>,
    ) {
        self.replica_health_states = Some(replica_health_states);
    }

    pub fn with_replica_health_states(
        mut self,
        replica_health_states: Vec<::models::ReplicaHealthState>,
    ) -> PartitionHealth {
        self.replica_health_states = Some(replica_health_states);
        self
    }

    pub fn replica_health_states(
        &self,
    ) -> Option<&Vec<::models::ReplicaHealthState>> {
        self.replica_health_states.as_ref()
    }

    pub fn reset_replica_health_states(&mut self) {
        self.replica_health_states = None;
    }
}

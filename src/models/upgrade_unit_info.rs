/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 8.2
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// UpgradeUnitInfo : Information about an upgrade unit.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UpgradeUnitInfo {
    /// The name of the upgrade unit
    #[serde(rename = "Name")]
    name: Option<::models::UpgradeUnitName>,
    /// The state of the upgrade unit.
    #[serde(rename = "State")]
    state: Option<::models::UpgradeUnitState>,
}

impl Default for UpgradeUnitInfo {
    fn default() -> Self {
        Self::new()
    }
}

impl UpgradeUnitInfo {
    /// Information about an upgrade unit.
    pub fn new() -> UpgradeUnitInfo {
        UpgradeUnitInfo {
            name: None,
            state: None,
        }
    }

    pub fn set_name(&mut self, name: ::models::UpgradeUnitName) {
        self.name = Some(name);
    }

    pub fn with_name(
        mut self,
        name: ::models::UpgradeUnitName,
    ) -> UpgradeUnitInfo {
        self.name = Some(name);
        self
    }

    pub fn name(&self) -> Option<&::models::UpgradeUnitName> {
        self.name.as_ref()
    }

    pub fn reset_name(&mut self) {
        self.name = None;
    }

    pub fn set_state(&mut self, state: ::models::UpgradeUnitState) {
        self.state = Some(state);
    }

    pub fn with_state(
        mut self,
        state: ::models::UpgradeUnitState,
    ) -> UpgradeUnitInfo {
        self.state = Some(state);
        self
    }

    pub fn state(&self) -> Option<&::models::UpgradeUnitState> {
        self.state.as_ref()
    }

    pub fn reset_state(&mut self) {
        self.state = None;
    }
}

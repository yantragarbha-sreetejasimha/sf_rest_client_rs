/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 8.2
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ApplicationUpdateDescription : Describes the parameters for updating an application instance.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ApplicationUpdateDescription {
    /// Flags indicating whether other properties are set. Each of the associated properties corresponds to a flag, specified below, which, if set, indicate that the property is specified. If flags are not specified for a certain property, the property will not be updated even if the new value is provided. This property can be a combination of those flags obtained using bitwise 'OR' operator. Exception is RemoveApplicationCapacity which cannot be specified along with other parameters. For example, if the provided value is 3 then the flags for MinimumNodes (1) and MaximumNodes (2) are set.  - None - Does not indicate any other properties are set. The value is 0. - MinimumNodes - Indicates whether the MinimumNodes property is set. The value is 1. - MaximumNodes - Indicates whether the MinimumNodes property is set. The value is  2. - ApplicationMetrics - Indicates whether the ApplicationMetrics property is set. The value is 4.
    #[serde(rename = "Flags")]
    flags: Option<String>,
    /// Used to clear all parameters related to Application Capacity for this application. | It is not possible to specify this parameter together with other Application Capacity parameters.
    #[serde(rename = "RemoveApplicationCapacity")]
    remove_application_capacity: Option<bool>,
    /// The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.
    #[serde(rename = "MinimumNodes")]
    minimum_nodes: Option<i64>,
    /// The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
    #[serde(rename = "MaximumNodes")]
    maximum_nodes: Option<i64>,
    /// List of application capacity metric description.
    #[serde(rename = "ApplicationMetrics")]
    application_metrics: Option<::models::ApplicationMetricDescriptionList>,
}

impl Default for ApplicationUpdateDescription {
    fn default() -> Self {
        Self::new()
    }
}

impl ApplicationUpdateDescription {
    /// Describes the parameters for updating an application instance.
    pub fn new() -> ApplicationUpdateDescription {
        ApplicationUpdateDescription {
            flags: None,
            remove_application_capacity: None,
            minimum_nodes: None,
            maximum_nodes: None,
            application_metrics: None,
        }
    }

    pub fn set_flags(&mut self, flags: String) {
        self.flags = Some(flags);
    }

    pub fn with_flags(mut self, flags: String) -> ApplicationUpdateDescription {
        self.flags = Some(flags);
        self
    }

    pub fn flags(&self) -> Option<&String> {
        self.flags.as_ref()
    }

    pub fn reset_flags(&mut self) {
        self.flags = None;
    }

    pub fn set_remove_application_capacity(
        &mut self,
        remove_application_capacity: bool,
    ) {
        self.remove_application_capacity = Some(remove_application_capacity);
    }

    pub fn with_remove_application_capacity(
        mut self,
        remove_application_capacity: bool,
    ) -> ApplicationUpdateDescription {
        self.remove_application_capacity = Some(remove_application_capacity);
        self
    }

    pub fn remove_application_capacity(&self) -> Option<&bool> {
        self.remove_application_capacity.as_ref()
    }

    pub fn reset_remove_application_capacity(&mut self) {
        self.remove_application_capacity = None;
    }

    pub fn set_minimum_nodes(&mut self, minimum_nodes: i64) {
        self.minimum_nodes = Some(minimum_nodes);
    }

    pub fn with_minimum_nodes(
        mut self,
        minimum_nodes: i64,
    ) -> ApplicationUpdateDescription {
        self.minimum_nodes = Some(minimum_nodes);
        self
    }

    pub fn minimum_nodes(&self) -> Option<&i64> {
        self.minimum_nodes.as_ref()
    }

    pub fn reset_minimum_nodes(&mut self) {
        self.minimum_nodes = None;
    }

    pub fn set_maximum_nodes(&mut self, maximum_nodes: i64) {
        self.maximum_nodes = Some(maximum_nodes);
    }

    pub fn with_maximum_nodes(
        mut self,
        maximum_nodes: i64,
    ) -> ApplicationUpdateDescription {
        self.maximum_nodes = Some(maximum_nodes);
        self
    }

    pub fn maximum_nodes(&self) -> Option<&i64> {
        self.maximum_nodes.as_ref()
    }

    pub fn reset_maximum_nodes(&mut self) {
        self.maximum_nodes = None;
    }

    pub fn set_application_metrics(
        &mut self,
        application_metrics: ::models::ApplicationMetricDescriptionList,
    ) {
        self.application_metrics = Some(application_metrics);
    }

    pub fn with_application_metrics(
        mut self,
        application_metrics: ::models::ApplicationMetricDescriptionList,
    ) -> ApplicationUpdateDescription {
        self.application_metrics = Some(application_metrics);
        self
    }

    pub fn application_metrics(
        &self,
    ) -> Option<&::models::ApplicationMetricDescriptionList> {
        self.application_metrics.as_ref()
    }

    pub fn reset_application_metrics(&mut self) {
        self.application_metrics = None;
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.4.0.36
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ExecutingFaultsChaosEvent : Describes a Chaos event that gets generated when Chaos has decided on the faults for an iteration. This Chaos event contains the details of the faults as a list of strings.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ExecutingFaultsChaosEvent {
    /// The kind of Chaos event.
    #[serde(rename = "Kind")]
    kind: ::models::ChaosEventKind,
    /// The UTC timestamp when this Chaos event was generated.
    #[serde(rename = "TimeStampUtc")]
    time_stamp_utc: String,
    /// List of string description of the faults that Chaos decided to execute in an iteration.
    #[serde(rename = "Faults")]
    faults: Option<Vec<String>>,
}

impl ExecutingFaultsChaosEvent {
    /// Describes a Chaos event that gets generated when Chaos has decided on the faults for an iteration. This Chaos event contains the details of the faults as a list of strings.
    pub fn new(
        kind: ::models::ChaosEventKind,
        time_stamp_utc: String,
    ) -> ExecutingFaultsChaosEvent {
        ExecutingFaultsChaosEvent {
            kind,
            time_stamp_utc,
            faults: None,
        }
    }

    pub fn set_kind(&mut self, kind: ::models::ChaosEventKind) {
        self.kind = kind;
    }

    pub fn with_kind(
        mut self,
        kind: ::models::ChaosEventKind,
    ) -> ExecutingFaultsChaosEvent {
        self.kind = kind;
        self
    }

    pub fn kind(&self) -> &::models::ChaosEventKind {
        &self.kind
    }

    pub fn set_time_stamp_utc(&mut self, time_stamp_utc: String) {
        self.time_stamp_utc = time_stamp_utc;
    }

    pub fn with_time_stamp_utc(
        mut self,
        time_stamp_utc: String,
    ) -> ExecutingFaultsChaosEvent {
        self.time_stamp_utc = time_stamp_utc;
        self
    }

    pub fn time_stamp_utc(&self) -> &String {
        &self.time_stamp_utc
    }

    pub fn set_faults(&mut self, faults: Vec<String>) {
        self.faults = Some(faults);
    }

    pub fn with_faults(
        mut self,
        faults: Vec<String>,
    ) -> ExecutingFaultsChaosEvent {
        self.faults = Some(faults);
        self
    }

    pub fn faults(&self) -> Option<&Vec<String>> {
        self.faults.as_ref()
    }

    pub fn reset_faults(&mut self) {
        self.faults = None;
    }
}

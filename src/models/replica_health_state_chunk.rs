/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.2.0.46
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ReplicaHealthStateChunk : Represents the health state chunk of a stateful service replica or a stateless service instance. The replica health state contains the replica ID and its aggregated health state.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ReplicaHealthStateChunk {
    /// The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
    #[serde(rename = "HealthState")]
    health_state: Option<::models::HealthState>,
    /// Id of a stateful service replica or a stateless service instance. This ID is used in the queries that apply to both stateful and stateless services. It is used by Service Fabric to uniquely identify a replica of a partition of a stateful service or an instance of a stateless service partition. It is unique within a partition and does not change for the lifetime of the replica or the instance. If a stateful replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the ID. If a stateless instance is failed over on the same or different node it will get a different value for the ID.
    #[serde(rename = "ReplicaOrInstanceId")]
    replica_or_instance_id: Option<::models::ReplicaOrInstanceId>,
}

impl Default for ReplicaHealthStateChunk {
    fn default() -> Self {
        Self::new()
    }
}

impl ReplicaHealthStateChunk {
    /// Represents the health state chunk of a stateful service replica or a stateless service instance. The replica health state contains the replica ID and its aggregated health state.
    pub fn new() -> ReplicaHealthStateChunk {
        ReplicaHealthStateChunk {
            health_state: None,
            replica_or_instance_id: None,
        }
    }

    pub fn set_health_state(&mut self, health_state: ::models::HealthState) {
        self.health_state = Some(health_state);
    }

    pub fn with_health_state(
        mut self,
        health_state: ::models::HealthState,
    ) -> ReplicaHealthStateChunk {
        self.health_state = Some(health_state);
        self
    }

    pub fn health_state(&self) -> Option<&::models::HealthState> {
        self.health_state.as_ref()
    }

    pub fn reset_health_state(&mut self) {
        self.health_state = None;
    }

    pub fn set_replica_or_instance_id(
        &mut self,
        replica_or_instance_id: ::models::ReplicaOrInstanceId,
    ) {
        self.replica_or_instance_id = Some(replica_or_instance_id);
    }

    pub fn with_replica_or_instance_id(
        mut self,
        replica_or_instance_id: ::models::ReplicaOrInstanceId,
    ) -> ReplicaHealthStateChunk {
        self.replica_or_instance_id = Some(replica_or_instance_id);
        self
    }

    pub fn replica_or_instance_id(
        &self,
    ) -> Option<&::models::ReplicaOrInstanceId> {
        self.replica_or_instance_id.as_ref()
    }

    pub fn reset_replica_or_instance_id(&mut self) {
        self.replica_or_instance_id = None;
    }
}

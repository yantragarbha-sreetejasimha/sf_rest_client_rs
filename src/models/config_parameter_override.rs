/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 8.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ConfigParameterOverride : Information about a configuration parameter override.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ConfigParameterOverride {
    /// Name of the section for the parameter override.
    #[serde(rename = "SectionName")]
    section_name: String,
    /// Name of the parameter that has been overridden.
    #[serde(rename = "ParameterName")]
    parameter_name: String,
    /// Value of the overridden parameter.
    #[serde(rename = "ParameterValue")]
    parameter_value: String,
    /// The duration until config override is considered as valid.
    #[serde(rename = "Timeout")]
    timeout: Option<String>,
    /// A value that indicates whether config override will be removed on upgrade or will still be considered as valid.
    #[serde(rename = "PersistAcrossUpgrade")]
    persist_across_upgrade: Option<bool>,
}

impl ConfigParameterOverride {
    /// Information about a configuration parameter override.
    pub fn new(
        section_name: String,
        parameter_name: String,
        parameter_value: String,
    ) -> ConfigParameterOverride {
        ConfigParameterOverride {
            section_name,
            parameter_name,
            parameter_value,
            timeout: None,
            persist_across_upgrade: None,
        }
    }

    pub fn set_section_name(&mut self, section_name: String) {
        self.section_name = section_name;
    }

    pub fn with_section_name(
        mut self,
        section_name: String,
    ) -> ConfigParameterOverride {
        self.section_name = section_name;
        self
    }

    pub fn section_name(&self) -> &String {
        &self.section_name
    }

    pub fn set_parameter_name(&mut self, parameter_name: String) {
        self.parameter_name = parameter_name;
    }

    pub fn with_parameter_name(
        mut self,
        parameter_name: String,
    ) -> ConfigParameterOverride {
        self.parameter_name = parameter_name;
        self
    }

    pub fn parameter_name(&self) -> &String {
        &self.parameter_name
    }

    pub fn set_parameter_value(&mut self, parameter_value: String) {
        self.parameter_value = parameter_value;
    }

    pub fn with_parameter_value(
        mut self,
        parameter_value: String,
    ) -> ConfigParameterOverride {
        self.parameter_value = parameter_value;
        self
    }

    pub fn parameter_value(&self) -> &String {
        &self.parameter_value
    }

    pub fn set_timeout(&mut self, timeout: String) {
        self.timeout = Some(timeout);
    }

    pub fn with_timeout(mut self, timeout: String) -> ConfigParameterOverride {
        self.timeout = Some(timeout);
        self
    }

    pub fn timeout(&self) -> Option<&String> {
        self.timeout.as_ref()
    }

    pub fn reset_timeout(&mut self) {
        self.timeout = None;
    }

    pub fn set_persist_across_upgrade(&mut self, persist_across_upgrade: bool) {
        self.persist_across_upgrade = Some(persist_across_upgrade);
    }

    pub fn with_persist_across_upgrade(
        mut self,
        persist_across_upgrade: bool,
    ) -> ConfigParameterOverride {
        self.persist_across_upgrade = Some(persist_across_upgrade);
        self
    }

    pub fn persist_across_upgrade(&self) -> Option<&bool> {
        self.persist_across_upgrade.as_ref()
    }

    pub fn reset_persist_across_upgrade(&mut self) {
        self.persist_across_upgrade = None;
    }
}

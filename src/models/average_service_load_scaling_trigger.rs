/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 8.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// AverageServiceLoadScalingTrigger : Represents a scaling policy related to an average load of a metric/resource of a service.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AverageServiceLoadScalingTrigger {
    /// Specifies the kind of scaling trigger
    #[serde(rename = "Kind")]
    kind: ::models::ScalingTriggerKind,
    /// The name of the metric for which usage should be tracked.
    #[serde(rename = "MetricName")]
    metric_name: String,
    /// The lower limit of the load below which a scale in operation should be performed.
    #[serde(rename = "LowerLoadThreshold")]
    lower_load_threshold: String,
    /// The upper limit of the load beyond which a scale out operation should be performed.
    #[serde(rename = "UpperLoadThreshold")]
    upper_load_threshold: String,
    /// The period in seconds on which a decision is made whether to scale or not.
    #[serde(rename = "ScaleIntervalInSeconds")]
    scale_interval_in_seconds: i64,
    /// Flag determines whether only the load of primary replica should be considered for scaling. If set to true, then trigger will only consider the load of primary replicas of stateful service.  If set to false, trigger will consider load of all replicas.  This parameter cannot be set to true for stateless service.
    #[serde(rename = "UseOnlyPrimaryLoad")]
    use_only_primary_load: bool,
}

impl AverageServiceLoadScalingTrigger {
    /// Represents a scaling policy related to an average load of a metric/resource of a service.
    pub fn new(
        kind: ::models::ScalingTriggerKind,
        metric_name: String,
        lower_load_threshold: String,
        upper_load_threshold: String,
        scale_interval_in_seconds: i64,
        use_only_primary_load: bool,
    ) -> AverageServiceLoadScalingTrigger {
        AverageServiceLoadScalingTrigger {
            kind,
            metric_name,
            lower_load_threshold,
            upper_load_threshold,
            scale_interval_in_seconds,
            use_only_primary_load,
        }
    }

    pub fn set_kind(&mut self, kind: ::models::ScalingTriggerKind) {
        self.kind = kind;
    }

    pub fn with_kind(
        mut self,
        kind: ::models::ScalingTriggerKind,
    ) -> AverageServiceLoadScalingTrigger {
        self.kind = kind;
        self
    }

    pub fn kind(&self) -> &::models::ScalingTriggerKind {
        &self.kind
    }

    pub fn set_metric_name(&mut self, metric_name: String) {
        self.metric_name = metric_name;
    }

    pub fn with_metric_name(
        mut self,
        metric_name: String,
    ) -> AverageServiceLoadScalingTrigger {
        self.metric_name = metric_name;
        self
    }

    pub fn metric_name(&self) -> &String {
        &self.metric_name
    }

    pub fn set_lower_load_threshold(&mut self, lower_load_threshold: String) {
        self.lower_load_threshold = lower_load_threshold;
    }

    pub fn with_lower_load_threshold(
        mut self,
        lower_load_threshold: String,
    ) -> AverageServiceLoadScalingTrigger {
        self.lower_load_threshold = lower_load_threshold;
        self
    }

    pub fn lower_load_threshold(&self) -> &String {
        &self.lower_load_threshold
    }

    pub fn set_upper_load_threshold(&mut self, upper_load_threshold: String) {
        self.upper_load_threshold = upper_load_threshold;
    }

    pub fn with_upper_load_threshold(
        mut self,
        upper_load_threshold: String,
    ) -> AverageServiceLoadScalingTrigger {
        self.upper_load_threshold = upper_load_threshold;
        self
    }

    pub fn upper_load_threshold(&self) -> &String {
        &self.upper_load_threshold
    }

    pub fn set_scale_interval_in_seconds(
        &mut self,
        scale_interval_in_seconds: i64,
    ) {
        self.scale_interval_in_seconds = scale_interval_in_seconds;
    }

    pub fn with_scale_interval_in_seconds(
        mut self,
        scale_interval_in_seconds: i64,
    ) -> AverageServiceLoadScalingTrigger {
        self.scale_interval_in_seconds = scale_interval_in_seconds;
        self
    }

    pub fn scale_interval_in_seconds(&self) -> &i64 {
        &self.scale_interval_in_seconds
    }

    pub fn set_use_only_primary_load(&mut self, use_only_primary_load: bool) {
        self.use_only_primary_load = use_only_primary_load;
    }

    pub fn with_use_only_primary_load(
        mut self,
        use_only_primary_load: bool,
    ) -> AverageServiceLoadScalingTrigger {
        self.use_only_primary_load = use_only_primary_load;
        self
    }

    pub fn use_only_primary_load(&self) -> &bool {
        &self.use_only_primary_load
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.5.0.36
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Chaos : Contains a description of Chaos.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Chaos {
    /// If Chaos is running, these are the parameters Chaos is running with.
    #[serde(rename = "ChaosParameters")]
    chaos_parameters: Option<::models::ChaosParameters>,
    /// Current status of the Chaos run.
    #[serde(rename = "Status")]
    status: Option<::models::ChaosStatus>,
    /// Current status of the schedule.
    #[serde(rename = "ScheduleStatus")]
    schedule_status: Option<::models::ChaosScheduleStatus>,
}

impl Default for Chaos {
    fn default() -> Self {
        Self::new()
    }
}

impl Chaos {
    /// Contains a description of Chaos.
    pub fn new() -> Chaos {
        Chaos {
            chaos_parameters: None,
            status: None,
            schedule_status: None,
        }
    }

    pub fn set_chaos_parameters(
        &mut self,
        chaos_parameters: ::models::ChaosParameters,
    ) {
        self.chaos_parameters = Some(chaos_parameters);
    }

    pub fn with_chaos_parameters(
        mut self,
        chaos_parameters: ::models::ChaosParameters,
    ) -> Chaos {
        self.chaos_parameters = Some(chaos_parameters);
        self
    }

    pub fn chaos_parameters(&self) -> Option<&::models::ChaosParameters> {
        self.chaos_parameters.as_ref()
    }

    pub fn reset_chaos_parameters(&mut self) {
        self.chaos_parameters = None;
    }

    pub fn set_status(&mut self, status: ::models::ChaosStatus) {
        self.status = Some(status);
    }

    pub fn with_status(mut self, status: ::models::ChaosStatus) -> Chaos {
        self.status = Some(status);
        self
    }

    pub fn status(&self) -> Option<&::models::ChaosStatus> {
        self.status.as_ref()
    }

    pub fn reset_status(&mut self) {
        self.status = None;
    }

    pub fn set_schedule_status(
        &mut self,
        schedule_status: ::models::ChaosScheduleStatus,
    ) {
        self.schedule_status = Some(schedule_status);
    }

    pub fn with_schedule_status(
        mut self,
        schedule_status: ::models::ChaosScheduleStatus,
    ) -> Chaos {
        self.schedule_status = Some(schedule_status);
        self
    }

    pub fn schedule_status(&self) -> Option<&::models::ChaosScheduleStatus> {
        self.schedule_status.as_ref()
    }

    pub fn reset_schedule_status(&mut self) {
        self.schedule_status = None;
    }
}

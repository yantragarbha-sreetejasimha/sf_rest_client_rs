/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.1.0.45
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ReliableCollectionsRef : Specifying this parameter adds support for reliable collections

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ReliableCollectionsRef {
    /// Name of ReliableCollection resource. Right now it's not used and you can use any string.
    #[serde(rename = "name")]
    name: String,
    /// False (the default) if ReliableCollections state is persisted to disk as usual. True if you do not want to persist state, in which case replication is still enabled and you can use ReliableCollections as distributed cache.
    #[serde(rename = "doNotPersistState")]
    do_not_persist_state: Option<bool>,
}

impl ReliableCollectionsRef {
    /// Specifying this parameter adds support for reliable collections
    pub fn new(name: String) -> ReliableCollectionsRef {
        ReliableCollectionsRef {
            name,
            do_not_persist_state: None,
        }
    }

    pub fn set_name(&mut self, name: String) {
        self.name = name;
    }

    pub fn with_name(mut self, name: String) -> ReliableCollectionsRef {
        self.name = name;
        self
    }

    pub fn name(&self) -> &String {
        &self.name
    }

    pub fn set_do_not_persist_state(&mut self, do_not_persist_state: bool) {
        self.do_not_persist_state = Some(do_not_persist_state);
    }

    pub fn with_do_not_persist_state(
        mut self,
        do_not_persist_state: bool,
    ) -> ReliableCollectionsRef {
        self.do_not_persist_state = Some(do_not_persist_state);
        self
    }

    pub fn do_not_persist_state(&self) -> Option<&bool> {
        self.do_not_persist_state.as_ref()
    }

    pub fn reset_do_not_persist_state(&mut self) {
        self.do_not_persist_state = None;
    }
}

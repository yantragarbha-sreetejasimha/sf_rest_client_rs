/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.2.0.46
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ServicePlacementPreferPrimaryDomainPolicyDescription : Describes the policy to be used for placement of a Service Fabric service where the service's Primary replicas should optimally be placed in a particular domain.  This placement policy is usually used with fault domains in scenarios where the Service Fabric cluster is geographically distributed in order to indicate that a service's primary replica should be located in a particular fault domain, which in geo-distributed scenarios usually aligns with regional or datacenter boundaries. Note that since this is an optimization it is possible that the Primary replica may not end up located in this domain due to failures, capacity limits, or other constraints.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ServicePlacementPreferPrimaryDomainPolicyDescription {
    /// The type of placement policy for a service fabric service. Following are the possible values.
    #[serde(rename = "Type")]
    _type: ::models::ServicePlacementPolicyType,
    /// The name of the domain that should used for placement as per this policy.
    #[serde(rename = "DomainName")]
    domain_name: Option<String>,
}

impl ServicePlacementPreferPrimaryDomainPolicyDescription {
    /// Describes the policy to be used for placement of a Service Fabric service where the service's Primary replicas should optimally be placed in a particular domain.  This placement policy is usually used with fault domains in scenarios where the Service Fabric cluster is geographically distributed in order to indicate that a service's primary replica should be located in a particular fault domain, which in geo-distributed scenarios usually aligns with regional or datacenter boundaries. Note that since this is an optimization it is possible that the Primary replica may not end up located in this domain due to failures, capacity limits, or other constraints.
    pub fn new(
        _type: ::models::ServicePlacementPolicyType,
    ) -> ServicePlacementPreferPrimaryDomainPolicyDescription {
        ServicePlacementPreferPrimaryDomainPolicyDescription {
            _type,
            domain_name: None,
        }
    }

    pub fn set_type(&mut self, _type: ::models::ServicePlacementPolicyType) {
        self._type = _type;
    }

    pub fn with_type(
        mut self,
        _type: ::models::ServicePlacementPolicyType,
    ) -> ServicePlacementPreferPrimaryDomainPolicyDescription {
        self._type = _type;
        self
    }

    pub fn _type(&self) -> &::models::ServicePlacementPolicyType {
        &self._type
    }

    pub fn set_domain_name(&mut self, domain_name: String) {
        self.domain_name = Some(domain_name);
    }

    pub fn with_domain_name(
        mut self,
        domain_name: String,
    ) -> ServicePlacementPreferPrimaryDomainPolicyDescription {
        self.domain_name = Some(domain_name);
        self
    }

    pub fn domain_name(&self) -> Option<&String> {
        self.domain_name.as_ref()
    }

    pub fn reset_domain_name(&mut self) {
        self.domain_name = None;
    }
}

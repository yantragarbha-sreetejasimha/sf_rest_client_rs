/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.0.0.42
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// RegistryCredential : Credential information to connect to container registry.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RegistryCredential {
    /// The user name to connect to container registry.
    #[serde(rename = "RegistryUserName")]
    registry_user_name: Option<String>,
    /// The password for supplied username to connect to container registry.
    #[serde(rename = "RegistryPassword")]
    registry_password: Option<String>,
    /// Indicates that supplied container registry password is encrypted.
    #[serde(rename = "PasswordEncrypted")]
    password_encrypted: Option<bool>,
}

impl Default for RegistryCredential {
    fn default() -> Self {
        Self::new()
    }
}

impl RegistryCredential {
    /// Credential information to connect to container registry.
    pub fn new() -> RegistryCredential {
        RegistryCredential {
            registry_user_name: None,
            registry_password: None,
            password_encrypted: None,
        }
    }

    pub fn set_registry_user_name(&mut self, registry_user_name: String) {
        self.registry_user_name = Some(registry_user_name);
    }

    pub fn with_registry_user_name(
        mut self,
        registry_user_name: String,
    ) -> RegistryCredential {
        self.registry_user_name = Some(registry_user_name);
        self
    }

    pub fn registry_user_name(&self) -> Option<&String> {
        self.registry_user_name.as_ref()
    }

    pub fn reset_registry_user_name(&mut self) {
        self.registry_user_name = None;
    }

    pub fn set_registry_password(&mut self, registry_password: String) {
        self.registry_password = Some(registry_password);
    }

    pub fn with_registry_password(
        mut self,
        registry_password: String,
    ) -> RegistryCredential {
        self.registry_password = Some(registry_password);
        self
    }

    pub fn registry_password(&self) -> Option<&String> {
        self.registry_password.as_ref()
    }

    pub fn reset_registry_password(&mut self) {
        self.registry_password = None;
    }

    pub fn set_password_encrypted(&mut self, password_encrypted: bool) {
        self.password_encrypted = Some(password_encrypted);
    }

    pub fn with_password_encrypted(
        mut self,
        password_encrypted: bool,
    ) -> RegistryCredential {
        self.password_encrypted = Some(password_encrypted);
        self
    }

    pub fn password_encrypted(&self) -> Option<&bool> {
        self.password_encrypted.as_ref()
    }

    pub fn reset_password_encrypted(&mut self) {
        self.password_encrypted = None;
    }
}

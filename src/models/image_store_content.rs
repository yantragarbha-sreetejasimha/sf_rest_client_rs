/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.2.0.46
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ImageStoreContent : Information about the image store content.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ImageStoreContent {
    /// The list of image store file info objects represents files found under the given image store relative path.
    #[serde(rename = "StoreFiles")]
    store_files: Option<Vec<::models::FileInfo>>,
    /// The list of image store folder info objects represents subfolders found under the given image store relative path.
    #[serde(rename = "StoreFolders")]
    store_folders: Option<Vec<::models::FolderInfo>>,
}

impl Default for ImageStoreContent {
    fn default() -> Self {
        Self::new()
    }
}

impl ImageStoreContent {
    /// Information about the image store content.
    pub fn new() -> ImageStoreContent {
        ImageStoreContent {
            store_files: None,
            store_folders: None,
        }
    }

    pub fn set_store_files(&mut self, store_files: Vec<::models::FileInfo>) {
        self.store_files = Some(store_files);
    }

    pub fn with_store_files(
        mut self,
        store_files: Vec<::models::FileInfo>,
    ) -> ImageStoreContent {
        self.store_files = Some(store_files);
        self
    }

    pub fn store_files(&self) -> Option<&Vec<::models::FileInfo>> {
        self.store_files.as_ref()
    }

    pub fn reset_store_files(&mut self) {
        self.store_files = None;
    }

    pub fn set_store_folders(
        &mut self,
        store_folders: Vec<::models::FolderInfo>,
    ) {
        self.store_folders = Some(store_folders);
    }

    pub fn with_store_folders(
        mut self,
        store_folders: Vec<::models::FolderInfo>,
    ) -> ImageStoreContent {
        self.store_folders = Some(store_folders);
        self
    }

    pub fn store_folders(&self) -> Option<&Vec<::models::FolderInfo>> {
        self.store_folders.as_ref()
    }

    pub fn reset_store_folders(&mut self) {
        self.store_folders = None;
    }
}

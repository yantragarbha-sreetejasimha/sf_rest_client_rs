/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.5.0.36
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ChaosScheduleJob : Defines a repetition rule and parameters of Chaos to be used with the Chaos Schedule.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ChaosScheduleJob {
    /// A reference to which Chaos Parameters of the Chaos Schedule to use.
    #[serde(rename = "ChaosParameters")]
    chaos_parameters: Option<String>,
    /// Defines the days of the week that a Chaos Schedule Job will run for.
    #[serde(rename = "Days")]
    days: Option<::models::ChaosScheduleJobActiveDaysOfWeek>,
    /// A list of Time Ranges that specify when during active days that this job will run. The times are interpreted as UTC.
    #[serde(rename = "Times")]
    times: Option<Vec<::models::TimeRange>>,
}

impl Default for ChaosScheduleJob {
    fn default() -> Self {
        Self::new()
    }
}

impl ChaosScheduleJob {
    /// Defines a repetition rule and parameters of Chaos to be used with the Chaos Schedule.
    pub fn new() -> ChaosScheduleJob {
        ChaosScheduleJob {
            chaos_parameters: None,
            days: None,
            times: None,
        }
    }

    pub fn set_chaos_parameters(&mut self, chaos_parameters: String) {
        self.chaos_parameters = Some(chaos_parameters);
    }

    pub fn with_chaos_parameters(
        mut self,
        chaos_parameters: String,
    ) -> ChaosScheduleJob {
        self.chaos_parameters = Some(chaos_parameters);
        self
    }

    pub fn chaos_parameters(&self) -> Option<&String> {
        self.chaos_parameters.as_ref()
    }

    pub fn reset_chaos_parameters(&mut self) {
        self.chaos_parameters = None;
    }

    pub fn set_days(
        &mut self,
        days: ::models::ChaosScheduleJobActiveDaysOfWeek,
    ) {
        self.days = Some(days);
    }

    pub fn with_days(
        mut self,
        days: ::models::ChaosScheduleJobActiveDaysOfWeek,
    ) -> ChaosScheduleJob {
        self.days = Some(days);
        self
    }

    pub fn days(&self) -> Option<&::models::ChaosScheduleJobActiveDaysOfWeek> {
        self.days.as_ref()
    }

    pub fn reset_days(&mut self) {
        self.days = None;
    }

    pub fn set_times(&mut self, times: Vec<::models::TimeRange>) {
        self.times = Some(times);
    }

    pub fn with_times(
        mut self,
        times: Vec<::models::TimeRange>,
    ) -> ChaosScheduleJob {
        self.times = Some(times);
        self
    }

    pub fn times(&self) -> Option<&Vec<::models::TimeRange>> {
        self.times.as_ref()
    }

    pub fn reset_times(&mut self) {
        self.times = None;
    }
}

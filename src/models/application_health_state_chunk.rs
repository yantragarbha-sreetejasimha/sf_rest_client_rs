/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.4.0.36
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ApplicationHealthStateChunk : Represents the health state chunk of a application. The application health state chunk contains the application name, its aggregated health state and any children services and deployed applications that respect the filters in cluster health chunk query description.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ApplicationHealthStateChunk {
    /// The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
    #[serde(rename = "HealthState")]
    health_state: Option<::models::HealthState>,
    /// The name of the application, including the 'fabric:' URI scheme.
    #[serde(rename = "ApplicationName")]
    application_name: Option<::models::ApplicationName>,
    /// The application type name as defined in the application manifest.
    #[serde(rename = "ApplicationTypeName")]
    application_type_name: Option<::models::ApplicationTypeName>,
    /// The list of service health state chunks in the cluster that respect the filters in the cluster health chunk query description.
    #[serde(rename = "ServiceHealthStateChunks")]
    service_health_state_chunks: Option<::models::ServiceHealthStateChunkList>,
    /// The list of deployed application health state chunks in the cluster that respect the filters in the cluster health chunk query description.
    #[serde(rename = "DeployedApplicationHealthStateChunks")]
    deployed_application_health_state_chunks:
        Option<::models::DeployedApplicationHealthStateChunkList>,
}

impl Default for ApplicationHealthStateChunk {
    fn default() -> Self {
        Self::new()
    }
}

impl ApplicationHealthStateChunk {
    /// Represents the health state chunk of a application. The application health state chunk contains the application name, its aggregated health state and any children services and deployed applications that respect the filters in cluster health chunk query description.
    pub fn new() -> ApplicationHealthStateChunk {
        ApplicationHealthStateChunk {
            health_state: None,
            application_name: None,
            application_type_name: None,
            service_health_state_chunks: None,
            deployed_application_health_state_chunks: None,
        }
    }

    pub fn set_health_state(&mut self, health_state: ::models::HealthState) {
        self.health_state = Some(health_state);
    }

    pub fn with_health_state(
        mut self,
        health_state: ::models::HealthState,
    ) -> ApplicationHealthStateChunk {
        self.health_state = Some(health_state);
        self
    }

    pub fn health_state(&self) -> Option<&::models::HealthState> {
        self.health_state.as_ref()
    }

    pub fn reset_health_state(&mut self) {
        self.health_state = None;
    }

    pub fn set_application_name(
        &mut self,
        application_name: ::models::ApplicationName,
    ) {
        self.application_name = Some(application_name);
    }

    pub fn with_application_name(
        mut self,
        application_name: ::models::ApplicationName,
    ) -> ApplicationHealthStateChunk {
        self.application_name = Some(application_name);
        self
    }

    pub fn application_name(&self) -> Option<&::models::ApplicationName> {
        self.application_name.as_ref()
    }

    pub fn reset_application_name(&mut self) {
        self.application_name = None;
    }

    pub fn set_application_type_name(
        &mut self,
        application_type_name: ::models::ApplicationTypeName,
    ) {
        self.application_type_name = Some(application_type_name);
    }

    pub fn with_application_type_name(
        mut self,
        application_type_name: ::models::ApplicationTypeName,
    ) -> ApplicationHealthStateChunk {
        self.application_type_name = Some(application_type_name);
        self
    }

    pub fn application_type_name(
        &self,
    ) -> Option<&::models::ApplicationTypeName> {
        self.application_type_name.as_ref()
    }

    pub fn reset_application_type_name(&mut self) {
        self.application_type_name = None;
    }

    pub fn set_service_health_state_chunks(
        &mut self,
        service_health_state_chunks: ::models::ServiceHealthStateChunkList,
    ) {
        self.service_health_state_chunks = Some(service_health_state_chunks);
    }

    pub fn with_service_health_state_chunks(
        mut self,
        service_health_state_chunks: ::models::ServiceHealthStateChunkList,
    ) -> ApplicationHealthStateChunk {
        self.service_health_state_chunks = Some(service_health_state_chunks);
        self
    }

    pub fn service_health_state_chunks(
        &self,
    ) -> Option<&::models::ServiceHealthStateChunkList> {
        self.service_health_state_chunks.as_ref()
    }

    pub fn reset_service_health_state_chunks(&mut self) {
        self.service_health_state_chunks = None;
    }

    pub fn set_deployed_application_health_state_chunks(
        &mut self,
        deployed_application_health_state_chunks: ::models::DeployedApplicationHealthStateChunkList,
    ) {
        self.deployed_application_health_state_chunks =
            Some(deployed_application_health_state_chunks);
    }

    pub fn with_deployed_application_health_state_chunks(
        mut self,
        deployed_application_health_state_chunks: ::models::DeployedApplicationHealthStateChunkList,
    ) -> ApplicationHealthStateChunk {
        self.deployed_application_health_state_chunks =
            Some(deployed_application_health_state_chunks);
        self
    }

    pub fn deployed_application_health_state_chunks(
        &self,
    ) -> Option<&::models::DeployedApplicationHealthStateChunkList> {
        self.deployed_application_health_state_chunks.as_ref()
    }

    pub fn reset_deployed_application_health_state_chunks(&mut self) {
        self.deployed_application_health_state_chunks = None;
    }
}

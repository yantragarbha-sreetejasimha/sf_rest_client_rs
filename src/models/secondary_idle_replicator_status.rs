/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.3.0.9
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// SecondaryIdleReplicatorStatus : Status of the secondary replicator when it is in idle mode and is being built by the primary.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SecondaryIdleReplicatorStatus {
    /// The role of a replica of a stateful service.
    #[serde(rename = "Kind")]
    kind: ::models::ReplicaRole,
    /// Details about the replication queue on the secondary replicator.
    #[serde(rename = "ReplicationQueueStatus")]
    replication_queue_status: Option<::models::ReplicatorQueueStatus>,
    /// The last time-stamp (UTC) at which a replication operation was received from the primary. UTC 0 represents an invalid value, indicating that a replication operation message was never received.
    #[serde(rename = "LastReplicationOperationReceivedTimeUtc")]
    last_replication_operation_received_time_utc: Option<String>,
    /// Value that indicates whether the replica is currently being built.
    #[serde(rename = "IsInBuild")]
    is_in_build: Option<bool>,
    /// Details about the copy queue on the secondary replicator.
    #[serde(rename = "CopyQueueStatus")]
    copy_queue_status: Option<::models::ReplicatorQueueStatus>,
    /// The last time-stamp (UTC) at which a copy operation was received from the primary. UTC 0 represents an invalid value, indicating that a copy operation message was never received.
    #[serde(rename = "LastCopyOperationReceivedTimeUtc")]
    last_copy_operation_received_time_utc: Option<String>,
    /// The last time-stamp (UTC) at which an acknowledgment was sent to the primary replicator. UTC 0 represents an invalid value, indicating that an acknowledgment message was never sent.
    #[serde(rename = "LastAcknowledgementSentTimeUtc")]
    last_acknowledgement_sent_time_utc: Option<String>,
}

impl SecondaryIdleReplicatorStatus {
    /// Status of the secondary replicator when it is in idle mode and is being built by the primary.
    pub fn new(kind: ::models::ReplicaRole) -> SecondaryIdleReplicatorStatus {
        SecondaryIdleReplicatorStatus {
            kind,
            replication_queue_status: None,
            last_replication_operation_received_time_utc: None,
            is_in_build: None,
            copy_queue_status: None,
            last_copy_operation_received_time_utc: None,
            last_acknowledgement_sent_time_utc: None,
        }
    }

    pub fn set_kind(&mut self, kind: ::models::ReplicaRole) {
        self.kind = kind;
    }

    pub fn with_kind(
        mut self,
        kind: ::models::ReplicaRole,
    ) -> SecondaryIdleReplicatorStatus {
        self.kind = kind;
        self
    }

    pub fn kind(&self) -> &::models::ReplicaRole {
        &self.kind
    }

    pub fn set_replication_queue_status(
        &mut self,
        replication_queue_status: ::models::ReplicatorQueueStatus,
    ) {
        self.replication_queue_status = Some(replication_queue_status);
    }

    pub fn with_replication_queue_status(
        mut self,
        replication_queue_status: ::models::ReplicatorQueueStatus,
    ) -> SecondaryIdleReplicatorStatus {
        self.replication_queue_status = Some(replication_queue_status);
        self
    }

    pub fn replication_queue_status(
        &self,
    ) -> Option<&::models::ReplicatorQueueStatus> {
        self.replication_queue_status.as_ref()
    }

    pub fn reset_replication_queue_status(&mut self) {
        self.replication_queue_status = None;
    }

    pub fn set_last_replication_operation_received_time_utc(
        &mut self,
        last_replication_operation_received_time_utc: String,
    ) {
        self.last_replication_operation_received_time_utc =
            Some(last_replication_operation_received_time_utc);
    }

    pub fn with_last_replication_operation_received_time_utc(
        mut self,
        last_replication_operation_received_time_utc: String,
    ) -> SecondaryIdleReplicatorStatus {
        self.last_replication_operation_received_time_utc =
            Some(last_replication_operation_received_time_utc);
        self
    }

    pub fn last_replication_operation_received_time_utc(
        &self,
    ) -> Option<&String> {
        self.last_replication_operation_received_time_utc.as_ref()
    }

    pub fn reset_last_replication_operation_received_time_utc(&mut self) {
        self.last_replication_operation_received_time_utc = None;
    }

    pub fn set_is_in_build(&mut self, is_in_build: bool) {
        self.is_in_build = Some(is_in_build);
    }

    pub fn with_is_in_build(
        mut self,
        is_in_build: bool,
    ) -> SecondaryIdleReplicatorStatus {
        self.is_in_build = Some(is_in_build);
        self
    }

    pub fn is_in_build(&self) -> Option<&bool> {
        self.is_in_build.as_ref()
    }

    pub fn reset_is_in_build(&mut self) {
        self.is_in_build = None;
    }

    pub fn set_copy_queue_status(
        &mut self,
        copy_queue_status: ::models::ReplicatorQueueStatus,
    ) {
        self.copy_queue_status = Some(copy_queue_status);
    }

    pub fn with_copy_queue_status(
        mut self,
        copy_queue_status: ::models::ReplicatorQueueStatus,
    ) -> SecondaryIdleReplicatorStatus {
        self.copy_queue_status = Some(copy_queue_status);
        self
    }

    pub fn copy_queue_status(
        &self,
    ) -> Option<&::models::ReplicatorQueueStatus> {
        self.copy_queue_status.as_ref()
    }

    pub fn reset_copy_queue_status(&mut self) {
        self.copy_queue_status = None;
    }

    pub fn set_last_copy_operation_received_time_utc(
        &mut self,
        last_copy_operation_received_time_utc: String,
    ) {
        self.last_copy_operation_received_time_utc =
            Some(last_copy_operation_received_time_utc);
    }

    pub fn with_last_copy_operation_received_time_utc(
        mut self,
        last_copy_operation_received_time_utc: String,
    ) -> SecondaryIdleReplicatorStatus {
        self.last_copy_operation_received_time_utc =
            Some(last_copy_operation_received_time_utc);
        self
    }

    pub fn last_copy_operation_received_time_utc(&self) -> Option<&String> {
        self.last_copy_operation_received_time_utc.as_ref()
    }

    pub fn reset_last_copy_operation_received_time_utc(&mut self) {
        self.last_copy_operation_received_time_utc = None;
    }

    pub fn set_last_acknowledgement_sent_time_utc(
        &mut self,
        last_acknowledgement_sent_time_utc: String,
    ) {
        self.last_acknowledgement_sent_time_utc =
            Some(last_acknowledgement_sent_time_utc);
    }

    pub fn with_last_acknowledgement_sent_time_utc(
        mut self,
        last_acknowledgement_sent_time_utc: String,
    ) -> SecondaryIdleReplicatorStatus {
        self.last_acknowledgement_sent_time_utc =
            Some(last_acknowledgement_sent_time_utc);
        self
    }

    pub fn last_acknowledgement_sent_time_utc(&self) -> Option<&String> {
        self.last_acknowledgement_sent_time_utc.as_ref()
    }

    pub fn reset_last_acknowledgement_sent_time_utc(&mut self) {
        self.last_acknowledgement_sent_time_utc = None;
    }
}

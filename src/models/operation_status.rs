/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.0.0.42
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// OperationStatus : Contains the OperationId, OperationState, and OperationType for user-induced operations.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OperationStatus {
    /// A GUID that identifies a call to this API.  This is also passed into the corresponding GetProgress API.
    #[serde(rename = "OperationId")]
    operation_id: Option<::models::OperationId>,
    /// The state of the operation.
    #[serde(rename = "State")]
    state: Option<::models::OperationState>,
    /// The type of the operation.
    #[serde(rename = "Type")]
    _type: Option<::models::OperationType>,
}

impl Default for OperationStatus {
    fn default() -> Self {
        Self::new()
    }
}

impl OperationStatus {
    /// Contains the OperationId, OperationState, and OperationType for user-induced operations.
    pub fn new() -> OperationStatus {
        OperationStatus {
            operation_id: None,
            state: None,
            _type: None,
        }
    }

    pub fn set_operation_id(&mut self, operation_id: ::models::OperationId) {
        self.operation_id = Some(operation_id);
    }

    pub fn with_operation_id(
        mut self,
        operation_id: ::models::OperationId,
    ) -> OperationStatus {
        self.operation_id = Some(operation_id);
        self
    }

    pub fn operation_id(&self) -> Option<&::models::OperationId> {
        self.operation_id.as_ref()
    }

    pub fn reset_operation_id(&mut self) {
        self.operation_id = None;
    }

    pub fn set_state(&mut self, state: ::models::OperationState) {
        self.state = Some(state);
    }

    pub fn with_state(
        mut self,
        state: ::models::OperationState,
    ) -> OperationStatus {
        self.state = Some(state);
        self
    }

    pub fn state(&self) -> Option<&::models::OperationState> {
        self.state.as_ref()
    }

    pub fn reset_state(&mut self) {
        self.state = None;
    }

    pub fn set_type(&mut self, _type: ::models::OperationType) {
        self._type = Some(_type);
    }

    pub fn with_type(
        mut self,
        _type: ::models::OperationType,
    ) -> OperationStatus {
        self._type = Some(_type);
        self
    }

    pub fn _type(&self) -> Option<&::models::OperationType> {
        self._type.as_ref()
    }

    pub fn reset_type(&mut self) {
        self._type = None;
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.1.0.45
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// CheckExistsPropertyBatchOperation : Represents a PropertyBatchOperation that compares the Boolean existence of a property with the Exists argument. The PropertyBatchOperation operation fails if the property's existence is not equal to the Exists argument. The CheckExistsPropertyBatchOperation is generally used as a precondition for the write operations in the batch. Note that if one PropertyBatchOperation in a PropertyBatch fails, the entire batch fails and cannot be committed in a transactional manner.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CheckExistsPropertyBatchOperation {
    /// The kind of property batch operation, determined by the operation to be performed. The following are the possible values.
    #[serde(rename = "Kind")]
    kind: ::models::PropertyBatchOperationKind,
    /// The name of the Service Fabric property.
    #[serde(rename = "PropertyName")]
    property_name: ::models::PropertyName,
    /// Whether or not the property should exist for the operation to pass.
    #[serde(rename = "Exists")]
    exists: bool,
}

impl CheckExistsPropertyBatchOperation {
    /// Represents a PropertyBatchOperation that compares the Boolean existence of a property with the Exists argument. The PropertyBatchOperation operation fails if the property's existence is not equal to the Exists argument. The CheckExistsPropertyBatchOperation is generally used as a precondition for the write operations in the batch. Note that if one PropertyBatchOperation in a PropertyBatch fails, the entire batch fails and cannot be committed in a transactional manner.
    pub fn new(
        kind: ::models::PropertyBatchOperationKind,
        property_name: ::models::PropertyName,
        exists: bool,
    ) -> CheckExistsPropertyBatchOperation {
        CheckExistsPropertyBatchOperation {
            kind,
            property_name,
            exists,
        }
    }

    pub fn set_kind(&mut self, kind: ::models::PropertyBatchOperationKind) {
        self.kind = kind;
    }

    pub fn with_kind(
        mut self,
        kind: ::models::PropertyBatchOperationKind,
    ) -> CheckExistsPropertyBatchOperation {
        self.kind = kind;
        self
    }

    pub fn kind(&self) -> &::models::PropertyBatchOperationKind {
        &self.kind
    }

    pub fn set_property_name(&mut self, property_name: ::models::PropertyName) {
        self.property_name = property_name;
    }

    pub fn with_property_name(
        mut self,
        property_name: ::models::PropertyName,
    ) -> CheckExistsPropertyBatchOperation {
        self.property_name = property_name;
        self
    }

    pub fn property_name(&self) -> &::models::PropertyName {
        &self.property_name
    }

    pub fn set_exists(&mut self, exists: bool) {
        self.exists = exists;
    }

    pub fn with_exists(
        mut self,
        exists: bool,
    ) -> CheckExistsPropertyBatchOperation {
        self.exists = exists;
        self
    }

    pub fn exists(&self) -> &bool {
        &self.exists
    }
}

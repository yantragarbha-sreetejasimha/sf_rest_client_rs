/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.1.0.45
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ProbeHttpGet : Http probe for the container.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ProbeHttpGet {
    /// Port to access for probe.
    #[serde(rename = "port")]
    port: i32,
    /// Path to access on the HTTP request.
    #[serde(rename = "path")]
    path: Option<String>,
    /// Host IP to connect to.
    #[serde(rename = "host")]
    host: Option<String>,
    /// Headers to set in the request.
    #[serde(rename = "httpHeaders")]
    http_headers: Option<Vec<::models::ProbeHttpGetHeaders>>,
    /// Scheme for the http probe. Can be Http or Https.
    #[serde(rename = "scheme")]
    scheme: Option<String>,
}

impl ProbeHttpGet {
    /// Http probe for the container.
    pub fn new(port: i32) -> ProbeHttpGet {
        ProbeHttpGet {
            port,
            path: None,
            host: None,
            http_headers: None,
            scheme: None,
        }
    }

    pub fn set_port(&mut self, port: i32) {
        self.port = port;
    }

    pub fn with_port(mut self, port: i32) -> ProbeHttpGet {
        self.port = port;
        self
    }

    pub fn port(&self) -> &i32 {
        &self.port
    }

    pub fn set_path(&mut self, path: String) {
        self.path = Some(path);
    }

    pub fn with_path(mut self, path: String) -> ProbeHttpGet {
        self.path = Some(path);
        self
    }

    pub fn path(&self) -> Option<&String> {
        self.path.as_ref()
    }

    pub fn reset_path(&mut self) {
        self.path = None;
    }

    pub fn set_host(&mut self, host: String) {
        self.host = Some(host);
    }

    pub fn with_host(mut self, host: String) -> ProbeHttpGet {
        self.host = Some(host);
        self
    }

    pub fn host(&self) -> Option<&String> {
        self.host.as_ref()
    }

    pub fn reset_host(&mut self) {
        self.host = None;
    }

    pub fn set_http_headers(
        &mut self,
        http_headers: Vec<::models::ProbeHttpGetHeaders>,
    ) {
        self.http_headers = Some(http_headers);
    }

    pub fn with_http_headers(
        mut self,
        http_headers: Vec<::models::ProbeHttpGetHeaders>,
    ) -> ProbeHttpGet {
        self.http_headers = Some(http_headers);
        self
    }

    pub fn http_headers(&self) -> Option<&Vec<::models::ProbeHttpGetHeaders>> {
        self.http_headers.as_ref()
    }

    pub fn reset_http_headers(&mut self) {
        self.http_headers = None;
    }

    pub fn set_scheme(&mut self, scheme: String) {
        self.scheme = Some(scheme);
    }

    pub fn with_scheme(mut self, scheme: String) -> ProbeHttpGet {
        self.scheme = Some(scheme);
        self
    }

    pub fn scheme(&self) -> Option<&String> {
        self.scheme.as_ref()
    }

    pub fn reset_scheme(&mut self) {
        self.scheme = None;
    }
}

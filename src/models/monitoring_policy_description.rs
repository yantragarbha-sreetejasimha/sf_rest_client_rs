/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 8.2
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// MonitoringPolicyDescription : Describes the parameters for monitoring an upgrade in Monitored mode.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MonitoringPolicyDescription {
    /// The compensating action to perform when a Monitored upgrade encounters monitoring policy or health policy violations. Invalid indicates the failure action is invalid. Rollback specifies that the upgrade will start rolling back automatically. Manual indicates that the upgrade will switch to UnmonitoredManual upgrade mode.
    #[serde(rename = "FailureAction")]
    failure_action: Option<::models::FailureAction>,
    /// The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
    #[serde(rename = "HealthCheckWaitDurationInMilliseconds")]
    health_check_wait_duration_in_milliseconds:
        Option<::models::HealthCheckWaitDuration>,
    /// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
    #[serde(rename = "HealthCheckStableDurationInMilliseconds")]
    health_check_stable_duration_in_milliseconds:
        Option<::models::HealthCheckStableDuration>,
    /// The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
    #[serde(rename = "HealthCheckRetryTimeoutInMilliseconds")]
    health_check_retry_timeout_in_milliseconds:
        Option<::models::HealthCheckRetryTimeout>,
    /// The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
    #[serde(rename = "UpgradeTimeoutInMilliseconds")]
    upgrade_timeout_in_milliseconds: Option<::models::UpgradeTimeout>,
    /// The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
    #[serde(rename = "UpgradeDomainTimeoutInMilliseconds")]
    upgrade_domain_timeout_in_milliseconds:
        Option<::models::UpgradeDomainTimeout>,
}

impl Default for MonitoringPolicyDescription {
    fn default() -> Self {
        Self::new()
    }
}

impl MonitoringPolicyDescription {
    /// Describes the parameters for monitoring an upgrade in Monitored mode.
    pub fn new() -> MonitoringPolicyDescription {
        MonitoringPolicyDescription {
            failure_action: None,
            health_check_wait_duration_in_milliseconds: None,
            health_check_stable_duration_in_milliseconds: None,
            health_check_retry_timeout_in_milliseconds: None,
            upgrade_timeout_in_milliseconds: None,
            upgrade_domain_timeout_in_milliseconds: None,
        }
    }

    pub fn set_failure_action(
        &mut self,
        failure_action: ::models::FailureAction,
    ) {
        self.failure_action = Some(failure_action);
    }

    pub fn with_failure_action(
        mut self,
        failure_action: ::models::FailureAction,
    ) -> MonitoringPolicyDescription {
        self.failure_action = Some(failure_action);
        self
    }

    pub fn failure_action(&self) -> Option<&::models::FailureAction> {
        self.failure_action.as_ref()
    }

    pub fn reset_failure_action(&mut self) {
        self.failure_action = None;
    }

    pub fn set_health_check_wait_duration_in_milliseconds(
        &mut self,
        health_check_wait_duration_in_milliseconds: ::models::HealthCheckWaitDuration,
    ) {
        self.health_check_wait_duration_in_milliseconds =
            Some(health_check_wait_duration_in_milliseconds);
    }

    pub fn with_health_check_wait_duration_in_milliseconds(
        mut self,
        health_check_wait_duration_in_milliseconds: ::models::HealthCheckWaitDuration,
    ) -> MonitoringPolicyDescription {
        self.health_check_wait_duration_in_milliseconds =
            Some(health_check_wait_duration_in_milliseconds);
        self
    }

    pub fn health_check_wait_duration_in_milliseconds(
        &self,
    ) -> Option<&::models::HealthCheckWaitDuration> {
        self.health_check_wait_duration_in_milliseconds.as_ref()
    }

    pub fn reset_health_check_wait_duration_in_milliseconds(&mut self) {
        self.health_check_wait_duration_in_milliseconds = None;
    }

    pub fn set_health_check_stable_duration_in_milliseconds(
        &mut self,
        health_check_stable_duration_in_milliseconds: ::models::HealthCheckStableDuration,
    ) {
        self.health_check_stable_duration_in_milliseconds =
            Some(health_check_stable_duration_in_milliseconds);
    }

    pub fn with_health_check_stable_duration_in_milliseconds(
        mut self,
        health_check_stable_duration_in_milliseconds: ::models::HealthCheckStableDuration,
    ) -> MonitoringPolicyDescription {
        self.health_check_stable_duration_in_milliseconds =
            Some(health_check_stable_duration_in_milliseconds);
        self
    }

    pub fn health_check_stable_duration_in_milliseconds(
        &self,
    ) -> Option<&::models::HealthCheckStableDuration> {
        self.health_check_stable_duration_in_milliseconds.as_ref()
    }

    pub fn reset_health_check_stable_duration_in_milliseconds(&mut self) {
        self.health_check_stable_duration_in_milliseconds = None;
    }

    pub fn set_health_check_retry_timeout_in_milliseconds(
        &mut self,
        health_check_retry_timeout_in_milliseconds: ::models::HealthCheckRetryTimeout,
    ) {
        self.health_check_retry_timeout_in_milliseconds =
            Some(health_check_retry_timeout_in_milliseconds);
    }

    pub fn with_health_check_retry_timeout_in_milliseconds(
        mut self,
        health_check_retry_timeout_in_milliseconds: ::models::HealthCheckRetryTimeout,
    ) -> MonitoringPolicyDescription {
        self.health_check_retry_timeout_in_milliseconds =
            Some(health_check_retry_timeout_in_milliseconds);
        self
    }

    pub fn health_check_retry_timeout_in_milliseconds(
        &self,
    ) -> Option<&::models::HealthCheckRetryTimeout> {
        self.health_check_retry_timeout_in_milliseconds.as_ref()
    }

    pub fn reset_health_check_retry_timeout_in_milliseconds(&mut self) {
        self.health_check_retry_timeout_in_milliseconds = None;
    }

    pub fn set_upgrade_timeout_in_milliseconds(
        &mut self,
        upgrade_timeout_in_milliseconds: ::models::UpgradeTimeout,
    ) {
        self.upgrade_timeout_in_milliseconds =
            Some(upgrade_timeout_in_milliseconds);
    }

    pub fn with_upgrade_timeout_in_milliseconds(
        mut self,
        upgrade_timeout_in_milliseconds: ::models::UpgradeTimeout,
    ) -> MonitoringPolicyDescription {
        self.upgrade_timeout_in_milliseconds =
            Some(upgrade_timeout_in_milliseconds);
        self
    }

    pub fn upgrade_timeout_in_milliseconds(
        &self,
    ) -> Option<&::models::UpgradeTimeout> {
        self.upgrade_timeout_in_milliseconds.as_ref()
    }

    pub fn reset_upgrade_timeout_in_milliseconds(&mut self) {
        self.upgrade_timeout_in_milliseconds = None;
    }

    pub fn set_upgrade_domain_timeout_in_milliseconds(
        &mut self,
        upgrade_domain_timeout_in_milliseconds: ::models::UpgradeDomainTimeout,
    ) {
        self.upgrade_domain_timeout_in_milliseconds =
            Some(upgrade_domain_timeout_in_milliseconds);
    }

    pub fn with_upgrade_domain_timeout_in_milliseconds(
        mut self,
        upgrade_domain_timeout_in_milliseconds: ::models::UpgradeDomainTimeout,
    ) -> MonitoringPolicyDescription {
        self.upgrade_domain_timeout_in_milliseconds =
            Some(upgrade_domain_timeout_in_milliseconds);
        self
    }

    pub fn upgrade_domain_timeout_in_milliseconds(
        &self,
    ) -> Option<&::models::UpgradeDomainTimeout> {
        self.upgrade_domain_timeout_in_milliseconds.as_ref()
    }

    pub fn reset_upgrade_domain_timeout_in_milliseconds(&mut self) {
        self.upgrade_domain_timeout_in_milliseconds = None;
    }
}

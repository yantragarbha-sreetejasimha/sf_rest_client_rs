/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.5.0.36
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ServiceTypeInfo : Information about a service type that is defined in a service manifest of a provisioned application type.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ServiceTypeInfo {
    /// Describes a service type defined in the service manifest of a provisioned application type. The properties the ones defined in the service manifest.
    #[serde(rename = "ServiceTypeDescription")]
    service_type_description: Option<::models::ServiceTypeDescription>,
    /// The name of the service manifest in which this service type is defined.
    #[serde(rename = "ServiceManifestName")]
    service_manifest_name: Option<::models::ServiceManifestName>,
    /// The version of the service manifest in which this service type is defined.
    #[serde(rename = "ServiceManifestVersion")]
    service_manifest_version: Option<String>,
    /// Indicates whether the service is a service group. If it is, the property value is true otherwise false.
    #[serde(rename = "IsServiceGroup")]
    is_service_group: Option<bool>,
}

impl Default for ServiceTypeInfo {
    fn default() -> Self {
        Self::new()
    }
}

impl ServiceTypeInfo {
    /// Information about a service type that is defined in a service manifest of a provisioned application type.
    pub fn new() -> ServiceTypeInfo {
        ServiceTypeInfo {
            service_type_description: None,
            service_manifest_name: None,
            service_manifest_version: None,
            is_service_group: None,
        }
    }

    pub fn set_service_type_description(
        &mut self,
        service_type_description: ::models::ServiceTypeDescription,
    ) {
        self.service_type_description = Some(service_type_description);
    }

    pub fn with_service_type_description(
        mut self,
        service_type_description: ::models::ServiceTypeDescription,
    ) -> ServiceTypeInfo {
        self.service_type_description = Some(service_type_description);
        self
    }

    pub fn service_type_description(
        &self,
    ) -> Option<&::models::ServiceTypeDescription> {
        self.service_type_description.as_ref()
    }

    pub fn reset_service_type_description(&mut self) {
        self.service_type_description = None;
    }

    pub fn set_service_manifest_name(
        &mut self,
        service_manifest_name: ::models::ServiceManifestName,
    ) {
        self.service_manifest_name = Some(service_manifest_name);
    }

    pub fn with_service_manifest_name(
        mut self,
        service_manifest_name: ::models::ServiceManifestName,
    ) -> ServiceTypeInfo {
        self.service_manifest_name = Some(service_manifest_name);
        self
    }

    pub fn service_manifest_name(
        &self,
    ) -> Option<&::models::ServiceManifestName> {
        self.service_manifest_name.as_ref()
    }

    pub fn reset_service_manifest_name(&mut self) {
        self.service_manifest_name = None;
    }

    pub fn set_service_manifest_version(
        &mut self,
        service_manifest_version: String,
    ) {
        self.service_manifest_version = Some(service_manifest_version);
    }

    pub fn with_service_manifest_version(
        mut self,
        service_manifest_version: String,
    ) -> ServiceTypeInfo {
        self.service_manifest_version = Some(service_manifest_version);
        self
    }

    pub fn service_manifest_version(&self) -> Option<&String> {
        self.service_manifest_version.as_ref()
    }

    pub fn reset_service_manifest_version(&mut self) {
        self.service_manifest_version = None;
    }

    pub fn set_is_service_group(&mut self, is_service_group: bool) {
        self.is_service_group = Some(is_service_group);
    }

    pub fn with_is_service_group(
        mut self,
        is_service_group: bool,
    ) -> ServiceTypeInfo {
        self.is_service_group = Some(is_service_group);
        self
    }

    pub fn is_service_group(&self) -> Option<&bool> {
        self.is_service_group.as_ref()
    }

    pub fn reset_is_service_group(&mut self) {
        self.is_service_group = None;
    }
}

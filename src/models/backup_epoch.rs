/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.3.0.9
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// BackupEpoch : An Epoch is a configuration number for the partition as a whole. When the configuration of the replica set changes, for example when the Primary replica changes, the operations that are replicated from the new Primary replica are said to be a new Epoch from the ones which were sent by the old Primary replica.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BackupEpoch {
    /// The current configuration number of this Epoch. The configuration number is an increasing value that is updated whenever the configuration of this replica set changes.
    #[serde(rename = "ConfigurationNumber")]
    configuration_number: Option<String>,
    /// The current data loss number of this Epoch. The data loss number property is an increasing value which is updated whenever data loss is suspected, as when loss of a quorum of replicas in the replica set that includes the Primary replica.
    #[serde(rename = "DataLossNumber")]
    data_loss_number: Option<String>,
}

impl Default for BackupEpoch {
    fn default() -> Self {
        Self::new()
    }
}

impl BackupEpoch {
    /// An Epoch is a configuration number for the partition as a whole. When the configuration of the replica set changes, for example when the Primary replica changes, the operations that are replicated from the new Primary replica are said to be a new Epoch from the ones which were sent by the old Primary replica.
    pub fn new() -> BackupEpoch {
        BackupEpoch {
            configuration_number: None,
            data_loss_number: None,
        }
    }

    pub fn set_configuration_number(&mut self, configuration_number: String) {
        self.configuration_number = Some(configuration_number);
    }

    pub fn with_configuration_number(
        mut self,
        configuration_number: String,
    ) -> BackupEpoch {
        self.configuration_number = Some(configuration_number);
        self
    }

    pub fn configuration_number(&self) -> Option<&String> {
        self.configuration_number.as_ref()
    }

    pub fn reset_configuration_number(&mut self) {
        self.configuration_number = None;
    }

    pub fn set_data_loss_number(&mut self, data_loss_number: String) {
        self.data_loss_number = Some(data_loss_number);
    }

    pub fn with_data_loss_number(
        mut self,
        data_loss_number: String,
    ) -> BackupEpoch {
        self.data_loss_number = Some(data_loss_number);
        self
    }

    pub fn data_loss_number(&self) -> Option<&String> {
        self.data_loss_number.as_ref()
    }

    pub fn reset_data_loss_number(&mut self) {
        self.data_loss_number = None;
    }
}

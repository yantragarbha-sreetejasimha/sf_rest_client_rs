/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.0.0.42
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ServicePartitionInfo : Information about a partition of a Service Fabric service.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ServicePartitionInfo {
    /// The kind of service (Stateless or Stateful).
    #[serde(rename = "ServiceKind")]
    service_kind: ::models::ServiceKind,
    /// The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
    #[serde(rename = "HealthState")]
    health_state: Option<::models::HealthState>,
    /// The status of the service fabric service partition.
    #[serde(rename = "PartitionStatus")]
    partition_status: Option<::models::ServicePartitionStatus>,
    /// Information about the partition identity, partitioning scheme and keys supported by it.
    #[serde(rename = "PartitionInformation")]
    partition_information: Option<::models::PartitionInformation>,
}

impl ServicePartitionInfo {
    /// Information about a partition of a Service Fabric service.
    pub fn new(service_kind: ::models::ServiceKind) -> ServicePartitionInfo {
        ServicePartitionInfo {
            service_kind,
            health_state: None,
            partition_status: None,
            partition_information: None,
        }
    }

    pub fn set_service_kind(&mut self, service_kind: ::models::ServiceKind) {
        self.service_kind = service_kind;
    }

    pub fn with_service_kind(
        mut self,
        service_kind: ::models::ServiceKind,
    ) -> ServicePartitionInfo {
        self.service_kind = service_kind;
        self
    }

    pub fn service_kind(&self) -> &::models::ServiceKind {
        &self.service_kind
    }

    pub fn set_health_state(&mut self, health_state: ::models::HealthState) {
        self.health_state = Some(health_state);
    }

    pub fn with_health_state(
        mut self,
        health_state: ::models::HealthState,
    ) -> ServicePartitionInfo {
        self.health_state = Some(health_state);
        self
    }

    pub fn health_state(&self) -> Option<&::models::HealthState> {
        self.health_state.as_ref()
    }

    pub fn reset_health_state(&mut self) {
        self.health_state = None;
    }

    pub fn set_partition_status(
        &mut self,
        partition_status: ::models::ServicePartitionStatus,
    ) {
        self.partition_status = Some(partition_status);
    }

    pub fn with_partition_status(
        mut self,
        partition_status: ::models::ServicePartitionStatus,
    ) -> ServicePartitionInfo {
        self.partition_status = Some(partition_status);
        self
    }

    pub fn partition_status(
        &self,
    ) -> Option<&::models::ServicePartitionStatus> {
        self.partition_status.as_ref()
    }

    pub fn reset_partition_status(&mut self) {
        self.partition_status = None;
    }

    pub fn set_partition_information(
        &mut self,
        partition_information: ::models::PartitionInformation,
    ) {
        self.partition_information = Some(partition_information);
    }

    pub fn with_partition_information(
        mut self,
        partition_information: ::models::PartitionInformation,
    ) -> ServicePartitionInfo {
        self.partition_information = Some(partition_information);
        self
    }

    pub fn partition_information(
        &self,
    ) -> Option<&::models::PartitionInformation> {
        self.partition_information.as_ref()
    }

    pub fn reset_partition_information(&mut self) {
        self.partition_information = None;
    }
}

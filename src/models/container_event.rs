/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.0.0.42
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ContainerEvent : A container event.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ContainerEvent {
    /// The name of the container event.
    #[serde(rename = "name")]
    name: Option<String>,
    /// The count of the event.
    #[serde(rename = "count")]
    count: Option<i32>,
    /// Date/time of the first event.
    #[serde(rename = "firstTimestamp")]
    first_timestamp: Option<String>,
    /// Date/time of the last event.
    #[serde(rename = "lastTimestamp")]
    last_timestamp: Option<String>,
    /// The event message
    #[serde(rename = "message")]
    message: Option<String>,
    /// The event type.
    #[serde(rename = "type")]
    _type: Option<String>,
}

impl Default for ContainerEvent {
    fn default() -> Self {
        Self::new()
    }
}

impl ContainerEvent {
    /// A container event.
    pub fn new() -> ContainerEvent {
        ContainerEvent {
            name: None,
            count: None,
            first_timestamp: None,
            last_timestamp: None,
            message: None,
            _type: None,
        }
    }

    pub fn set_name(&mut self, name: String) {
        self.name = Some(name);
    }

    pub fn with_name(mut self, name: String) -> ContainerEvent {
        self.name = Some(name);
        self
    }

    pub fn name(&self) -> Option<&String> {
        self.name.as_ref()
    }

    pub fn reset_name(&mut self) {
        self.name = None;
    }

    pub fn set_count(&mut self, count: i32) {
        self.count = Some(count);
    }

    pub fn with_count(mut self, count: i32) -> ContainerEvent {
        self.count = Some(count);
        self
    }

    pub fn count(&self) -> Option<&i32> {
        self.count.as_ref()
    }

    pub fn reset_count(&mut self) {
        self.count = None;
    }

    pub fn set_first_timestamp(&mut self, first_timestamp: String) {
        self.first_timestamp = Some(first_timestamp);
    }

    pub fn with_first_timestamp(
        mut self,
        first_timestamp: String,
    ) -> ContainerEvent {
        self.first_timestamp = Some(first_timestamp);
        self
    }

    pub fn first_timestamp(&self) -> Option<&String> {
        self.first_timestamp.as_ref()
    }

    pub fn reset_first_timestamp(&mut self) {
        self.first_timestamp = None;
    }

    pub fn set_last_timestamp(&mut self, last_timestamp: String) {
        self.last_timestamp = Some(last_timestamp);
    }

    pub fn with_last_timestamp(
        mut self,
        last_timestamp: String,
    ) -> ContainerEvent {
        self.last_timestamp = Some(last_timestamp);
        self
    }

    pub fn last_timestamp(&self) -> Option<&String> {
        self.last_timestamp.as_ref()
    }

    pub fn reset_last_timestamp(&mut self) {
        self.last_timestamp = None;
    }

    pub fn set_message(&mut self, message: String) {
        self.message = Some(message);
    }

    pub fn with_message(mut self, message: String) -> ContainerEvent {
        self.message = Some(message);
        self
    }

    pub fn message(&self) -> Option<&String> {
        self.message.as_ref()
    }

    pub fn reset_message(&mut self) {
        self.message = None;
    }

    pub fn set_type(&mut self, _type: String) {
        self._type = Some(_type);
    }

    pub fn with_type(mut self, _type: String) -> ContainerEvent {
        self._type = Some(_type);
        self
    }

    pub fn _type(&self) -> Option<&String> {
        self._type.as_ref()
    }

    pub fn reset_type(&mut self) {
        self._type = None;
    }
}

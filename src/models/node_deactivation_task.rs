/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.0.0.42
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// NodeDeactivationTask : The task representing the deactivation operation on the node.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeDeactivationTask {
    /// Identity of the task related to deactivation operation on the node.
    #[serde(rename = "NodeDeactivationTaskId")]
    node_deactivation_task_id: Option<::models::NodeDeactivationTaskId>,
    /// The intent or the reason for deactivating the node. Following are the possible values for it.
    #[serde(rename = "NodeDeactivationIntent")]
    node_deactivation_intent: Option<::models::NodeDeactivationIntent>,
}

impl Default for NodeDeactivationTask {
    fn default() -> Self {
        Self::new()
    }
}

impl NodeDeactivationTask {
    /// The task representing the deactivation operation on the node.
    pub fn new() -> NodeDeactivationTask {
        NodeDeactivationTask {
            node_deactivation_task_id: None,
            node_deactivation_intent: None,
        }
    }

    pub fn set_node_deactivation_task_id(
        &mut self,
        node_deactivation_task_id: ::models::NodeDeactivationTaskId,
    ) {
        self.node_deactivation_task_id = Some(node_deactivation_task_id);
    }

    pub fn with_node_deactivation_task_id(
        mut self,
        node_deactivation_task_id: ::models::NodeDeactivationTaskId,
    ) -> NodeDeactivationTask {
        self.node_deactivation_task_id = Some(node_deactivation_task_id);
        self
    }

    pub fn node_deactivation_task_id(
        &self,
    ) -> Option<&::models::NodeDeactivationTaskId> {
        self.node_deactivation_task_id.as_ref()
    }

    pub fn reset_node_deactivation_task_id(&mut self) {
        self.node_deactivation_task_id = None;
    }

    pub fn set_node_deactivation_intent(
        &mut self,
        node_deactivation_intent: ::models::NodeDeactivationIntent,
    ) {
        self.node_deactivation_intent = Some(node_deactivation_intent);
    }

    pub fn with_node_deactivation_intent(
        mut self,
        node_deactivation_intent: ::models::NodeDeactivationIntent,
    ) -> NodeDeactivationTask {
        self.node_deactivation_intent = Some(node_deactivation_intent);
        self
    }

    pub fn node_deactivation_intent(
        &self,
    ) -> Option<&::models::NodeDeactivationIntent> {
        self.node_deactivation_intent.as_ref()
    }

    pub fn reset_node_deactivation_intent(&mut self) {
        self.node_deactivation_intent = None;
    }
}

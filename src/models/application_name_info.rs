/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 8.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ApplicationNameInfo : Information about the application name.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ApplicationNameInfo {
    /// The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.
    #[serde(rename = "Id")]
    id: Option<::models::ApplicationId>,
    /// The name of the application, including the 'fabric:' URI scheme.
    #[serde(rename = "Name")]
    name: Option<::models::ApplicationName>,
}

impl Default for ApplicationNameInfo {
    fn default() -> Self {
        Self::new()
    }
}

impl ApplicationNameInfo {
    /// Information about the application name.
    pub fn new() -> ApplicationNameInfo {
        ApplicationNameInfo {
            id: None,
            name: None,
        }
    }

    pub fn set_id(&mut self, id: ::models::ApplicationId) {
        self.id = Some(id);
    }

    pub fn with_id(
        mut self,
        id: ::models::ApplicationId,
    ) -> ApplicationNameInfo {
        self.id = Some(id);
        self
    }

    pub fn id(&self) -> Option<&::models::ApplicationId> {
        self.id.as_ref()
    }

    pub fn reset_id(&mut self) {
        self.id = None;
    }

    pub fn set_name(&mut self, name: ::models::ApplicationName) {
        self.name = Some(name);
    }

    pub fn with_name(
        mut self,
        name: ::models::ApplicationName,
    ) -> ApplicationNameInfo {
        self.name = Some(name);
        self
    }

    pub fn name(&self) -> Option<&::models::ApplicationName> {
        self.name.as_ref()
    }

    pub fn reset_name(&mut self) {
        self.name = None;
    }
}

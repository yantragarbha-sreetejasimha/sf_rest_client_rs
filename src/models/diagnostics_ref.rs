/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 8.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DiagnosticsRef : Reference to sinks in DiagnosticsDescription.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DiagnosticsRef {
    /// Status of whether or not sinks are enabled.
    #[serde(rename = "enabled")]
    enabled: Option<bool>,
    /// List of sinks to be used if enabled. References the list of sinks in DiagnosticsDescription.
    #[serde(rename = "sinkRefs")]
    sink_refs: Option<Vec<String>>,
}

impl Default for DiagnosticsRef {
    fn default() -> Self {
        Self::new()
    }
}

impl DiagnosticsRef {
    /// Reference to sinks in DiagnosticsDescription.
    pub fn new() -> DiagnosticsRef {
        DiagnosticsRef {
            enabled: None,
            sink_refs: None,
        }
    }

    pub fn set_enabled(&mut self, enabled: bool) {
        self.enabled = Some(enabled);
    }

    pub fn with_enabled(mut self, enabled: bool) -> DiagnosticsRef {
        self.enabled = Some(enabled);
        self
    }

    pub fn enabled(&self) -> Option<&bool> {
        self.enabled.as_ref()
    }

    pub fn reset_enabled(&mut self) {
        self.enabled = None;
    }

    pub fn set_sink_refs(&mut self, sink_refs: Vec<String>) {
        self.sink_refs = Some(sink_refs);
    }

    pub fn with_sink_refs(mut self, sink_refs: Vec<String>) -> DiagnosticsRef {
        self.sink_refs = Some(sink_refs);
        self
    }

    pub fn sink_refs(&self) -> Option<&Vec<String>> {
        self.sink_refs.as_ref()
    }

    pub fn reset_sink_refs(&mut self) {
        self.sink_refs = None;
    }
}

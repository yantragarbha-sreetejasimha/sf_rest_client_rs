/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.3.0.9
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// EventHealthEvaluation : Represents health evaluation of a HealthEvent that was reported on the entity. The health evaluation is returned when evaluating health of an entity results in Error or Warning.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct EventHealthEvaluation {
    /// The health manager in the cluster performs health evaluations in determining the aggregated health state of an entity. This enumeration provides information on the kind of evaluation that was performed. Following are the possible values.
    #[serde(rename = "Kind")]
    kind: ::models::HealthEvaluationKind,
    /// The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.
    #[serde(rename = "AggregatedHealthState")]
    aggregated_health_state: Option<::models::HealthState>,
    /// Description of the health evaluation, which represents a summary of the evaluation process.
    #[serde(rename = "Description")]
    description: Option<String>,
    /// Indicates whether warnings are treated with the same severity as errors. The field is specified in the health policy used to evaluate the entity.
    #[serde(rename = "ConsiderWarningAsError")]
    consider_warning_as_error: Option<bool>,
    /// Represents health information reported on a health entity, such as cluster, application or node, with additional metadata added by the Health Manager.
    #[serde(rename = "UnhealthyEvent")]
    unhealthy_event: Option<::models::HealthEvent>,
}

impl EventHealthEvaluation {
    /// Represents health evaluation of a HealthEvent that was reported on the entity. The health evaluation is returned when evaluating health of an entity results in Error or Warning.
    pub fn new(kind: ::models::HealthEvaluationKind) -> EventHealthEvaluation {
        EventHealthEvaluation {
            kind,
            aggregated_health_state: None,
            description: None,
            consider_warning_as_error: None,
            unhealthy_event: None,
        }
    }

    pub fn set_kind(&mut self, kind: ::models::HealthEvaluationKind) {
        self.kind = kind;
    }

    pub fn with_kind(
        mut self,
        kind: ::models::HealthEvaluationKind,
    ) -> EventHealthEvaluation {
        self.kind = kind;
        self
    }

    pub fn kind(&self) -> &::models::HealthEvaluationKind {
        &self.kind
    }

    pub fn set_aggregated_health_state(
        &mut self,
        aggregated_health_state: ::models::HealthState,
    ) {
        self.aggregated_health_state = Some(aggregated_health_state);
    }

    pub fn with_aggregated_health_state(
        mut self,
        aggregated_health_state: ::models::HealthState,
    ) -> EventHealthEvaluation {
        self.aggregated_health_state = Some(aggregated_health_state);
        self
    }

    pub fn aggregated_health_state(&self) -> Option<&::models::HealthState> {
        self.aggregated_health_state.as_ref()
    }

    pub fn reset_aggregated_health_state(&mut self) {
        self.aggregated_health_state = None;
    }

    pub fn set_description(&mut self, description: String) {
        self.description = Some(description);
    }

    pub fn with_description(
        mut self,
        description: String,
    ) -> EventHealthEvaluation {
        self.description = Some(description);
        self
    }

    pub fn description(&self) -> Option<&String> {
        self.description.as_ref()
    }

    pub fn reset_description(&mut self) {
        self.description = None;
    }

    pub fn set_consider_warning_as_error(
        &mut self,
        consider_warning_as_error: bool,
    ) {
        self.consider_warning_as_error = Some(consider_warning_as_error);
    }

    pub fn with_consider_warning_as_error(
        mut self,
        consider_warning_as_error: bool,
    ) -> EventHealthEvaluation {
        self.consider_warning_as_error = Some(consider_warning_as_error);
        self
    }

    pub fn consider_warning_as_error(&self) -> Option<&bool> {
        self.consider_warning_as_error.as_ref()
    }

    pub fn reset_consider_warning_as_error(&mut self) {
        self.consider_warning_as_error = None;
    }

    pub fn set_unhealthy_event(
        &mut self,
        unhealthy_event: ::models::HealthEvent,
    ) {
        self.unhealthy_event = Some(unhealthy_event);
    }

    pub fn with_unhealthy_event(
        mut self,
        unhealthy_event: ::models::HealthEvent,
    ) -> EventHealthEvaluation {
        self.unhealthy_event = Some(unhealthy_event);
        self
    }

    pub fn unhealthy_event(&self) -> Option<&::models::HealthEvent> {
        self.unhealthy_event.as_ref()
    }

    pub fn reset_unhealthy_event(&mut self) {
        self.unhealthy_event = None;
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 8.2
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Setting : Describes a setting for the container. The setting file path can be fetched from environment variable \"Fabric_SettingPath\". The path for Windows container is \"C:\\\\secrets\". The path for Linux container is \"/var/secrets\".

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Setting {
    /// The type of the setting being given in value
    #[serde(rename = "type")]
    _type: Option<::models::SettingType>,
    /// The name of the setting.
    #[serde(rename = "name")]
    name: Option<String>,
    /// The value of the setting, will be processed based on the type provided.
    #[serde(rename = "value")]
    value: Option<String>,
}

impl Default for Setting {
    fn default() -> Self {
        Self::new()
    }
}

impl Setting {
    /// Describes a setting for the container. The setting file path can be fetched from environment variable \"Fabric_SettingPath\". The path for Windows container is \"C:\\\\secrets\". The path for Linux container is \"/var/secrets\".
    pub fn new() -> Setting {
        Setting {
            _type: None,
            name: None,
            value: None,
        }
    }

    pub fn set_type(&mut self, _type: ::models::SettingType) {
        self._type = Some(_type);
    }

    pub fn with_type(mut self, _type: ::models::SettingType) -> Setting {
        self._type = Some(_type);
        self
    }

    pub fn _type(&self) -> Option<&::models::SettingType> {
        self._type.as_ref()
    }

    pub fn reset_type(&mut self) {
        self._type = None;
    }

    pub fn set_name(&mut self, name: String) {
        self.name = Some(name);
    }

    pub fn with_name(mut self, name: String) -> Setting {
        self.name = Some(name);
        self
    }

    pub fn name(&self) -> Option<&String> {
        self.name.as_ref()
    }

    pub fn reset_name(&mut self) {
        self.name = None;
    }

    pub fn set_value(&mut self, value: String) {
        self.value = Some(value);
    }

    pub fn with_value(mut self, value: String) -> Setting {
        self.value = Some(value);
        self
    }

    pub fn value(&self) -> Option<&String> {
        self.value.as_ref()
    }

    pub fn reset_value(&mut self) {
        self.value = None;
    }
}

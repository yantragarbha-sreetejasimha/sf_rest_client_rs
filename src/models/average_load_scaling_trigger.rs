/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.4.0.36
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// AverageLoadScalingTrigger : Describes the average load trigger used for auto scaling.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AverageLoadScalingTrigger {
    /// The type of auto scaling trigger
    #[serde(rename = "kind")]
    kind: ::models::AutoScalingTriggerKind,
    /// Description of the metric that is used for scaling.
    #[serde(rename = "metric")]
    metric: ::models::AutoScalingMetric,
    /// Lower load threshold (if average load is below this threshold, service will scale down).
    #[serde(rename = "lowerLoadThreshold")]
    lower_load_threshold: f64,
    /// Upper load threshold (if average load is above this threshold, service will scale up).
    #[serde(rename = "upperLoadThreshold")]
    upper_load_threshold: f64,
    /// Scale interval that indicates how often will this trigger be checked.
    #[serde(rename = "scaleIntervalInSeconds")]
    scale_interval_in_seconds: i32,
}

impl AverageLoadScalingTrigger {
    /// Describes the average load trigger used for auto scaling.
    pub fn new(
        kind: ::models::AutoScalingTriggerKind,
        metric: ::models::AutoScalingMetric,
        lower_load_threshold: f64,
        upper_load_threshold: f64,
        scale_interval_in_seconds: i32,
    ) -> AverageLoadScalingTrigger {
        AverageLoadScalingTrigger {
            kind,
            metric,
            lower_load_threshold,
            upper_load_threshold,
            scale_interval_in_seconds,
        }
    }

    pub fn set_kind(&mut self, kind: ::models::AutoScalingTriggerKind) {
        self.kind = kind;
    }

    pub fn with_kind(
        mut self,
        kind: ::models::AutoScalingTriggerKind,
    ) -> AverageLoadScalingTrigger {
        self.kind = kind;
        self
    }

    pub fn kind(&self) -> &::models::AutoScalingTriggerKind {
        &self.kind
    }

    pub fn set_metric(&mut self, metric: ::models::AutoScalingMetric) {
        self.metric = metric;
    }

    pub fn with_metric(
        mut self,
        metric: ::models::AutoScalingMetric,
    ) -> AverageLoadScalingTrigger {
        self.metric = metric;
        self
    }

    pub fn metric(&self) -> &::models::AutoScalingMetric {
        &self.metric
    }

    pub fn set_lower_load_threshold(&mut self, lower_load_threshold: f64) {
        self.lower_load_threshold = lower_load_threshold;
    }

    pub fn with_lower_load_threshold(
        mut self,
        lower_load_threshold: f64,
    ) -> AverageLoadScalingTrigger {
        self.lower_load_threshold = lower_load_threshold;
        self
    }

    pub fn lower_load_threshold(&self) -> &f64 {
        &self.lower_load_threshold
    }

    pub fn set_upper_load_threshold(&mut self, upper_load_threshold: f64) {
        self.upper_load_threshold = upper_load_threshold;
    }

    pub fn with_upper_load_threshold(
        mut self,
        upper_load_threshold: f64,
    ) -> AverageLoadScalingTrigger {
        self.upper_load_threshold = upper_load_threshold;
        self
    }

    pub fn upper_load_threshold(&self) -> &f64 {
        &self.upper_load_threshold
    }

    pub fn set_scale_interval_in_seconds(
        &mut self,
        scale_interval_in_seconds: i32,
    ) {
        self.scale_interval_in_seconds = scale_interval_in_seconds;
    }

    pub fn with_scale_interval_in_seconds(
        mut self,
        scale_interval_in_seconds: i32,
    ) -> AverageLoadScalingTrigger {
        self.scale_interval_in_seconds = scale_interval_in_seconds;
        self
    }

    pub fn scale_interval_in_seconds(&self) -> &i32 {
        &self.scale_interval_in_seconds
    }
}

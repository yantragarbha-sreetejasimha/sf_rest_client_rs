/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.0.0.42
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ServiceIdentity : Map service identity friendly name to an application identity.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ServiceIdentity {
    /// The identity friendly name.
    #[serde(rename = "name")]
    name: Option<String>,
    /// The application identity name.
    #[serde(rename = "identityRef")]
    identity_ref: Option<String>,
}

impl Default for ServiceIdentity {
    fn default() -> Self {
        Self::new()
    }
}

impl ServiceIdentity {
    /// Map service identity friendly name to an application identity.
    pub fn new() -> ServiceIdentity {
        ServiceIdentity {
            name: None,
            identity_ref: None,
        }
    }

    pub fn set_name(&mut self, name: String) {
        self.name = Some(name);
    }

    pub fn with_name(mut self, name: String) -> ServiceIdentity {
        self.name = Some(name);
        self
    }

    pub fn name(&self) -> Option<&String> {
        self.name.as_ref()
    }

    pub fn reset_name(&mut self) {
        self.name = None;
    }

    pub fn set_identity_ref(&mut self, identity_ref: String) {
        self.identity_ref = Some(identity_ref);
    }

    pub fn with_identity_ref(
        mut self,
        identity_ref: String,
    ) -> ServiceIdentity {
        self.identity_ref = Some(identity_ref);
        self
    }

    pub fn identity_ref(&self) -> Option<&String> {
        self.identity_ref.as_ref()
    }

    pub fn reset_identity_ref(&mut self) {
        self.identity_ref = None;
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.0.0.42
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ClusterHealthChunkQueryDescription : The cluster health chunk query description, which can specify the health policies to evaluate cluster health and very expressive filters to select which cluster entities to include in response.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ClusterHealthChunkQueryDescription {
    /// Defines a list of filters that specify which nodes to be included in the returned cluster health chunk. If no filters are specified, no nodes are returned. All the nodes are used to evaluate the cluster's aggregated health state, regardless of the input filters. The cluster health chunk query may specify multiple node filters. For example, it can specify a filter to return all nodes with health state Error and another filter to always include a node identified by its NodeName.
    #[serde(rename = "NodeFilters")]
    node_filters: Option<Vec<::models::NodeHealthStateFilter>>,
    /// Defines a list of filters that specify which applications to be included in the returned cluster health chunk. If no filters are specified, no applications are returned. All the applications are used to evaluate the cluster's aggregated health state, regardless of the input filters. The cluster health chunk query may specify multiple application filters. For example, it can specify a filter to return all applications with health state Error and another filter to always include applications of a specified application type.
    #[serde(rename = "ApplicationFilters")]
    application_filters: Option<Vec<::models::ApplicationHealthStateFilter>>,
    /// Defines a health policy used to evaluate the health of the cluster or of a cluster node.
    #[serde(rename = "ClusterHealthPolicy")]
    cluster_health_policy: Option<::models::ClusterHealthPolicy>,
    /// Defines the application health policy map used to evaluate the health of an application or one of its children entities.
    #[serde(rename = "ApplicationHealthPolicies")]
    application_health_policies: Option<::models::ApplicationHealthPolicies>,
}

impl Default for ClusterHealthChunkQueryDescription {
    fn default() -> Self {
        Self::new()
    }
}

impl ClusterHealthChunkQueryDescription {
    /// The cluster health chunk query description, which can specify the health policies to evaluate cluster health and very expressive filters to select which cluster entities to include in response.
    pub fn new() -> ClusterHealthChunkQueryDescription {
        ClusterHealthChunkQueryDescription {
            node_filters: None,
            application_filters: None,
            cluster_health_policy: None,
            application_health_policies: None,
        }
    }

    pub fn set_node_filters(
        &mut self,
        node_filters: Vec<::models::NodeHealthStateFilter>,
    ) {
        self.node_filters = Some(node_filters);
    }

    pub fn with_node_filters(
        mut self,
        node_filters: Vec<::models::NodeHealthStateFilter>,
    ) -> ClusterHealthChunkQueryDescription {
        self.node_filters = Some(node_filters);
        self
    }

    pub fn node_filters(
        &self,
    ) -> Option<&Vec<::models::NodeHealthStateFilter>> {
        self.node_filters.as_ref()
    }

    pub fn reset_node_filters(&mut self) {
        self.node_filters = None;
    }

    pub fn set_application_filters(
        &mut self,
        application_filters: Vec<::models::ApplicationHealthStateFilter>,
    ) {
        self.application_filters = Some(application_filters);
    }

    pub fn with_application_filters(
        mut self,
        application_filters: Vec<::models::ApplicationHealthStateFilter>,
    ) -> ClusterHealthChunkQueryDescription {
        self.application_filters = Some(application_filters);
        self
    }

    pub fn application_filters(
        &self,
    ) -> Option<&Vec<::models::ApplicationHealthStateFilter>> {
        self.application_filters.as_ref()
    }

    pub fn reset_application_filters(&mut self) {
        self.application_filters = None;
    }

    pub fn set_cluster_health_policy(
        &mut self,
        cluster_health_policy: ::models::ClusterHealthPolicy,
    ) {
        self.cluster_health_policy = Some(cluster_health_policy);
    }

    pub fn with_cluster_health_policy(
        mut self,
        cluster_health_policy: ::models::ClusterHealthPolicy,
    ) -> ClusterHealthChunkQueryDescription {
        self.cluster_health_policy = Some(cluster_health_policy);
        self
    }

    pub fn cluster_health_policy(
        &self,
    ) -> Option<&::models::ClusterHealthPolicy> {
        self.cluster_health_policy.as_ref()
    }

    pub fn reset_cluster_health_policy(&mut self) {
        self.cluster_health_policy = None;
    }

    pub fn set_application_health_policies(
        &mut self,
        application_health_policies: ::models::ApplicationHealthPolicies,
    ) {
        self.application_health_policies = Some(application_health_policies);
    }

    pub fn with_application_health_policies(
        mut self,
        application_health_policies: ::models::ApplicationHealthPolicies,
    ) -> ClusterHealthChunkQueryDescription {
        self.application_health_policies = Some(application_health_policies);
        self
    }

    pub fn application_health_policies(
        &self,
    ) -> Option<&::models::ApplicationHealthPolicies> {
        self.application_health_policies.as_ref()
    }

    pub fn reset_application_health_policies(&mut self) {
        self.application_health_policies = None;
    }
}

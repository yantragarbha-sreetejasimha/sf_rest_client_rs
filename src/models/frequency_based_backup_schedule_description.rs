/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.1.0.45
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// FrequencyBasedBackupScheduleDescription : Describes the frequency based backup schedule.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FrequencyBasedBackupScheduleDescription {
    /// The kind of backup schedule, time based or frequency based.
    #[serde(rename = "ScheduleKind")]
    schedule_kind: ::models::BackupScheduleKind,
    /// Defines the interval with which backups are periodically taken. It should be specified in ISO8601 format. Timespan in seconds is not supported and will be ignored while creating the policy.
    #[serde(rename = "Interval")]
    interval: String,
}

impl FrequencyBasedBackupScheduleDescription {
    /// Describes the frequency based backup schedule.
    pub fn new(
        schedule_kind: ::models::BackupScheduleKind,
        interval: String,
    ) -> FrequencyBasedBackupScheduleDescription {
        FrequencyBasedBackupScheduleDescription {
            schedule_kind,
            interval,
        }
    }

    pub fn set_schedule_kind(
        &mut self,
        schedule_kind: ::models::BackupScheduleKind,
    ) {
        self.schedule_kind = schedule_kind;
    }

    pub fn with_schedule_kind(
        mut self,
        schedule_kind: ::models::BackupScheduleKind,
    ) -> FrequencyBasedBackupScheduleDescription {
        self.schedule_kind = schedule_kind;
        self
    }

    pub fn schedule_kind(&self) -> &::models::BackupScheduleKind {
        &self.schedule_kind
    }

    pub fn set_interval(&mut self, interval: String) {
        self.interval = interval;
    }

    pub fn with_interval(
        mut self,
        interval: String,
    ) -> FrequencyBasedBackupScheduleDescription {
        self.interval = interval;
        self
    }

    pub fn interval(&self) -> &String {
        &self.interval
    }
}

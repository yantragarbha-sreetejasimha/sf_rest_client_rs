/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.4.0.36
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// UnprovisionApplicationTypeDescriptionInfo : Describes the operation to unregister or unprovision an application type and its version that was registered with the Service Fabric.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UnprovisionApplicationTypeDescriptionInfo {
    /// The version of the application type as defined in the application manifest.
    #[serde(rename = "ApplicationTypeVersion")]
    application_type_version: ::models::ApplicationTypeVersion,
    /// The flag indicating whether or not unprovision should occur _asynchronously. When set to true, the unprovision operation returns when the request is accepted by the system, and the unprovision operation continues without any timeout limit. The default value is false. However, we recommend setting it to true for large application packages that were provisioned.
    #[serde(rename = "Async")]
    _async: Option<bool>,
}

impl UnprovisionApplicationTypeDescriptionInfo {
    /// Describes the operation to unregister or unprovision an application type and its version that was registered with the Service Fabric.
    pub fn new(
        application_type_version: ::models::ApplicationTypeVersion,
    ) -> UnprovisionApplicationTypeDescriptionInfo {
        UnprovisionApplicationTypeDescriptionInfo {
            application_type_version,
            _async: None,
        }
    }

    pub fn set_application_type_version(
        &mut self,
        application_type_version: ::models::ApplicationTypeVersion,
    ) {
        self.application_type_version = application_type_version;
    }

    pub fn with_application_type_version(
        mut self,
        application_type_version: ::models::ApplicationTypeVersion,
    ) -> UnprovisionApplicationTypeDescriptionInfo {
        self.application_type_version = application_type_version;
        self
    }

    pub fn application_type_version(
        &self,
    ) -> &::models::ApplicationTypeVersion {
        &self.application_type_version
    }

    pub fn set_async(&mut self, _async: bool) {
        self._async = Some(_async);
    }

    pub fn with_async(
        mut self,
        _async: bool,
    ) -> UnprovisionApplicationTypeDescriptionInfo {
        self._async = Some(_async);
        self
    }

    pub fn _async(&self) -> Option<&bool> {
        self._async.as_ref()
    }

    pub fn reset_async(&mut self) {
        self._async = None;
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 8.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ResolvedServiceEndpoint : Endpoint of a resolved service partition.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ResolvedServiceEndpoint {
    /// The role of the replica where the endpoint is reported.
    #[serde(rename = "Kind")]
    kind: Option<::models::ServiceEndpointRole>,
    /// The address of the endpoint. If the endpoint has multiple listeners the address is a JSON object with one property per listener with the value as the address of that listener.
    #[serde(rename = "Address")]
    address: Option<String>,
}

impl Default for ResolvedServiceEndpoint {
    fn default() -> Self {
        Self::new()
    }
}

impl ResolvedServiceEndpoint {
    /// Endpoint of a resolved service partition.
    pub fn new() -> ResolvedServiceEndpoint {
        ResolvedServiceEndpoint {
            kind: None,
            address: None,
        }
    }

    pub fn set_kind(&mut self, kind: ::models::ServiceEndpointRole) {
        self.kind = Some(kind);
    }

    pub fn with_kind(
        mut self,
        kind: ::models::ServiceEndpointRole,
    ) -> ResolvedServiceEndpoint {
        self.kind = Some(kind);
        self
    }

    pub fn kind(&self) -> Option<&::models::ServiceEndpointRole> {
        self.kind.as_ref()
    }

    pub fn reset_kind(&mut self) {
        self.kind = None;
    }

    pub fn set_address(&mut self, address: String) {
        self.address = Some(address);
    }

    pub fn with_address(mut self, address: String) -> ResolvedServiceEndpoint {
        self.address = Some(address);
        self
    }

    pub fn address(&self) -> Option<&String> {
        self.address.as_ref()
    }

    pub fn reset_address(&mut self) {
        self.address = None;
    }
}

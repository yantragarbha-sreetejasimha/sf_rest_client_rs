/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.1.0.45
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// UpgradeOrchestrationServiceStateSummary : Service state summary of Service Fabric Upgrade Orchestration Service.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UpgradeOrchestrationServiceStateSummary {
    /// The current code version of the cluster.
    #[serde(rename = "CurrentCodeVersion")]
    current_code_version: Option<String>,
    /// The current manifest version of the cluster.
    #[serde(rename = "CurrentManifestVersion")]
    current_manifest_version: Option<String>,
    /// The target code version of  the cluster.
    #[serde(rename = "TargetCodeVersion")]
    target_code_version: Option<String>,
    /// The target manifest version of the cluster.
    #[serde(rename = "TargetManifestVersion")]
    target_manifest_version: Option<String>,
    /// The type of the pending upgrade of the cluster.
    #[serde(rename = "PendingUpgradeType")]
    pending_upgrade_type: Option<String>,
}

impl Default for UpgradeOrchestrationServiceStateSummary {
    fn default() -> Self {
        Self::new()
    }
}

impl UpgradeOrchestrationServiceStateSummary {
    /// Service state summary of Service Fabric Upgrade Orchestration Service.
    pub fn new() -> UpgradeOrchestrationServiceStateSummary {
        UpgradeOrchestrationServiceStateSummary {
            current_code_version: None,
            current_manifest_version: None,
            target_code_version: None,
            target_manifest_version: None,
            pending_upgrade_type: None,
        }
    }

    pub fn set_current_code_version(&mut self, current_code_version: String) {
        self.current_code_version = Some(current_code_version);
    }

    pub fn with_current_code_version(
        mut self,
        current_code_version: String,
    ) -> UpgradeOrchestrationServiceStateSummary {
        self.current_code_version = Some(current_code_version);
        self
    }

    pub fn current_code_version(&self) -> Option<&String> {
        self.current_code_version.as_ref()
    }

    pub fn reset_current_code_version(&mut self) {
        self.current_code_version = None;
    }

    pub fn set_current_manifest_version(
        &mut self,
        current_manifest_version: String,
    ) {
        self.current_manifest_version = Some(current_manifest_version);
    }

    pub fn with_current_manifest_version(
        mut self,
        current_manifest_version: String,
    ) -> UpgradeOrchestrationServiceStateSummary {
        self.current_manifest_version = Some(current_manifest_version);
        self
    }

    pub fn current_manifest_version(&self) -> Option<&String> {
        self.current_manifest_version.as_ref()
    }

    pub fn reset_current_manifest_version(&mut self) {
        self.current_manifest_version = None;
    }

    pub fn set_target_code_version(&mut self, target_code_version: String) {
        self.target_code_version = Some(target_code_version);
    }

    pub fn with_target_code_version(
        mut self,
        target_code_version: String,
    ) -> UpgradeOrchestrationServiceStateSummary {
        self.target_code_version = Some(target_code_version);
        self
    }

    pub fn target_code_version(&self) -> Option<&String> {
        self.target_code_version.as_ref()
    }

    pub fn reset_target_code_version(&mut self) {
        self.target_code_version = None;
    }

    pub fn set_target_manifest_version(
        &mut self,
        target_manifest_version: String,
    ) {
        self.target_manifest_version = Some(target_manifest_version);
    }

    pub fn with_target_manifest_version(
        mut self,
        target_manifest_version: String,
    ) -> UpgradeOrchestrationServiceStateSummary {
        self.target_manifest_version = Some(target_manifest_version);
        self
    }

    pub fn target_manifest_version(&self) -> Option<&String> {
        self.target_manifest_version.as_ref()
    }

    pub fn reset_target_manifest_version(&mut self) {
        self.target_manifest_version = None;
    }

    pub fn set_pending_upgrade_type(&mut self, pending_upgrade_type: String) {
        self.pending_upgrade_type = Some(pending_upgrade_type);
    }

    pub fn with_pending_upgrade_type(
        mut self,
        pending_upgrade_type: String,
    ) -> UpgradeOrchestrationServiceStateSummary {
        self.pending_upgrade_type = Some(pending_upgrade_type);
        self
    }

    pub fn pending_upgrade_type(&self) -> Option<&String> {
        self.pending_upgrade_type.as_ref()
    }

    pub fn reset_pending_upgrade_type(&mut self) {
        self.pending_upgrade_type = None;
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.0.0.42
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PropertyMetadata : The metadata associated with a property, including the property's name.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PropertyMetadata {
    /// The kind of property, determined by the type of data. Following are the possible values.
    #[serde(rename = "TypeId")]
    type_id: Option<::models::PropertyValueKind>,
    /// The property's custom type ID.
    #[serde(rename = "CustomTypeId")]
    custom_type_id: Option<::models::PropertyCustomTypeId>,
    /// The name of the parent Service Fabric Name for the property. It could be thought of as the name-space/table under which the property exists.
    #[serde(rename = "Parent")]
    parent: Option<::models::FabricName>,
    /// The length of the serialized property value.
    #[serde(rename = "SizeInBytes")]
    size_in_bytes: Option<i32>,
    /// Represents when the Property was last modified. Only write operations will cause this field to be updated.
    #[serde(rename = "LastModifiedUtcTimestamp")]
    last_modified_utc_timestamp: Option<String>,
    /// The version of the property. Every time a property is modified, its sequence number is increased.
    #[serde(rename = "SequenceNumber")]
    sequence_number: Option<String>,
}

impl Default for PropertyMetadata {
    fn default() -> Self {
        Self::new()
    }
}

impl PropertyMetadata {
    /// The metadata associated with a property, including the property's name.
    pub fn new() -> PropertyMetadata {
        PropertyMetadata {
            type_id: None,
            custom_type_id: None,
            parent: None,
            size_in_bytes: None,
            last_modified_utc_timestamp: None,
            sequence_number: None,
        }
    }

    pub fn set_type_id(&mut self, type_id: ::models::PropertyValueKind) {
        self.type_id = Some(type_id);
    }

    pub fn with_type_id(
        mut self,
        type_id: ::models::PropertyValueKind,
    ) -> PropertyMetadata {
        self.type_id = Some(type_id);
        self
    }

    pub fn type_id(&self) -> Option<&::models::PropertyValueKind> {
        self.type_id.as_ref()
    }

    pub fn reset_type_id(&mut self) {
        self.type_id = None;
    }

    pub fn set_custom_type_id(
        &mut self,
        custom_type_id: ::models::PropertyCustomTypeId,
    ) {
        self.custom_type_id = Some(custom_type_id);
    }

    pub fn with_custom_type_id(
        mut self,
        custom_type_id: ::models::PropertyCustomTypeId,
    ) -> PropertyMetadata {
        self.custom_type_id = Some(custom_type_id);
        self
    }

    pub fn custom_type_id(&self) -> Option<&::models::PropertyCustomTypeId> {
        self.custom_type_id.as_ref()
    }

    pub fn reset_custom_type_id(&mut self) {
        self.custom_type_id = None;
    }

    pub fn set_parent(&mut self, parent: ::models::FabricName) {
        self.parent = Some(parent);
    }

    pub fn with_parent(
        mut self,
        parent: ::models::FabricName,
    ) -> PropertyMetadata {
        self.parent = Some(parent);
        self
    }

    pub fn parent(&self) -> Option<&::models::FabricName> {
        self.parent.as_ref()
    }

    pub fn reset_parent(&mut self) {
        self.parent = None;
    }

    pub fn set_size_in_bytes(&mut self, size_in_bytes: i32) {
        self.size_in_bytes = Some(size_in_bytes);
    }

    pub fn with_size_in_bytes(
        mut self,
        size_in_bytes: i32,
    ) -> PropertyMetadata {
        self.size_in_bytes = Some(size_in_bytes);
        self
    }

    pub fn size_in_bytes(&self) -> Option<&i32> {
        self.size_in_bytes.as_ref()
    }

    pub fn reset_size_in_bytes(&mut self) {
        self.size_in_bytes = None;
    }

    pub fn set_last_modified_utc_timestamp(
        &mut self,
        last_modified_utc_timestamp: String,
    ) {
        self.last_modified_utc_timestamp = Some(last_modified_utc_timestamp);
    }

    pub fn with_last_modified_utc_timestamp(
        mut self,
        last_modified_utc_timestamp: String,
    ) -> PropertyMetadata {
        self.last_modified_utc_timestamp = Some(last_modified_utc_timestamp);
        self
    }

    pub fn last_modified_utc_timestamp(&self) -> Option<&String> {
        self.last_modified_utc_timestamp.as_ref()
    }

    pub fn reset_last_modified_utc_timestamp(&mut self) {
        self.last_modified_utc_timestamp = None;
    }

    pub fn set_sequence_number(&mut self, sequence_number: String) {
        self.sequence_number = Some(sequence_number);
    }

    pub fn with_sequence_number(
        mut self,
        sequence_number: String,
    ) -> PropertyMetadata {
        self.sequence_number = Some(sequence_number);
        self
    }

    pub fn sequence_number(&self) -> Option<&String> {
        self.sequence_number.as_ref()
    }

    pub fn reset_sequence_number(&mut self) {
        self.sequence_number = None;
    }
}

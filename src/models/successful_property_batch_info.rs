/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 8.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// SuccessfulPropertyBatchInfo : Derived from PropertyBatchInfo. Represents the property batch succeeding. Contains the results of any \"Get\" operations in the batch.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SuccessfulPropertyBatchInfo {
    /// The kind of property batch info, determined by the results of a property batch. The following are the possible values.
    #[serde(rename = "Kind")]
    kind: ::models::PropertyBatchInfoKind,
    /// A map containing the properties that were requested through any \"Get\" property batch operations. The key represents the index of the \"Get\" operation in the original request, in string form. The value is the property. If a property is not found, it will not be in the map.
    #[serde(rename = "Properties")]
    properties: Option<Value>,
}

impl SuccessfulPropertyBatchInfo {
    /// Derived from PropertyBatchInfo. Represents the property batch succeeding. Contains the results of any \"Get\" operations in the batch.
    pub fn new(
        kind: ::models::PropertyBatchInfoKind,
    ) -> SuccessfulPropertyBatchInfo {
        SuccessfulPropertyBatchInfo {
            kind,
            properties: None,
        }
    }

    pub fn set_kind(&mut self, kind: ::models::PropertyBatchInfoKind) {
        self.kind = kind;
    }

    pub fn with_kind(
        mut self,
        kind: ::models::PropertyBatchInfoKind,
    ) -> SuccessfulPropertyBatchInfo {
        self.kind = kind;
        self
    }

    pub fn kind(&self) -> &::models::PropertyBatchInfoKind {
        &self.kind
    }

    pub fn set_properties(&mut self, properties: Value) {
        self.properties = Some(properties);
    }

    pub fn with_properties(
        mut self,
        properties: Value,
    ) -> SuccessfulPropertyBatchInfo {
        self.properties = Some(properties);
        self
    }

    pub fn properties(&self) -> Option<&Value> {
        self.properties.as_ref()
    }

    pub fn reset_properties(&mut self) {
        self.properties = None;
    }
}

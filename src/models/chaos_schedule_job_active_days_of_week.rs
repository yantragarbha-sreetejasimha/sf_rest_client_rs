/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.0.0.42
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ChaosScheduleJobActiveDaysOfWeek : Defines the days of the week that a Chaos Schedule Job will run for.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ChaosScheduleJobActiveDaysOfWeek {
    /// Indicates if the Chaos Schedule Job will run on Sunday
    #[serde(rename = "Sunday")]
    sunday: Option<bool>,
    /// Indicates if the Chaos Schedule Job will run on Monday
    #[serde(rename = "Monday")]
    monday: Option<bool>,
    /// Indicates if the Chaos Schedule Job will run on Tuesday
    #[serde(rename = "Tuesday")]
    tuesday: Option<bool>,
    /// Indicates if the Chaos Schedule Job will run on Wednesday
    #[serde(rename = "Wednesday")]
    wednesday: Option<bool>,
    /// Indicates if the Chaos Schedule Job will run on Thursday
    #[serde(rename = "Thursday")]
    thursday: Option<bool>,
    /// Indicates if the Chaos Schedule Job will run on Friday
    #[serde(rename = "Friday")]
    friday: Option<bool>,
    /// Indicates if the Chaos Schedule Job will run on Saturday
    #[serde(rename = "Saturday")]
    saturday: Option<bool>,
}

impl Default for ChaosScheduleJobActiveDaysOfWeek {
    fn default() -> Self {
        Self::new()
    }
}

impl ChaosScheduleJobActiveDaysOfWeek {
    /// Defines the days of the week that a Chaos Schedule Job will run for.
    pub fn new() -> ChaosScheduleJobActiveDaysOfWeek {
        ChaosScheduleJobActiveDaysOfWeek {
            sunday: None,
            monday: None,
            tuesday: None,
            wednesday: None,
            thursday: None,
            friday: None,
            saturday: None,
        }
    }

    pub fn set_sunday(&mut self, sunday: bool) {
        self.sunday = Some(sunday);
    }

    pub fn with_sunday(
        mut self,
        sunday: bool,
    ) -> ChaosScheduleJobActiveDaysOfWeek {
        self.sunday = Some(sunday);
        self
    }

    pub fn sunday(&self) -> Option<&bool> {
        self.sunday.as_ref()
    }

    pub fn reset_sunday(&mut self) {
        self.sunday = None;
    }

    pub fn set_monday(&mut self, monday: bool) {
        self.monday = Some(monday);
    }

    pub fn with_monday(
        mut self,
        monday: bool,
    ) -> ChaosScheduleJobActiveDaysOfWeek {
        self.monday = Some(monday);
        self
    }

    pub fn monday(&self) -> Option<&bool> {
        self.monday.as_ref()
    }

    pub fn reset_monday(&mut self) {
        self.monday = None;
    }

    pub fn set_tuesday(&mut self, tuesday: bool) {
        self.tuesday = Some(tuesday);
    }

    pub fn with_tuesday(
        mut self,
        tuesday: bool,
    ) -> ChaosScheduleJobActiveDaysOfWeek {
        self.tuesday = Some(tuesday);
        self
    }

    pub fn tuesday(&self) -> Option<&bool> {
        self.tuesday.as_ref()
    }

    pub fn reset_tuesday(&mut self) {
        self.tuesday = None;
    }

    pub fn set_wednesday(&mut self, wednesday: bool) {
        self.wednesday = Some(wednesday);
    }

    pub fn with_wednesday(
        mut self,
        wednesday: bool,
    ) -> ChaosScheduleJobActiveDaysOfWeek {
        self.wednesday = Some(wednesday);
        self
    }

    pub fn wednesday(&self) -> Option<&bool> {
        self.wednesday.as_ref()
    }

    pub fn reset_wednesday(&mut self) {
        self.wednesday = None;
    }

    pub fn set_thursday(&mut self, thursday: bool) {
        self.thursday = Some(thursday);
    }

    pub fn with_thursday(
        mut self,
        thursday: bool,
    ) -> ChaosScheduleJobActiveDaysOfWeek {
        self.thursday = Some(thursday);
        self
    }

    pub fn thursday(&self) -> Option<&bool> {
        self.thursday.as_ref()
    }

    pub fn reset_thursday(&mut self) {
        self.thursday = None;
    }

    pub fn set_friday(&mut self, friday: bool) {
        self.friday = Some(friday);
    }

    pub fn with_friday(
        mut self,
        friday: bool,
    ) -> ChaosScheduleJobActiveDaysOfWeek {
        self.friday = Some(friday);
        self
    }

    pub fn friday(&self) -> Option<&bool> {
        self.friday.as_ref()
    }

    pub fn reset_friday(&mut self) {
        self.friday = None;
    }

    pub fn set_saturday(&mut self, saturday: bool) {
        self.saturday = Some(saturday);
    }

    pub fn with_saturday(
        mut self,
        saturday: bool,
    ) -> ChaosScheduleJobActiveDaysOfWeek {
        self.saturday = Some(saturday);
        self
    }

    pub fn saturday(&self) -> Option<&bool> {
        self.saturday.as_ref()
    }

    pub fn reset_saturday(&mut self) {
        self.saturday = None;
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.4.0.36
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// EntityKindHealthStateCount : Represents health state count for entities of the specified entity kind.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct EntityKindHealthStateCount {
    /// The entity kind for which health states are evaluated.
    #[serde(rename = "EntityKind")]
    entity_kind: Option<::models::EntityKind>,
    /// The health state count for the entities of the specified kind.
    #[serde(rename = "HealthStateCount")]
    health_state_count: Option<::models::HealthStateCount>,
}

impl Default for EntityKindHealthStateCount {
    fn default() -> Self {
        Self::new()
    }
}

impl EntityKindHealthStateCount {
    /// Represents health state count for entities of the specified entity kind.
    pub fn new() -> EntityKindHealthStateCount {
        EntityKindHealthStateCount {
            entity_kind: None,
            health_state_count: None,
        }
    }

    pub fn set_entity_kind(&mut self, entity_kind: ::models::EntityKind) {
        self.entity_kind = Some(entity_kind);
    }

    pub fn with_entity_kind(
        mut self,
        entity_kind: ::models::EntityKind,
    ) -> EntityKindHealthStateCount {
        self.entity_kind = Some(entity_kind);
        self
    }

    pub fn entity_kind(&self) -> Option<&::models::EntityKind> {
        self.entity_kind.as_ref()
    }

    pub fn reset_entity_kind(&mut self) {
        self.entity_kind = None;
    }

    pub fn set_health_state_count(
        &mut self,
        health_state_count: ::models::HealthStateCount,
    ) {
        self.health_state_count = Some(health_state_count);
    }

    pub fn with_health_state_count(
        mut self,
        health_state_count: ::models::HealthStateCount,
    ) -> EntityKindHealthStateCount {
        self.health_state_count = Some(health_state_count);
        self
    }

    pub fn health_state_count(&self) -> Option<&::models::HealthStateCount> {
        self.health_state_count.as_ref()
    }

    pub fn reset_health_state_count(&mut self) {
        self.health_state_count = None;
    }
}

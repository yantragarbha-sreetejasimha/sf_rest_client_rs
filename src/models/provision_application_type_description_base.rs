/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.5.0.36
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ProvisionApplicationTypeDescriptionBase : Represents the type of registration or provision requested, and if the operation needs to be _asynchronous or not. Supported types of provision operations are from either image store or external store.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ProvisionApplicationTypeDescriptionBase {
    /// The kind of application type registration or provision requested. The application package can be registered or provisioned either from the image store or from an external store. Following are the kinds of the application type provision.
    #[serde(rename = "Kind")]
    kind: ::models::ProvisionApplicationTypeKind,
    /// Indicates whether or not provisioning should occur _asynchronously. When set to true, the provision operation returns when the request is accepted by the system, and the provision operation continues without any timeout limit. The default value is false. For large application packages, we recommend setting the value to true.
    #[serde(rename = "Async")]
    _async: bool,
}

impl ProvisionApplicationTypeDescriptionBase {
    /// Represents the type of registration or provision requested, and if the operation needs to be _asynchronous or not. Supported types of provision operations are from either image store or external store.
    pub fn new(
        kind: ::models::ProvisionApplicationTypeKind,
        _async: bool,
    ) -> ProvisionApplicationTypeDescriptionBase {
        ProvisionApplicationTypeDescriptionBase { kind, _async }
    }

    pub fn set_kind(&mut self, kind: ::models::ProvisionApplicationTypeKind) {
        self.kind = kind;
    }

    pub fn with_kind(
        mut self,
        kind: ::models::ProvisionApplicationTypeKind,
    ) -> ProvisionApplicationTypeDescriptionBase {
        self.kind = kind;
        self
    }

    pub fn kind(&self) -> &::models::ProvisionApplicationTypeKind {
        &self.kind
    }

    pub fn set_async(&mut self, _async: bool) {
        self._async = _async;
    }

    pub fn with_async(
        mut self,
        _async: bool,
    ) -> ProvisionApplicationTypeDescriptionBase {
        self._async = _async;
        self
    }

    pub fn _async(&self) -> &bool {
        &self._async
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.4.0.36
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// AnalysisEventMetadata : Metadata about an Analysis Event.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AnalysisEventMetadata {
    /// The analysis delay.
    #[serde(rename = "Delay")]
    delay: Option<String>,
    /// The duration of analysis.
    #[serde(rename = "Duration")]
    duration: Option<String>,
}

impl Default for AnalysisEventMetadata {
    fn default() -> Self {
        Self::new()
    }
}

impl AnalysisEventMetadata {
    /// Metadata about an Analysis Event.
    pub fn new() -> AnalysisEventMetadata {
        AnalysisEventMetadata {
            delay: None,
            duration: None,
        }
    }

    pub fn set_delay(&mut self, delay: String) {
        self.delay = Some(delay);
    }

    pub fn with_delay(mut self, delay: String) -> AnalysisEventMetadata {
        self.delay = Some(delay);
        self
    }

    pub fn delay(&self) -> Option<&String> {
        self.delay.as_ref()
    }

    pub fn reset_delay(&mut self) {
        self.delay = None;
    }

    pub fn set_duration(&mut self, duration: String) {
        self.duration = Some(duration);
    }

    pub fn with_duration(mut self, duration: String) -> AnalysisEventMetadata {
        self.duration = Some(duration);
        self
    }

    pub fn duration(&self) -> Option<&String> {
        self.duration.as_ref()
    }

    pub fn reset_duration(&mut self) {
        self.duration = None;
    }
}

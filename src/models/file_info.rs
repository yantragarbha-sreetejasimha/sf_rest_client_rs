/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 8.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// FileInfo : Information about a image store file.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FileInfo {
    /// The size of file in bytes.
    #[serde(rename = "FileSize")]
    file_size: Option<String>,
    /// Information about the version of image store file.
    #[serde(rename = "FileVersion")]
    file_version: Option<::models::FileVersion>,
    /// The date and time when the image store file was last modified.
    #[serde(rename = "ModifiedDate")]
    modified_date: Option<String>,
    /// The file path relative to the image store root path.
    #[serde(rename = "StoreRelativePath")]
    store_relative_path: Option<String>,
}

impl Default for FileInfo {
    fn default() -> Self {
        Self::new()
    }
}

impl FileInfo {
    /// Information about a image store file.
    pub fn new() -> FileInfo {
        FileInfo {
            file_size: None,
            file_version: None,
            modified_date: None,
            store_relative_path: None,
        }
    }

    pub fn set_file_size(&mut self, file_size: String) {
        self.file_size = Some(file_size);
    }

    pub fn with_file_size(mut self, file_size: String) -> FileInfo {
        self.file_size = Some(file_size);
        self
    }

    pub fn file_size(&self) -> Option<&String> {
        self.file_size.as_ref()
    }

    pub fn reset_file_size(&mut self) {
        self.file_size = None;
    }

    pub fn set_file_version(&mut self, file_version: ::models::FileVersion) {
        self.file_version = Some(file_version);
    }

    pub fn with_file_version(
        mut self,
        file_version: ::models::FileVersion,
    ) -> FileInfo {
        self.file_version = Some(file_version);
        self
    }

    pub fn file_version(&self) -> Option<&::models::FileVersion> {
        self.file_version.as_ref()
    }

    pub fn reset_file_version(&mut self) {
        self.file_version = None;
    }

    pub fn set_modified_date(&mut self, modified_date: String) {
        self.modified_date = Some(modified_date);
    }

    pub fn with_modified_date(mut self, modified_date: String) -> FileInfo {
        self.modified_date = Some(modified_date);
        self
    }

    pub fn modified_date(&self) -> Option<&String> {
        self.modified_date.as_ref()
    }

    pub fn reset_modified_date(&mut self) {
        self.modified_date = None;
    }

    pub fn set_store_relative_path(&mut self, store_relative_path: String) {
        self.store_relative_path = Some(store_relative_path);
    }

    pub fn with_store_relative_path(
        mut self,
        store_relative_path: String,
    ) -> FileInfo {
        self.store_relative_path = Some(store_relative_path);
        self
    }

    pub fn store_relative_path(&self) -> Option<&String> {
        self.store_relative_path.as_ref()
    }

    pub fn reset_store_relative_path(&mut self) {
        self.store_relative_path = None;
    }
}

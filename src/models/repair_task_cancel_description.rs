/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 8.2
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// RepairTaskCancelDescription : Describes a request to cancel a repair task.  This type supports the Service Fabric platform; it is not meant to be used directly from your code.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RepairTaskCancelDescription {
    /// The ID of the repair task.
    #[serde(rename = "TaskId")]
    task_id: String,
    /// The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current version of the repair task. If zero, then no version check is performed.
    #[serde(rename = "Version")]
    version: Option<String>,
    /// _True_ if the repair should be stopped as soon as possible even if it has already started executing. _False_ if the repair should be cancelled only if execution has not yet started.
    #[serde(rename = "RequestAbort")]
    request_abort: Option<bool>,
}

impl RepairTaskCancelDescription {
    /// Describes a request to cancel a repair task.  This type supports the Service Fabric platform; it is not meant to be used directly from your code.
    pub fn new(task_id: String) -> RepairTaskCancelDescription {
        RepairTaskCancelDescription {
            task_id,
            version: None,
            request_abort: None,
        }
    }

    pub fn set_task_id(&mut self, task_id: String) {
        self.task_id = task_id;
    }

    pub fn with_task_id(
        mut self,
        task_id: String,
    ) -> RepairTaskCancelDescription {
        self.task_id = task_id;
        self
    }

    pub fn task_id(&self) -> &String {
        &self.task_id
    }

    pub fn set_version(&mut self, version: String) {
        self.version = Some(version);
    }

    pub fn with_version(
        mut self,
        version: String,
    ) -> RepairTaskCancelDescription {
        self.version = Some(version);
        self
    }

    pub fn version(&self) -> Option<&String> {
        self.version.as_ref()
    }

    pub fn reset_version(&mut self) {
        self.version = None;
    }

    pub fn set_request_abort(&mut self, request_abort: bool) {
        self.request_abort = Some(request_abort);
    }

    pub fn with_request_abort(
        mut self,
        request_abort: bool,
    ) -> RepairTaskCancelDescription {
        self.request_abort = Some(request_abort);
        self
    }

    pub fn request_abort(&self) -> Option<&bool> {
        self.request_abort.as_ref()
    }

    pub fn reset_request_abort(&mut self) {
        self.request_abort = None;
    }
}

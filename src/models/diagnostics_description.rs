/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.1.0.45
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DiagnosticsDescription : Describes the diagnostics options available

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DiagnosticsDescription {
    /// List of supported sinks that can be referenced.
    #[serde(rename = "sinks")]
    sinks: Option<Vec<::models::DiagnosticsSinkProperties>>,
    /// Status of whether or not sinks are enabled.
    #[serde(rename = "enabled")]
    enabled: Option<bool>,
    /// The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.
    #[serde(rename = "defaultSinkRefs")]
    default_sink_refs: Option<Vec<String>>,
}

impl Default for DiagnosticsDescription {
    fn default() -> Self {
        Self::new()
    }
}

impl DiagnosticsDescription {
    /// Describes the diagnostics options available
    pub fn new() -> DiagnosticsDescription {
        DiagnosticsDescription {
            sinks: None,
            enabled: None,
            default_sink_refs: None,
        }
    }

    pub fn set_sinks(
        &mut self,
        sinks: Vec<::models::DiagnosticsSinkProperties>,
    ) {
        self.sinks = Some(sinks);
    }

    pub fn with_sinks(
        mut self,
        sinks: Vec<::models::DiagnosticsSinkProperties>,
    ) -> DiagnosticsDescription {
        self.sinks = Some(sinks);
        self
    }

    pub fn sinks(&self) -> Option<&Vec<::models::DiagnosticsSinkProperties>> {
        self.sinks.as_ref()
    }

    pub fn reset_sinks(&mut self) {
        self.sinks = None;
    }

    pub fn set_enabled(&mut self, enabled: bool) {
        self.enabled = Some(enabled);
    }

    pub fn with_enabled(mut self, enabled: bool) -> DiagnosticsDescription {
        self.enabled = Some(enabled);
        self
    }

    pub fn enabled(&self) -> Option<&bool> {
        self.enabled.as_ref()
    }

    pub fn reset_enabled(&mut self) {
        self.enabled = None;
    }

    pub fn set_default_sink_refs(&mut self, default_sink_refs: Vec<String>) {
        self.default_sink_refs = Some(default_sink_refs);
    }

    pub fn with_default_sink_refs(
        mut self,
        default_sink_refs: Vec<String>,
    ) -> DiagnosticsDescription {
        self.default_sink_refs = Some(default_sink_refs);
        self
    }

    pub fn default_sink_refs(&self) -> Option<&Vec<String>> {
        self.default_sink_refs.as_ref()
    }

    pub fn reset_default_sink_refs(&mut self) {
        self.default_sink_refs = None;
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 6.4.0.36
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PropertyInfo : Information about a Service Fabric property.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PropertyInfo {
    /// The name of the Service Fabric property.
    #[serde(rename = "Name")]
    name: ::models::PropertyName,
    /// Describes a Service Fabric property value.
    #[serde(rename = "Value")]
    value: Option<::models::PropertyValue>,
    /// The metadata associated with a property, including the property's name.
    #[serde(rename = "Metadata")]
    metadata: ::models::PropertyMetadata,
}

impl PropertyInfo {
    /// Information about a Service Fabric property.
    pub fn new(
        name: ::models::PropertyName,
        metadata: ::models::PropertyMetadata,
    ) -> PropertyInfo {
        PropertyInfo {
            name,
            value: None,
            metadata,
        }
    }

    pub fn set_name(&mut self, name: ::models::PropertyName) {
        self.name = name;
    }

    pub fn with_name(mut self, name: ::models::PropertyName) -> PropertyInfo {
        self.name = name;
        self
    }

    pub fn name(&self) -> &::models::PropertyName {
        &self.name
    }

    pub fn set_value(&mut self, value: ::models::PropertyValue) {
        self.value = Some(value);
    }

    pub fn with_value(
        mut self,
        value: ::models::PropertyValue,
    ) -> PropertyInfo {
        self.value = Some(value);
        self
    }

    pub fn value(&self) -> Option<&::models::PropertyValue> {
        self.value.as_ref()
    }

    pub fn reset_value(&mut self) {
        self.value = None;
    }

    pub fn set_metadata(&mut self, metadata: ::models::PropertyMetadata) {
        self.metadata = metadata;
    }

    pub fn with_metadata(
        mut self,
        metadata: ::models::PropertyMetadata,
    ) -> PropertyInfo {
        self.metadata = metadata;
        self
    }

    pub fn metadata(&self) -> &::models::PropertyMetadata {
        &self.metadata
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.0.0.42
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// NodeDeactivationInfo : Information about the node deactivation. This information is valid for a node that is undergoing deactivation or has already been deactivated.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeDeactivationInfo {
    /// The intent or the reason for deactivating the node. Following are the possible values for it.
    #[serde(rename = "NodeDeactivationIntent")]
    node_deactivation_intent: Option<::models::NodeDeactivationIntent>,
    /// The status of node deactivation operation. Following are the possible values.
    #[serde(rename = "NodeDeactivationStatus")]
    node_deactivation_status: Option<::models::NodeDeactivationStatus>,
    /// List of tasks representing the deactivation operation on the node.
    #[serde(rename = "NodeDeactivationTask")]
    node_deactivation_task: Option<::models::NodeDeactivationTaskList>,
    /// List of pending safety checks
    #[serde(rename = "PendingSafetyChecks")]
    pending_safety_checks: Option<::models::SafetyCheckInfoList>,
}

impl Default for NodeDeactivationInfo {
    fn default() -> Self {
        Self::new()
    }
}

impl NodeDeactivationInfo {
    /// Information about the node deactivation. This information is valid for a node that is undergoing deactivation or has already been deactivated.
    pub fn new() -> NodeDeactivationInfo {
        NodeDeactivationInfo {
            node_deactivation_intent: None,
            node_deactivation_status: None,
            node_deactivation_task: None,
            pending_safety_checks: None,
        }
    }

    pub fn set_node_deactivation_intent(
        &mut self,
        node_deactivation_intent: ::models::NodeDeactivationIntent,
    ) {
        self.node_deactivation_intent = Some(node_deactivation_intent);
    }

    pub fn with_node_deactivation_intent(
        mut self,
        node_deactivation_intent: ::models::NodeDeactivationIntent,
    ) -> NodeDeactivationInfo {
        self.node_deactivation_intent = Some(node_deactivation_intent);
        self
    }

    pub fn node_deactivation_intent(
        &self,
    ) -> Option<&::models::NodeDeactivationIntent> {
        self.node_deactivation_intent.as_ref()
    }

    pub fn reset_node_deactivation_intent(&mut self) {
        self.node_deactivation_intent = None;
    }

    pub fn set_node_deactivation_status(
        &mut self,
        node_deactivation_status: ::models::NodeDeactivationStatus,
    ) {
        self.node_deactivation_status = Some(node_deactivation_status);
    }

    pub fn with_node_deactivation_status(
        mut self,
        node_deactivation_status: ::models::NodeDeactivationStatus,
    ) -> NodeDeactivationInfo {
        self.node_deactivation_status = Some(node_deactivation_status);
        self
    }

    pub fn node_deactivation_status(
        &self,
    ) -> Option<&::models::NodeDeactivationStatus> {
        self.node_deactivation_status.as_ref()
    }

    pub fn reset_node_deactivation_status(&mut self) {
        self.node_deactivation_status = None;
    }

    pub fn set_node_deactivation_task(
        &mut self,
        node_deactivation_task: ::models::NodeDeactivationTaskList,
    ) {
        self.node_deactivation_task = Some(node_deactivation_task);
    }

    pub fn with_node_deactivation_task(
        mut self,
        node_deactivation_task: ::models::NodeDeactivationTaskList,
    ) -> NodeDeactivationInfo {
        self.node_deactivation_task = Some(node_deactivation_task);
        self
    }

    pub fn node_deactivation_task(
        &self,
    ) -> Option<&::models::NodeDeactivationTaskList> {
        self.node_deactivation_task.as_ref()
    }

    pub fn reset_node_deactivation_task(&mut self) {
        self.node_deactivation_task = None;
    }

    pub fn set_pending_safety_checks(
        &mut self,
        pending_safety_checks: ::models::SafetyCheckInfoList,
    ) {
        self.pending_safety_checks = Some(pending_safety_checks);
    }

    pub fn with_pending_safety_checks(
        mut self,
        pending_safety_checks: ::models::SafetyCheckInfoList,
    ) -> NodeDeactivationInfo {
        self.pending_safety_checks = Some(pending_safety_checks);
        self
    }

    pub fn pending_safety_checks(
        &self,
    ) -> Option<&::models::SafetyCheckInfoList> {
        self.pending_safety_checks.as_ref()
    }

    pub fn reset_pending_safety_checks(&mut self) {
        self.pending_safety_checks = None;
    }
}

/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.2.0.46
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DeployedStatefulServiceReplicaDetailInfo : Information about a stateful replica running in a code package. Note DeployedServiceReplicaQueryResult will contain duplicate data like ServiceKind, ServiceName, PartitionId and replicaId.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DeployedStatefulServiceReplicaDetailInfo {
    /// The kind of service (Stateless or Stateful).
    #[serde(rename = "ServiceKind")]
    service_kind: ::models::ServiceKind,
    /// Full hierarchical name of the service in URI format starting with `fabric:`.
    #[serde(rename = "ServiceName")]
    service_name: Option<::models::ServiceName>,
    /// An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.
    #[serde(rename = "PartitionId")]
    partition_id: Option<::models::PartitionId>,
    /// Specifies the current active life-cycle operation on a stateful service replica or stateless service instance.
    #[serde(rename = "CurrentServiceOperation")]
    current_service_operation: Option<::models::ServiceOperationName>,
    /// The start time of the current service operation in UTC format.
    #[serde(rename = "CurrentServiceOperationStartTimeUtc")]
    current_service_operation_start_time_utc: Option<String>,
    /// List of load reported by replica.
    #[serde(rename = "ReportedLoad")]
    reported_load: Option<::models::LoadMetricReportInfoList>,
    /// Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id.
    #[serde(rename = "ReplicaId")]
    replica_id: Option<::models::ReplicaId>,
    /// Specifies the operation currently being executed by the Replicator.
    #[serde(rename = "CurrentReplicatorOperation")]
    current_replicator_operation: Option<::models::ReplicatorOperationName>,
    /// Specifies the access status of the partition.
    #[serde(rename = "ReadStatus")]
    read_status: Option<::models::PartitionAccessStatus>,
    /// Specifies the access status of the partition.
    #[serde(rename = "WriteStatus")]
    write_status: Option<::models::PartitionAccessStatus>,
    /// Represents a base class for primary or secondary replicator status. Contains information about the service fabric replicator like the replication/copy queue utilization, last acknowledgement received timestamp, etc.
    #[serde(rename = "ReplicatorStatus")]
    replicator_status: Option<::models::ReplicatorStatus>,
    /// Key value store related information for the replica.
    #[serde(rename = "ReplicaStatus")]
    replica_status: Option<::models::KeyValueStoreReplicaStatus>,
    /// Information about a stateful service replica deployed on a node.
    #[serde(rename = "DeployedServiceReplicaQueryResult")]
    deployed_service_replica_query_result:
        Option<::models::DeployedStatefulServiceReplicaInfo>,
}

impl DeployedStatefulServiceReplicaDetailInfo {
    /// Information about a stateful replica running in a code package. Note DeployedServiceReplicaQueryResult will contain duplicate data like ServiceKind, ServiceName, PartitionId and replicaId.
    pub fn new(
        service_kind: ::models::ServiceKind,
    ) -> DeployedStatefulServiceReplicaDetailInfo {
        DeployedStatefulServiceReplicaDetailInfo {
            service_kind,
            service_name: None,
            partition_id: None,
            current_service_operation: None,
            current_service_operation_start_time_utc: None,
            reported_load: None,
            replica_id: None,
            current_replicator_operation: None,
            read_status: None,
            write_status: None,
            replicator_status: None,
            replica_status: None,
            deployed_service_replica_query_result: None,
        }
    }

    pub fn set_service_kind(&mut self, service_kind: ::models::ServiceKind) {
        self.service_kind = service_kind;
    }

    pub fn with_service_kind(
        mut self,
        service_kind: ::models::ServiceKind,
    ) -> DeployedStatefulServiceReplicaDetailInfo {
        self.service_kind = service_kind;
        self
    }

    pub fn service_kind(&self) -> &::models::ServiceKind {
        &self.service_kind
    }

    pub fn set_service_name(&mut self, service_name: ::models::ServiceName) {
        self.service_name = Some(service_name);
    }

    pub fn with_service_name(
        mut self,
        service_name: ::models::ServiceName,
    ) -> DeployedStatefulServiceReplicaDetailInfo {
        self.service_name = Some(service_name);
        self
    }

    pub fn service_name(&self) -> Option<&::models::ServiceName> {
        self.service_name.as_ref()
    }

    pub fn reset_service_name(&mut self) {
        self.service_name = None;
    }

    pub fn set_partition_id(&mut self, partition_id: ::models::PartitionId) {
        self.partition_id = Some(partition_id);
    }

    pub fn with_partition_id(
        mut self,
        partition_id: ::models::PartitionId,
    ) -> DeployedStatefulServiceReplicaDetailInfo {
        self.partition_id = Some(partition_id);
        self
    }

    pub fn partition_id(&self) -> Option<&::models::PartitionId> {
        self.partition_id.as_ref()
    }

    pub fn reset_partition_id(&mut self) {
        self.partition_id = None;
    }

    pub fn set_current_service_operation(
        &mut self,
        current_service_operation: ::models::ServiceOperationName,
    ) {
        self.current_service_operation = Some(current_service_operation);
    }

    pub fn with_current_service_operation(
        mut self,
        current_service_operation: ::models::ServiceOperationName,
    ) -> DeployedStatefulServiceReplicaDetailInfo {
        self.current_service_operation = Some(current_service_operation);
        self
    }

    pub fn current_service_operation(
        &self,
    ) -> Option<&::models::ServiceOperationName> {
        self.current_service_operation.as_ref()
    }

    pub fn reset_current_service_operation(&mut self) {
        self.current_service_operation = None;
    }

    pub fn set_current_service_operation_start_time_utc(
        &mut self,
        current_service_operation_start_time_utc: String,
    ) {
        self.current_service_operation_start_time_utc =
            Some(current_service_operation_start_time_utc);
    }

    pub fn with_current_service_operation_start_time_utc(
        mut self,
        current_service_operation_start_time_utc: String,
    ) -> DeployedStatefulServiceReplicaDetailInfo {
        self.current_service_operation_start_time_utc =
            Some(current_service_operation_start_time_utc);
        self
    }

    pub fn current_service_operation_start_time_utc(&self) -> Option<&String> {
        self.current_service_operation_start_time_utc.as_ref()
    }

    pub fn reset_current_service_operation_start_time_utc(&mut self) {
        self.current_service_operation_start_time_utc = None;
    }

    pub fn set_reported_load(
        &mut self,
        reported_load: ::models::LoadMetricReportInfoList,
    ) {
        self.reported_load = Some(reported_load);
    }

    pub fn with_reported_load(
        mut self,
        reported_load: ::models::LoadMetricReportInfoList,
    ) -> DeployedStatefulServiceReplicaDetailInfo {
        self.reported_load = Some(reported_load);
        self
    }

    pub fn reported_load(&self) -> Option<&::models::LoadMetricReportInfoList> {
        self.reported_load.as_ref()
    }

    pub fn reset_reported_load(&mut self) {
        self.reported_load = None;
    }

    pub fn set_replica_id(&mut self, replica_id: ::models::ReplicaId) {
        self.replica_id = Some(replica_id);
    }

    pub fn with_replica_id(
        mut self,
        replica_id: ::models::ReplicaId,
    ) -> DeployedStatefulServiceReplicaDetailInfo {
        self.replica_id = Some(replica_id);
        self
    }

    pub fn replica_id(&self) -> Option<&::models::ReplicaId> {
        self.replica_id.as_ref()
    }

    pub fn reset_replica_id(&mut self) {
        self.replica_id = None;
    }

    pub fn set_current_replicator_operation(
        &mut self,
        current_replicator_operation: ::models::ReplicatorOperationName,
    ) {
        self.current_replicator_operation = Some(current_replicator_operation);
    }

    pub fn with_current_replicator_operation(
        mut self,
        current_replicator_operation: ::models::ReplicatorOperationName,
    ) -> DeployedStatefulServiceReplicaDetailInfo {
        self.current_replicator_operation = Some(current_replicator_operation);
        self
    }

    pub fn current_replicator_operation(
        &self,
    ) -> Option<&::models::ReplicatorOperationName> {
        self.current_replicator_operation.as_ref()
    }

    pub fn reset_current_replicator_operation(&mut self) {
        self.current_replicator_operation = None;
    }

    pub fn set_read_status(
        &mut self,
        read_status: ::models::PartitionAccessStatus,
    ) {
        self.read_status = Some(read_status);
    }

    pub fn with_read_status(
        mut self,
        read_status: ::models::PartitionAccessStatus,
    ) -> DeployedStatefulServiceReplicaDetailInfo {
        self.read_status = Some(read_status);
        self
    }

    pub fn read_status(&self) -> Option<&::models::PartitionAccessStatus> {
        self.read_status.as_ref()
    }

    pub fn reset_read_status(&mut self) {
        self.read_status = None;
    }

    pub fn set_write_status(
        &mut self,
        write_status: ::models::PartitionAccessStatus,
    ) {
        self.write_status = Some(write_status);
    }

    pub fn with_write_status(
        mut self,
        write_status: ::models::PartitionAccessStatus,
    ) -> DeployedStatefulServiceReplicaDetailInfo {
        self.write_status = Some(write_status);
        self
    }

    pub fn write_status(&self) -> Option<&::models::PartitionAccessStatus> {
        self.write_status.as_ref()
    }

    pub fn reset_write_status(&mut self) {
        self.write_status = None;
    }

    pub fn set_replicator_status(
        &mut self,
        replicator_status: ::models::ReplicatorStatus,
    ) {
        self.replicator_status = Some(replicator_status);
    }

    pub fn with_replicator_status(
        mut self,
        replicator_status: ::models::ReplicatorStatus,
    ) -> DeployedStatefulServiceReplicaDetailInfo {
        self.replicator_status = Some(replicator_status);
        self
    }

    pub fn replicator_status(&self) -> Option<&::models::ReplicatorStatus> {
        self.replicator_status.as_ref()
    }

    pub fn reset_replicator_status(&mut self) {
        self.replicator_status = None;
    }

    pub fn set_replica_status(
        &mut self,
        replica_status: ::models::KeyValueStoreReplicaStatus,
    ) {
        self.replica_status = Some(replica_status);
    }

    pub fn with_replica_status(
        mut self,
        replica_status: ::models::KeyValueStoreReplicaStatus,
    ) -> DeployedStatefulServiceReplicaDetailInfo {
        self.replica_status = Some(replica_status);
        self
    }

    pub fn replica_status(
        &self,
    ) -> Option<&::models::KeyValueStoreReplicaStatus> {
        self.replica_status.as_ref()
    }

    pub fn reset_replica_status(&mut self) {
        self.replica_status = None;
    }

    pub fn set_deployed_service_replica_query_result(
        &mut self,
        deployed_service_replica_query_result: ::models::DeployedStatefulServiceReplicaInfo,
    ) {
        self.deployed_service_replica_query_result =
            Some(deployed_service_replica_query_result);
    }

    pub fn with_deployed_service_replica_query_result(
        mut self,
        deployed_service_replica_query_result: ::models::DeployedStatefulServiceReplicaInfo,
    ) -> DeployedStatefulServiceReplicaDetailInfo {
        self.deployed_service_replica_query_result =
            Some(deployed_service_replica_query_result);
        self
    }

    pub fn deployed_service_replica_query_result(
        &self,
    ) -> Option<&::models::DeployedStatefulServiceReplicaInfo> {
        self.deployed_service_replica_query_result.as_ref()
    }

    pub fn reset_deployed_service_replica_query_result(&mut self) {
        self.deployed_service_replica_query_result = None;
    }
}

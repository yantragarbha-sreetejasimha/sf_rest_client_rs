/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.0.0.42
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// FileShareBackupStorageDescription : Describes the parameters for file share storage used for storing or enumerating backups.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FileShareBackupStorageDescription {
    /// The kind of backup storage, where backups are saved.
    #[serde(rename = "StorageKind")]
    storage_kind: ::models::BackupStorageKind,
    /// Friendly name for this backup storage.
    #[serde(rename = "FriendlyName")]
    friendly_name: Option<String>,
    /// UNC path of the file share where to store or enumerate backups from.
    #[serde(rename = "Path")]
    path: String,
    /// Primary user name to access the file share.
    #[serde(rename = "PrimaryUserName")]
    primary_user_name: Option<String>,
    /// Primary password to access the share location.
    #[serde(rename = "PrimaryPassword")]
    primary_password: Option<String>,
    /// Secondary user name to access the file share.
    #[serde(rename = "SecondaryUserName")]
    secondary_user_name: Option<String>,
    /// Secondary password to access the share location
    #[serde(rename = "SecondaryPassword")]
    secondary_password: Option<String>,
}

impl FileShareBackupStorageDescription {
    /// Describes the parameters for file share storage used for storing or enumerating backups.
    pub fn new(
        storage_kind: ::models::BackupStorageKind,
        path: String,
    ) -> FileShareBackupStorageDescription {
        FileShareBackupStorageDescription {
            storage_kind,
            friendly_name: None,
            path,
            primary_user_name: None,
            primary_password: None,
            secondary_user_name: None,
            secondary_password: None,
        }
    }

    pub fn set_storage_kind(
        &mut self,
        storage_kind: ::models::BackupStorageKind,
    ) {
        self.storage_kind = storage_kind;
    }

    pub fn with_storage_kind(
        mut self,
        storage_kind: ::models::BackupStorageKind,
    ) -> FileShareBackupStorageDescription {
        self.storage_kind = storage_kind;
        self
    }

    pub fn storage_kind(&self) -> &::models::BackupStorageKind {
        &self.storage_kind
    }

    pub fn set_friendly_name(&mut self, friendly_name: String) {
        self.friendly_name = Some(friendly_name);
    }

    pub fn with_friendly_name(
        mut self,
        friendly_name: String,
    ) -> FileShareBackupStorageDescription {
        self.friendly_name = Some(friendly_name);
        self
    }

    pub fn friendly_name(&self) -> Option<&String> {
        self.friendly_name.as_ref()
    }

    pub fn reset_friendly_name(&mut self) {
        self.friendly_name = None;
    }

    pub fn set_path(&mut self, path: String) {
        self.path = path;
    }

    pub fn with_path(
        mut self,
        path: String,
    ) -> FileShareBackupStorageDescription {
        self.path = path;
        self
    }

    pub fn path(&self) -> &String {
        &self.path
    }

    pub fn set_primary_user_name(&mut self, primary_user_name: String) {
        self.primary_user_name = Some(primary_user_name);
    }

    pub fn with_primary_user_name(
        mut self,
        primary_user_name: String,
    ) -> FileShareBackupStorageDescription {
        self.primary_user_name = Some(primary_user_name);
        self
    }

    pub fn primary_user_name(&self) -> Option<&String> {
        self.primary_user_name.as_ref()
    }

    pub fn reset_primary_user_name(&mut self) {
        self.primary_user_name = None;
    }

    pub fn set_primary_password(&mut self, primary_password: String) {
        self.primary_password = Some(primary_password);
    }

    pub fn with_primary_password(
        mut self,
        primary_password: String,
    ) -> FileShareBackupStorageDescription {
        self.primary_password = Some(primary_password);
        self
    }

    pub fn primary_password(&self) -> Option<&String> {
        self.primary_password.as_ref()
    }

    pub fn reset_primary_password(&mut self) {
        self.primary_password = None;
    }

    pub fn set_secondary_user_name(&mut self, secondary_user_name: String) {
        self.secondary_user_name = Some(secondary_user_name);
    }

    pub fn with_secondary_user_name(
        mut self,
        secondary_user_name: String,
    ) -> FileShareBackupStorageDescription {
        self.secondary_user_name = Some(secondary_user_name);
        self
    }

    pub fn secondary_user_name(&self) -> Option<&String> {
        self.secondary_user_name.as_ref()
    }

    pub fn reset_secondary_user_name(&mut self) {
        self.secondary_user_name = None;
    }

    pub fn set_secondary_password(&mut self, secondary_password: String) {
        self.secondary_password = Some(secondary_password);
    }

    pub fn with_secondary_password(
        mut self,
        secondary_password: String,
    ) -> FileShareBackupStorageDescription {
        self.secondary_password = Some(secondary_password);
        self
    }

    pub fn secondary_password(&self) -> Option<&String> {
        self.secondary_password.as_ref()
    }

    pub fn reset_secondary_password(&mut self) {
        self.secondary_password = None;
    }
}

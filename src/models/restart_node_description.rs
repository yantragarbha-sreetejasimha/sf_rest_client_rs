/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.2.0.46
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// RestartNodeDescription : Describes the parameters to restart a Service Fabric node.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RestartNodeDescription {
    /// The instance ID of the target node. If instance ID is specified the node is restarted only if it matches with the current instance of the node. A default value of \"0\" would match any instance ID. The instance ID can be obtained using get node query.
    #[serde(rename = "NodeInstanceId")]
    node_instance_id: String,
    /// Specify True to create a dump of the fabric node process. This is case-sensitive.
    #[serde(rename = "CreateFabricDump")]
    create_fabric_dump: Option<String>,
}

impl RestartNodeDescription {
    /// Describes the parameters to restart a Service Fabric node.
    pub fn new(node_instance_id: String) -> RestartNodeDescription {
        RestartNodeDescription {
            node_instance_id,
            create_fabric_dump: None,
        }
    }

    pub fn set_node_instance_id(&mut self, node_instance_id: String) {
        self.node_instance_id = node_instance_id;
    }

    pub fn with_node_instance_id(
        mut self,
        node_instance_id: String,
    ) -> RestartNodeDescription {
        self.node_instance_id = node_instance_id;
        self
    }

    pub fn node_instance_id(&self) -> &String {
        &self.node_instance_id
    }

    pub fn set_create_fabric_dump(&mut self, create_fabric_dump: String) {
        self.create_fabric_dump = Some(create_fabric_dump);
    }

    pub fn with_create_fabric_dump(
        mut self,
        create_fabric_dump: String,
    ) -> RestartNodeDescription {
        self.create_fabric_dump = Some(create_fabric_dump);
        self
    }

    pub fn create_fabric_dump(&self) -> Option<&String> {
        self.create_fabric_dump.as_ref()
    }

    pub fn reset_create_fabric_dump(&mut self) {
        self.create_fabric_dump = None;
    }
}

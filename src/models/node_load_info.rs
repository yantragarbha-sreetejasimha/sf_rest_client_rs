/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.2.0.46
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// NodeLoadInfo : Information about load on a Service Fabric node. It holds a summary of all metrics and their load on a node.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NodeLoadInfo {
    /// Name of the node for which the load information is provided by this object.
    #[serde(rename = "NodeName")]
    node_name: Option<::models::NodeName>,
    /// List that contains metrics and their load information on this node.
    #[serde(rename = "NodeLoadMetricInformation")]
    node_load_metric_information:
        Option<Vec<::models::NodeLoadMetricInformation>>,
}

impl Default for NodeLoadInfo {
    fn default() -> Self {
        Self::new()
    }
}

impl NodeLoadInfo {
    /// Information about load on a Service Fabric node. It holds a summary of all metrics and their load on a node.
    pub fn new() -> NodeLoadInfo {
        NodeLoadInfo {
            node_name: None,
            node_load_metric_information: None,
        }
    }

    pub fn set_node_name(&mut self, node_name: ::models::NodeName) {
        self.node_name = Some(node_name);
    }

    pub fn with_node_name(
        mut self,
        node_name: ::models::NodeName,
    ) -> NodeLoadInfo {
        self.node_name = Some(node_name);
        self
    }

    pub fn node_name(&self) -> Option<&::models::NodeName> {
        self.node_name.as_ref()
    }

    pub fn reset_node_name(&mut self) {
        self.node_name = None;
    }

    pub fn set_node_load_metric_information(
        &mut self,
        node_load_metric_information: Vec<::models::NodeLoadMetricInformation>,
    ) {
        self.node_load_metric_information = Some(node_load_metric_information);
    }

    pub fn with_node_load_metric_information(
        mut self,
        node_load_metric_information: Vec<::models::NodeLoadMetricInformation>,
    ) -> NodeLoadInfo {
        self.node_load_metric_information = Some(node_load_metric_information);
        self
    }

    pub fn node_load_metric_information(
        &self,
    ) -> Option<&Vec<::models::NodeLoadMetricInformation>> {
        self.node_load_metric_information.as_ref()
    }

    pub fn reset_node_load_metric_information(&mut self) {
        self.node_load_metric_information = None;
    }
}

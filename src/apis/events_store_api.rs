/*
 * Service Fabric Client APIs
 *
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * OpenAPI spec version: 7.1.0.45
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::borrow::Borrow;
use std::borrow::Cow;
use std::rc::Rc;

use hyper;
use serde_json;

use futures::{Future, Stream};

use hyper::header::UserAgent;

use super::{configuration, Error};

pub struct EventsStoreApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> EventsStoreApiClient<C> {
    pub fn new(
        configuration: Rc<configuration::Configuration<C>>,
    ) -> EventsStoreApiClient<C> {
        EventsStoreApiClient { configuration }
    }
}

pub trait EventsStoreApi {
    fn get_application_event_list(
        &self,
        api_version: &str,
        application_id: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::ApplicationEventList,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_applications_event_list(
        &self,
        api_version: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::ApplicationEventList,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_cluster_event_list(
        &self,
        api_version: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::ClusterEventList,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_containers_event_list(
        &self,
        api_version: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::ContainerInstanceEventList,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_correlated_event_list(
        &self,
        api_version: &str,
        event_instance_id: &str,
        timeout: i64,
    ) -> Box<
        dyn Future<
            Item = ::models::EventList,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_node_event_list(
        &self,
        api_version: &str,
        node_name: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::NodeEventList,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_nodes_event_list(
        &self,
        api_version: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::NodeEventList,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_partition_event_list(
        &self,
        api_version: &str,
        partition_id: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::PartitionEventList,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_partition_replica_event_list(
        &self,
        api_version: &str,
        partition_id: &str,
        replica_id: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::ReplicaEventList,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_partition_replicas_event_list(
        &self,
        api_version: &str,
        partition_id: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::ReplicaEventList,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_partitions_event_list(
        &self,
        api_version: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::PartitionEventList,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_service_event_list(
        &self,
        api_version: &str,
        service_id: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::ServiceEventList,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_services_event_list(
        &self,
        api_version: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::ServiceEventList,
            Error = Error<serde_json::Value>,
        >,
    >;
}

impl<C: hyper::client::Connect> EventsStoreApi for EventsStoreApiClient<C> {
    fn get_application_event_list(
        &self,
        api_version: &str,
        application_id: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::ApplicationEventList,
            Error = Error<serde_json::Value>,
        >,
    > {
        let configuration: &configuration::Configuration<C> =
            self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query =
                ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("api-version", api_version);
            query.append_pair("timeout", &timeout.to_string());
            query.append_pair("StartTimeUtc", start_time_utc);
            query.append_pair("EndTimeUtc", end_time_utc);
            query.append_pair("EventsTypesFilter", events_types_filter);
            query.append_pair(
                "ExcludeAnalysisEvents",
                &exclude_analysis_events.to_string(),
            );
            query.append_pair(
                "SkipCorrelationLookup",
                &skip_correlation_lookup.to_string(),
            );
            query.finish()
        };
        let uri_str = format!(
            "{}/EventsStore/Applications/{applicationId}/$/Events?{}",
            configuration.base_path,
            query_string,
            applicationId = application_id
        );

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut()
                .set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .map_err(Error::from)
                .and_then(|resp| {
                    let status = resp.status();
                    resp.body()
                        .concat2()
                        .and_then(move |body| Ok((status, body)))
                        .map_err(Error::from)
                })
                .and_then(|(status, body)| {
                    if status.is_success() {
                        Ok(body)
                    } else {
                        Err(Error::from((status, &*body)))
                    }
                })
                .and_then(|body| {
                    let parsed: Result<::models::ApplicationEventList, _> =
                        serde_json::from_slice(&body);
                    parsed.map_err(Error::from)
                }),
        )
    }

    fn get_applications_event_list(
        &self,
        api_version: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::ApplicationEventList,
            Error = Error<serde_json::Value>,
        >,
    > {
        let configuration: &configuration::Configuration<C> =
            self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query =
                ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("api-version", api_version);
            query.append_pair("timeout", &timeout.to_string());
            query.append_pair("StartTimeUtc", start_time_utc);
            query.append_pair("EndTimeUtc", end_time_utc);
            query.append_pair("EventsTypesFilter", events_types_filter);
            query.append_pair(
                "ExcludeAnalysisEvents",
                &exclude_analysis_events.to_string(),
            );
            query.append_pair(
                "SkipCorrelationLookup",
                &skip_correlation_lookup.to_string(),
            );
            query.finish()
        };
        let uri_str = format!(
            "{}/EventsStore/Applications/Events?{}",
            configuration.base_path, query_string
        );

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut()
                .set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .map_err(Error::from)
                .and_then(|resp| {
                    let status = resp.status();
                    resp.body()
                        .concat2()
                        .and_then(move |body| Ok((status, body)))
                        .map_err(Error::from)
                })
                .and_then(|(status, body)| {
                    if status.is_success() {
                        Ok(body)
                    } else {
                        Err(Error::from((status, &*body)))
                    }
                })
                .and_then(|body| {
                    let parsed: Result<::models::ApplicationEventList, _> =
                        serde_json::from_slice(&body);
                    parsed.map_err(Error::from)
                }),
        )
    }

    fn get_cluster_event_list(
        &self,
        api_version: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::ClusterEventList,
            Error = Error<serde_json::Value>,
        >,
    > {
        let configuration: &configuration::Configuration<C> =
            self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query =
                ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("api-version", api_version);
            query.append_pair("timeout", &timeout.to_string());
            query.append_pair("StartTimeUtc", start_time_utc);
            query.append_pair("EndTimeUtc", end_time_utc);
            query.append_pair("EventsTypesFilter", events_types_filter);
            query.append_pair(
                "ExcludeAnalysisEvents",
                &exclude_analysis_events.to_string(),
            );
            query.append_pair(
                "SkipCorrelationLookup",
                &skip_correlation_lookup.to_string(),
            );
            query.finish()
        };
        let uri_str = format!(
            "{}/EventsStore/Cluster/Events?{}",
            configuration.base_path, query_string
        );

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut()
                .set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .map_err(Error::from)
                .and_then(|resp| {
                    let status = resp.status();
                    resp.body()
                        .concat2()
                        .and_then(move |body| Ok((status, body)))
                        .map_err(Error::from)
                })
                .and_then(|(status, body)| {
                    if status.is_success() {
                        Ok(body)
                    } else {
                        Err(Error::from((status, &*body)))
                    }
                })
                .and_then(|body| {
                    let parsed: Result<::models::ClusterEventList, _> =
                        serde_json::from_slice(&body);
                    parsed.map_err(Error::from)
                }),
        )
    }

    fn get_containers_event_list(
        &self,
        api_version: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::ContainerInstanceEventList,
            Error = Error<serde_json::Value>,
        >,
    > {
        let configuration: &configuration::Configuration<C> =
            self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query =
                ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("api-version", api_version);
            query.append_pair("timeout", &timeout.to_string());
            query.append_pair("StartTimeUtc", start_time_utc);
            query.append_pair("EndTimeUtc", end_time_utc);
            query.append_pair("EventsTypesFilter", events_types_filter);
            query.append_pair(
                "ExcludeAnalysisEvents",
                &exclude_analysis_events.to_string(),
            );
            query.append_pair(
                "SkipCorrelationLookup",
                &skip_correlation_lookup.to_string(),
            );
            query.finish()
        };
        let uri_str = format!(
            "{}/EventsStore/Containers/Events?{}",
            configuration.base_path, query_string
        );

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut()
                .set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .map_err(Error::from)
                .and_then(|resp| {
                    let status = resp.status();
                    resp.body()
                        .concat2()
                        .and_then(move |body| Ok((status, body)))
                        .map_err(Error::from)
                })
                .and_then(|(status, body)| {
                    if status.is_success() {
                        Ok(body)
                    } else {
                        Err(Error::from((status, &*body)))
                    }
                })
                .and_then(|body| {
                    let parsed: Result<
                        ::models::ContainerInstanceEventList,
                        _,
                    > = serde_json::from_slice(&body);
                    parsed.map_err(Error::from)
                }),
        )
    }

    fn get_correlated_event_list(
        &self,
        api_version: &str,
        event_instance_id: &str,
        timeout: i64,
    ) -> Box<
        dyn Future<
            Item = ::models::EventList,
            Error = Error<serde_json::Value>,
        >,
    > {
        let configuration: &configuration::Configuration<C> =
            self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query =
                ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("api-version", api_version);
            query.append_pair("timeout", &timeout.to_string());
            query.finish()
        };
        let uri_str = format!(
            "{}/EventsStore/CorrelatedEvents/{eventInstanceId}/$/Events?{}",
            configuration.base_path,
            query_string,
            eventInstanceId = event_instance_id
        );

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut()
                .set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .map_err(Error::from)
                .and_then(|resp| {
                    let status = resp.status();
                    resp.body()
                        .concat2()
                        .and_then(move |body| Ok((status, body)))
                        .map_err(Error::from)
                })
                .and_then(|(status, body)| {
                    if status.is_success() {
                        Ok(body)
                    } else {
                        Err(Error::from((status, &*body)))
                    }
                })
                .and_then(|body| {
                    let parsed: Result<::models::EventList, _> =
                        serde_json::from_slice(&body);
                    parsed.map_err(Error::from)
                }),
        )
    }

    fn get_node_event_list(
        &self,
        api_version: &str,
        node_name: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::NodeEventList,
            Error = Error<serde_json::Value>,
        >,
    > {
        let configuration: &configuration::Configuration<C> =
            self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query =
                ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("api-version", api_version);
            query.append_pair("timeout", &timeout.to_string());
            query.append_pair("StartTimeUtc", start_time_utc);
            query.append_pair("EndTimeUtc", end_time_utc);
            query.append_pair("EventsTypesFilter", events_types_filter);
            query.append_pair(
                "ExcludeAnalysisEvents",
                &exclude_analysis_events.to_string(),
            );
            query.append_pair(
                "SkipCorrelationLookup",
                &skip_correlation_lookup.to_string(),
            );
            query.finish()
        };
        let uri_str = format!(
            "{}/EventsStore/Nodes/{nodeName}/$/Events?{}",
            configuration.base_path,
            query_string,
            nodeName = node_name
        );

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut()
                .set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .map_err(Error::from)
                .and_then(|resp| {
                    let status = resp.status();
                    resp.body()
                        .concat2()
                        .and_then(move |body| Ok((status, body)))
                        .map_err(Error::from)
                })
                .and_then(|(status, body)| {
                    if status.is_success() {
                        Ok(body)
                    } else {
                        Err(Error::from((status, &*body)))
                    }
                })
                .and_then(|body| {
                    let parsed: Result<::models::NodeEventList, _> =
                        serde_json::from_slice(&body);
                    parsed.map_err(Error::from)
                }),
        )
    }

    fn get_nodes_event_list(
        &self,
        api_version: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::NodeEventList,
            Error = Error<serde_json::Value>,
        >,
    > {
        let configuration: &configuration::Configuration<C> =
            self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query =
                ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("api-version", api_version);
            query.append_pair("timeout", &timeout.to_string());
            query.append_pair("StartTimeUtc", start_time_utc);
            query.append_pair("EndTimeUtc", end_time_utc);
            query.append_pair("EventsTypesFilter", events_types_filter);
            query.append_pair(
                "ExcludeAnalysisEvents",
                &exclude_analysis_events.to_string(),
            );
            query.append_pair(
                "SkipCorrelationLookup",
                &skip_correlation_lookup.to_string(),
            );
            query.finish()
        };
        let uri_str = format!(
            "{}/EventsStore/Nodes/Events?{}",
            configuration.base_path, query_string
        );

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut()
                .set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .map_err(Error::from)
                .and_then(|resp| {
                    let status = resp.status();
                    resp.body()
                        .concat2()
                        .and_then(move |body| Ok((status, body)))
                        .map_err(Error::from)
                })
                .and_then(|(status, body)| {
                    if status.is_success() {
                        Ok(body)
                    } else {
                        Err(Error::from((status, &*body)))
                    }
                })
                .and_then(|body| {
                    let parsed: Result<::models::NodeEventList, _> =
                        serde_json::from_slice(&body);
                    parsed.map_err(Error::from)
                }),
        )
    }

    fn get_partition_event_list(
        &self,
        api_version: &str,
        partition_id: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::PartitionEventList,
            Error = Error<serde_json::Value>,
        >,
    > {
        let configuration: &configuration::Configuration<C> =
            self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query =
                ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("api-version", api_version);
            query.append_pair("timeout", &timeout.to_string());
            query.append_pair("StartTimeUtc", start_time_utc);
            query.append_pair("EndTimeUtc", end_time_utc);
            query.append_pair("EventsTypesFilter", events_types_filter);
            query.append_pair(
                "ExcludeAnalysisEvents",
                &exclude_analysis_events.to_string(),
            );
            query.append_pair(
                "SkipCorrelationLookup",
                &skip_correlation_lookup.to_string(),
            );
            query.finish()
        };
        let uri_str = format!(
            "{}/EventsStore/Partitions/{partitionId}/$/Events?{}",
            configuration.base_path,
            query_string,
            partitionId = partition_id
        );

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut()
                .set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .map_err(Error::from)
                .and_then(|resp| {
                    let status = resp.status();
                    resp.body()
                        .concat2()
                        .and_then(move |body| Ok((status, body)))
                        .map_err(Error::from)
                })
                .and_then(|(status, body)| {
                    if status.is_success() {
                        Ok(body)
                    } else {
                        Err(Error::from((status, &*body)))
                    }
                })
                .and_then(|body| {
                    let parsed: Result<::models::PartitionEventList, _> =
                        serde_json::from_slice(&body);
                    parsed.map_err(Error::from)
                }),
        )
    }

    fn get_partition_replica_event_list(
        &self,
        api_version: &str,
        partition_id: &str,
        replica_id: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::ReplicaEventList,
            Error = Error<serde_json::Value>,
        >,
    > {
        let configuration: &configuration::Configuration<C> =
            self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query =
                ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("api-version", api_version);
            query.append_pair("timeout", &timeout.to_string());
            query.append_pair("StartTimeUtc", start_time_utc);
            query.append_pair("EndTimeUtc", end_time_utc);
            query.append_pair("EventsTypesFilter", events_types_filter);
            query.append_pair(
                "ExcludeAnalysisEvents",
                &exclude_analysis_events.to_string(),
            );
            query.append_pair(
                "SkipCorrelationLookup",
                &skip_correlation_lookup.to_string(),
            );
            query.finish()
        };
        let uri_str = format!("{}/EventsStore/Partitions/{partitionId}/$/Replicas/{replicaId}/$/Events?{}", configuration.base_path, query_string, partitionId=partition_id, replicaId=replica_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut()
                .set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .map_err(Error::from)
                .and_then(|resp| {
                    let status = resp.status();
                    resp.body()
                        .concat2()
                        .and_then(move |body| Ok((status, body)))
                        .map_err(Error::from)
                })
                .and_then(|(status, body)| {
                    if status.is_success() {
                        Ok(body)
                    } else {
                        Err(Error::from((status, &*body)))
                    }
                })
                .and_then(|body| {
                    let parsed: Result<::models::ReplicaEventList, _> =
                        serde_json::from_slice(&body);
                    parsed.map_err(Error::from)
                }),
        )
    }

    fn get_partition_replicas_event_list(
        &self,
        api_version: &str,
        partition_id: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::ReplicaEventList,
            Error = Error<serde_json::Value>,
        >,
    > {
        let configuration: &configuration::Configuration<C> =
            self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query =
                ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("api-version", api_version);
            query.append_pair("timeout", &timeout.to_string());
            query.append_pair("StartTimeUtc", start_time_utc);
            query.append_pair("EndTimeUtc", end_time_utc);
            query.append_pair("EventsTypesFilter", events_types_filter);
            query.append_pair(
                "ExcludeAnalysisEvents",
                &exclude_analysis_events.to_string(),
            );
            query.append_pair(
                "SkipCorrelationLookup",
                &skip_correlation_lookup.to_string(),
            );
            query.finish()
        };
        let uri_str = format!(
            "{}/EventsStore/Partitions/{partitionId}/$/Replicas/Events?{}",
            configuration.base_path,
            query_string,
            partitionId = partition_id
        );

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut()
                .set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .map_err(Error::from)
                .and_then(|resp| {
                    let status = resp.status();
                    resp.body()
                        .concat2()
                        .and_then(move |body| Ok((status, body)))
                        .map_err(Error::from)
                })
                .and_then(|(status, body)| {
                    if status.is_success() {
                        Ok(body)
                    } else {
                        Err(Error::from((status, &*body)))
                    }
                })
                .and_then(|body| {
                    let parsed: Result<::models::ReplicaEventList, _> =
                        serde_json::from_slice(&body);
                    parsed.map_err(Error::from)
                }),
        )
    }

    fn get_partitions_event_list(
        &self,
        api_version: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::PartitionEventList,
            Error = Error<serde_json::Value>,
        >,
    > {
        let configuration: &configuration::Configuration<C> =
            self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query =
                ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("api-version", api_version);
            query.append_pair("timeout", &timeout.to_string());
            query.append_pair("StartTimeUtc", start_time_utc);
            query.append_pair("EndTimeUtc", end_time_utc);
            query.append_pair("EventsTypesFilter", events_types_filter);
            query.append_pair(
                "ExcludeAnalysisEvents",
                &exclude_analysis_events.to_string(),
            );
            query.append_pair(
                "SkipCorrelationLookup",
                &skip_correlation_lookup.to_string(),
            );
            query.finish()
        };
        let uri_str = format!(
            "{}/EventsStore/Partitions/Events?{}",
            configuration.base_path, query_string
        );

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut()
                .set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .map_err(Error::from)
                .and_then(|resp| {
                    let status = resp.status();
                    resp.body()
                        .concat2()
                        .and_then(move |body| Ok((status, body)))
                        .map_err(Error::from)
                })
                .and_then(|(status, body)| {
                    if status.is_success() {
                        Ok(body)
                    } else {
                        Err(Error::from((status, &*body)))
                    }
                })
                .and_then(|body| {
                    let parsed: Result<::models::PartitionEventList, _> =
                        serde_json::from_slice(&body);
                    parsed.map_err(Error::from)
                }),
        )
    }

    fn get_service_event_list(
        &self,
        api_version: &str,
        service_id: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::ServiceEventList,
            Error = Error<serde_json::Value>,
        >,
    > {
        let configuration: &configuration::Configuration<C> =
            self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query =
                ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("api-version", api_version);
            query.append_pair("timeout", &timeout.to_string());
            query.append_pair("StartTimeUtc", start_time_utc);
            query.append_pair("EndTimeUtc", end_time_utc);
            query.append_pair("EventsTypesFilter", events_types_filter);
            query.append_pair(
                "ExcludeAnalysisEvents",
                &exclude_analysis_events.to_string(),
            );
            query.append_pair(
                "SkipCorrelationLookup",
                &skip_correlation_lookup.to_string(),
            );
            query.finish()
        };
        let uri_str = format!(
            "{}/EventsStore/Services/{serviceId}/$/Events?{}",
            configuration.base_path,
            query_string,
            serviceId = service_id
        );

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut()
                .set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .map_err(Error::from)
                .and_then(|resp| {
                    let status = resp.status();
                    resp.body()
                        .concat2()
                        .and_then(move |body| Ok((status, body)))
                        .map_err(Error::from)
                })
                .and_then(|(status, body)| {
                    if status.is_success() {
                        Ok(body)
                    } else {
                        Err(Error::from((status, &*body)))
                    }
                })
                .and_then(|body| {
                    let parsed: Result<::models::ServiceEventList, _> =
                        serde_json::from_slice(&body);
                    parsed.map_err(Error::from)
                }),
        )
    }

    fn get_services_event_list(
        &self,
        api_version: &str,
        start_time_utc: &str,
        end_time_utc: &str,
        timeout: i64,
        events_types_filter: &str,
        exclude_analysis_events: bool,
        skip_correlation_lookup: bool,
    ) -> Box<
        dyn Future<
            Item = ::models::ServiceEventList,
            Error = Error<serde_json::Value>,
        >,
    > {
        let configuration: &configuration::Configuration<C> =
            self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query =
                ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("api-version", api_version);
            query.append_pair("timeout", &timeout.to_string());
            query.append_pair("StartTimeUtc", start_time_utc);
            query.append_pair("EndTimeUtc", end_time_utc);
            query.append_pair("EventsTypesFilter", events_types_filter);
            query.append_pair(
                "ExcludeAnalysisEvents",
                &exclude_analysis_events.to_string(),
            );
            query.append_pair(
                "SkipCorrelationLookup",
                &skip_correlation_lookup.to_string(),
            );
            query.finish()
        };
        let uri_str = format!(
            "{}/EventsStore/Services/Events?{}",
            configuration.base_path, query_string
        );

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut()
                .set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        // send request
        Box::new(
            configuration
                .client
                .request(req)
                .map_err(Error::from)
                .and_then(|resp| {
                    let status = resp.status();
                    resp.body()
                        .concat2()
                        .and_then(move |body| Ok((status, body)))
                        .map_err(Error::from)
                })
                .and_then(|(status, body)| {
                    if status.is_success() {
                        Ok(body)
                    } else {
                        Err(Error::from((status, &*body)))
                    }
                })
                .and_then(|body| {
                    let parsed: Result<::models::ServiceEventList, _> =
                        serde_json::from_slice(&body);
                    parsed.map_err(Error::from)
                }),
        )
    }
}
